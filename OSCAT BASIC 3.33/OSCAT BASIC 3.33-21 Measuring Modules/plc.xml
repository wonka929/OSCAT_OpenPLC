<?xml version='1.0' encoding='utf-8'?>
<project xmlns:ns1="http://www.plcopen.org/xml/tc6_0201" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Unbekannt" productName="Unbenannt" productVersion="1" creationDateTime="2019-09-10T11:27:54"/>
  <contentHeader name="Unbenannt" modificationDateTime="2019-09-10T15:48:56">
    <coordinateInfo>
      <fbd>
        <scaling x="10" y="10"/>
      </fbd>
      <ld>
        <scaling x="10" y="10"/>
      </ld>
      <sfc>
        <scaling x="10" y="10"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="REAL2">
        <baseType>
          <struct>
            <variable name="R1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="RX">
              <type>
                <REAL/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="T_PLC_US" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <localVars>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
          <inputVars>
            <variable name="debug">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="N">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="offset">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="temp">
              <type>
                <DWORD/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[{extern unsigned long __tick;
extern unsigned long long common_ticktime__;
unsigned long long ticktime_ms = (common_ticktime__)/1000000;
UDINT plc_time = (UDINT)(ticktime_ms * (unsigned long long)__tick);
TX = plc_time}

T_PLC_US := tx*1000;
IF debug THEN
	T_PLC_US := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_US),N) OR SHL(temp,N))-1) + OFFSET;
END_IF;

(* Original Code:
tx := TIME();
T_PLC_US := TIME_TO_DWORD(Tx)*1000;
IF debug THEN
	T_PLC_US := (SHL(T_PLC_US,N) OR SHL(DWORD#1,N)-1) + OFFSET;
END_IF;
*)

(* From OSCAT library, www.oscat.de

this is a temporary T_PLC_US FB until OpenPLC gets itÂ´s own time() functionality *)

(* PLC_TIME and Global variables PLC_SCAN_CYCL and PLC_CYCL_TIME required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Output current execution time in microseconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="LEAP_OF_DATE" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[LEAP_OF_DATE := SHL(UDINT_TO_DWORD((idate + UDINT#43200) / UDINT#31557600), 30) = DWORD#16#80000000;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[leap_of_date is true if current year is a leap year]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DAY_OF_WEEK" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[DAY_OF_WEEK := UDINT_TO_INT((idate / UDINT#86400 + UDINT#3) MOD UDINT#7) + INT#01;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[calculates the weekday of a week according to ISO8601 monday = 1 ..... sunday = 7]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DAY_OF_YEAR" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[DAY_OF_YEAR := UDINT_TO_INT((idate / UDINT#86400) MOD UDINT#1461);
IF DAY_OF_YEAR > 729 THEN
	IF DAY_OF_YEAR > 1095 THEN DAY_OF_YEAR := DAY_OF_YEAR - 1095; ELSE DAY_OF_YEAR := DAY_OF_YEAR - 729; END_IF;
ELSIF DAY_OF_YEAR > 364 THEN
	DAY_OF_YEAR := DAY_OF_YEAR - 364;
ELSE
	DAY_OF_YEAR := DAY_OF_YEAR + 1;
END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[calculates the day of the year]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="MONTH_OF_DATE" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[MONTH_OF_DATE := DAY_OF_YEAR(idate);
IF MONTH_OF_DATE < 32 THEN
	MONTH_OF_DATE := 1;
ELSIF LEAP_OF_DATE(IDATE) THEN
	MONTH_OF_DATE := (MONTH_OF_DATE * 53 + 1668) / 1623;
ELSE
	MONTH_OF_DATE := (MONTH_OF_DATE * 53 + 1700) / 1620;
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* DAY_OF_YEAR, LEAP_OF_DATE required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[returns the current month of the year]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="YEAR_OF_DATE" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[YEAR_OF_DATE := UDINT_TO_INT((IDATE+UDINT#43200) / UDINT#31557600 + UDINT#1970);

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[returs the year of a date the function works for dates from 1970 - 2099]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="R2_ADD" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="REAL2"/>
              </type>
            </variable>
            <variable name="Y">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="_R2_ADD">
              <type>
                <derived name="REAL2"/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[temp := X.RX;
_R2_ADD.RX := Y + X.R1 + X.RX;
_R2_ADD.R1 := temp - _R2_ADD.RX + Y + X.R1;

(* From OSCAT Library, www.oscat.de *)
(* Datatype REAL2 required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[R2_add adds a real to a double real which extends the accuracy of a real to twice as many digits]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="INTEGRATE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0"/>
              </initialValue>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="Y">
              <type>
                <REAL/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="x_last">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_MS(en:=true);

IF NOT init THEN
	init := TRUE;
	X_last := X;
ELSIF _E THEN
	Y := (X + X_LAST) * 0.5E-3 * UDINT_TO_REAL(tx-last) * K + Y;
	X_last := X;
END_IF;
last := tx;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[integrate is a plain integrator with I/O for out]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="FLOOR" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="x">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[FLOOR := REAL_TO_INT(X);
IF INT_TO_REAL(FLOOR) > X THEN
	floor := floor - 1;
END_IF;
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[This is a rounding function which returns the biggest possible integer which is less or equal to X. floor(3.14) = 3 floor(-3.14) = -4]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="T_PLC_MS" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <localVars>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
          <inputVars>
            <variable name="debug">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="N">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="offset">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="temp">
              <type>
                <DWORD/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := 0;

{extern unsigned long __tick;
extern unsigned long long common_ticktime__;
unsigned long long ticktime_ms = (common_ticktime__)/1000000;
UDINT plc_time = (UDINT)(ticktime_ms * (unsigned long long)__tick);
TX = plc_time}

T_PLC_MS := tx;
IF debug THEN
	T_PLC_MS := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_MS),N) OR SHL(temp,N))-1) + OFFSET;
END_IF;

(* Original Code:
tx := TIME();
T_PLC_MS := TIME_TO_DWORD(Tx);
IF debug THEN
	T_PLC_MS := (SHL(T_PLC_MS,N) OR SHL(DWORD#1,N)-1) + OFFSET;
END_IF;
*)

(* From OSCAT library, www.oscat.de

this is a temporary T_PLC_MS FB until OpenPLC gets itÂ´s own time() functionality *)

(* PLC_TIME and Global variables PLC_SCAN_CYCL and PLC_CYCL_TIME required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Output current execution time in miliseconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="program0" pouType="program">
        <interface>
          <localVars>
            <variable name="LocalVar0">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar2">
              <type>
                <DINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <FBD>
            <block localId="1" typeName="ADD" executionOrderId="0" height="60" width="70">
              <position x="540" y="100"/>
              <inputVariables>
                <variable formalParameter="IN1">
                  <connectionPointIn>
                    <relPosition x="0" y="30"/>
                    <connection refLocalId="2">
                      <position x="540" y="130"/>
                      <position x="520" y="130"/>
                      <position x="520" y="120"/>
                      <position x="500" y="120"/>
                    </connection>
                  </connectionPointIn>
                </variable>
                <variable formalParameter="IN2">
                  <connectionPointIn>
                    <relPosition x="0" y="50"/>
                    <connection refLocalId="3">
                      <position x="540" y="150"/>
                      <position x="500" y="150"/>
                    </connection>
                  </connectionPointIn>
                </variable>
              </inputVariables>
              <inOutVariables/>
              <outputVariables>
                <variable formalParameter="OUT">
                  <connectionPointOut>
                    <relPosition x="70" y="30"/>
                  </connectionPointOut>
                </variable>
              </outputVariables>
            </block>
            <inVariable localId="2" executionOrderId="0" height="30" width="90" negated="false">
              <position x="410" y="100"/>
              <connectionPointOut>
                <relPosition x="90" y="20"/>
              </connectionPointOut>
              <expression>LocalVar0</expression>
            </inVariable>
            <inVariable localId="3" executionOrderId="0" height="30" width="90" negated="false">
              <position x="410" y="130"/>
              <connectionPointOut>
                <relPosition x="90" y="20"/>
              </connectionPointOut>
              <expression>LocalVar1</expression>
            </inVariable>
            <outVariable localId="4" executionOrderId="0" height="30" width="90" negated="false">
              <position x="640" y="120"/>
              <connectionPointIn>
                <relPosition x="0" y="10"/>
                <connection refLocalId="1" formalParameter="OUT">
                  <position x="640" y="130"/>
                  <position x="610" y="130"/>
                </connection>
              </connectionPointIn>
              <expression>LocalVar2</expression>
            </outVariable>
          </FBD>
        </body>
      </pou>
      <pou name="ALARM_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="LO_1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="HI_1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="LO_2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="HI_2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="HYS">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q1_LO">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q1_HI">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2_LO">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2_HI">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tmp">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tmp := X - Hys * 0.5;
IF tmp > LO_1 THEN Q1_LO := FALSE; END_IF;
IF tmp > HI_1 THEN Q2_LO := FALSE; END_IF;
IF tmp > HI_1 THEN Q1_HI := TRUE; END_IF;
IF tmp > LO_2 THEN Q2_HI := TRUE; END_IF;
tmp := tmp + hys;
IF tmp < LO_1 THEN Q1_LO := TRUE; END_IF;
IF tmp < HI_1 THEN Q2_LO := TRUE; END_IF;
IF tmp < HI_1 THEN Q1_HI := FALSE; END_IF;
IF tmp < LO_2 THEN Q2_HI := FALSE; END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[ALARM_2 will check two pairs of limits and signal when the input is above or below a set limit]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BAR_GRAPH" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TRIGGER_LOW">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="TRIGGER_HIGH">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="ALARM_LOW">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ALARM_HIGH">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="LOG_SCALE">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="LOW">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="HIGH">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ALARM">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T3">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T4">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T5">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="temp">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF NOT init THEN
	init := TRUE;
	IF log_scale THEN
		temp := EXP(LN(Trigger_high / Trigger_low) * 0.166666666666666666666);
		T1 := trigger_low * temp;
		T2 := T1 * temp;
		T3 := T2 * temp;
		T4 := T3 * temp;
		T5 := T4 * temp;
	ELSE
		temp := (trigger_high - trigger_low) * 0.142857142;
		T1 := trigger_low + temp;
		T2 := T1 + temp;
		T3 := T2 + temp;
		T4 := T3 + temp;
		T5 := T4 + temp;
	END_IF;
END_IF;

(* clear outputs before checking *)
Q1 := FALSE;
Q2 := FALSE;
Q3 := FALSE;
Q4 := FALSE;
Q5 := FALSE;
Q6 := FALSE;
status := BYTE#110;

(* low, high and alarm can only be cleared with rst depending on alarm_low and alarm_high *)
IF NOT alarm_low THEN low := FALSE; END_IF;
IF NOT alarm_high THEN high := FALSE; END_IF;
IF rst THEN
	alarm := FALSE;
	low := FALSE;
	high := FALSE;
END_IF;

(* check and set outputs *)
IF X < trigger_low THEN
	Low := TRUE;
	status := BYTE#111;
	IF alarm_low THEN
		alarm := TRUE;
		status := BYTE#1;
	END_IF;
ELSIF X < T1 THEN
	Q1 := TRUE;
ELSIF x < t2 THEN
	Q2 := TRUE;
ELSIF x < t3 THEN
	Q3 := TRUE;
ELSIF x < T4 THEN
	Q4 := TRUE;
ELSIF x < T5 THEN
	q5 := TRUE;
ELSIF x < trigger_high THEN
	q6 := TRUE;
ELSE
	high := TRUE;
	status := BYTE#112;
	IF alarm_high THEN
		alarm := TRUE;
		status := BYTE#2;
	END_IF;
END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[bar graph is a muti window comparator which displays an analog input signal on 8 digital outputs]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CALIBRATE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="CO">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="CS">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Y_OFFSET">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="Y_SCALE">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars retain="true">
            <variable name="offset">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="Scale">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF CO THEN
	OFFSET := Y_Offset - X;
ELSIF CS THEN
	SCALE := Y_scale / (X + OFFSET);
END_IF;
(* calculate output *)
Y := (X + OFFSET) * SCALE;
]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Calibrate allows for offset and scale calibration of an analog input]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CYCLE_TIME" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="CT_MIN">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#0s"/>
              </initialValue>
            </variable>
            <variable name="CT_MAX">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#0s"/>
              </initialValue>
            </variable>
            <variable name="CT_LAST">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="SYSTIME">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="SYSDAYS">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="CYCLES">
              <type>
                <DWORD/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_cycle">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true)) - last_cycle;

IF rst THEN
	ct_min := t#10h;
	ct_max := t#0ms;
	cycles := DWORD#0;
ELSIF last_cycle > t#0s THEN
	IF tx < ct_min THEN ct_min := tx;
	ELSIF tx > ct_max THEN ct_max := tx;
	END_IF;
	ct_last := tx;
ELSIF ct_min = t#0s THEN
	ct_min := t#0s - t#1ms;
END_IF;
IF init THEN
	systime := systime + tx;
		IF systime >= t#1d THEN
			systime := systime - t#1d;
			sysdays := sysdays + 1;
		END_IF;
END_IF;
init := TRUE;
last_cycle := last_cycle + tx;
cycles := UDINT_TO_DWORD(DWORD_TO_UDINT(cycles) + UDINT#1);

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="DT_SIMU" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="START">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="SPEED">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="DTS">
              <type>
                <UDINT/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tc">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="td">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_MS(en:=true);
tc := REAL_TO_UDINT(UDINT_TO_REAL(tx - last) * speed);

IF NOT init THEN
	init := TRUE;
	DTS := Start;
	tc := UDINT#0;
	last := tx;
ELSIF SPEED = 0.0 THEN
	DTS := DTS + UDINT#1;
ELSIF tc >= UDINT#1000 THEN
	td := (tc / UDINT#1000) * UDINT#1000;
	DTS := DTS + td;
	last := last + REAL_TO_UDINT(UDINT_TO_REAL(td) / speed);
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[DT_SIMU simulates a real time clock and can be adjusted to different speeds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="FLOW_METER" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="VX">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PULSE_MODE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="UPDATE_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1s"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="F">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="Y">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tl">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="int1">
              <type>
                <derived name="INTEGRATE"/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="e_last">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="x_last">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="y_last">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF NOT init THEN	(* init on power up *)
	init := TRUE;
	tl := tx;
	x_last := X;
	y_last := Y;
	int1.K := 2.7777777777777777E-4;
END_IF;

(* run integrator *)
int1(_E := NOT (RST OR PULSE_MODE) AND _E, X := VX, Y := X);	(* gated operation *)
X := int1.Y;

IF RST THEN		(* reset *)
	X := 0.0;
	Y := UDINT#0;
	tl := tx;
	x_last := 0.0;
	y_last := UDINT#0;
ELSIF _E AND PULSE_MODE THEN	(* check for pulse mode *)
	IF NOT e_last THEN X := X + VX; END_IF;
END_IF;
e_last := _E;

(* reduce X to be less than 1 and increase Y respectively *)
IF X > 1.0 THEN
	tmp := FLOOR(X);
	Y := Y + INT_TO_UDINT(tmp);
	X := X - INT_TO_REAL(tmp);
END_IF;

(* calculate the current flow *)
tx := UDINT_TO_TIME(T_PLC_MS(en:=true));
IF tx - tl >= UPDATE_TIME AND UPDATE_TIME > t#0s THEN
	F := (UDINT_TO_REAL(Y - y_last) + X - x_last) / TIME_TO_REAL(tx - tl) * 3.6E6;
	y_last := Y;
	x_last := X;
	tl := tx;
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, FLOOR, INTEGRATE required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Flow meter measures flow according to gated time or pulses]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="M_D" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="START">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STOP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TMAX">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10d"/>
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="ET">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="startup">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF rst OR et >= tmax THEN
	pt := t#0ms;
	et := t#0ms;
	startup := FALSE;
	run := FALSE;
END_IF;

(* avoid timers to start when input is true at startup *)
IF NOT startup THEN
	edge := start;
	startup := TRUE;
END_IF;

(* read system timer *)
tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* detect rising edge on start *)
IF start AND NOT edge AND NOT stop THEN
	t0 := tx;
	run := TRUE;
	pt := t#0s;
ELSIF stop AND run THEN
	pt := et;
	run := FALSE;
END_IF;
edge := start;
IF run THEN et := tx - t0; END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[m_d measures the time between a rising edge on start to a rising edge on stop and returs the last measured value on the output PT]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="M_T" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TMAX">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10d"/>
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="ET">
              <type>
                <TIME/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

IF RST OR ET >= TMAX THEN
	PT := t#0s;
	ET := PT;
ELSIF IN THEN
	IF NOT edge THEN start := tx; END_IF;
	ET := tx - start;
ELSE
	PT := ET;
END_IF;
edge := IN;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[m_t measures the with of a high pulse and returs the last measured pulse width on output PT]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="M_TX" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TMAX">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10d"/>
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="TH">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TL">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DC">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="F">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="ET">
              <type>
                <TIME/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="rise">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="fall">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="startup">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF rst OR (et >= tmax) THEN
	rise := FALSE;
	fall := FALSE;
	startup := FALSE;
	th := t#0ms;
	tl := t#0ms;
	DC := 0.0;
	F := 0.0;
	ET := t#0s;
END_IF;

(* avoid timers to start when input is true at startup *)
IF NOT startup THEN
	edge := in;
	startup := TRUE;
END_IF;

(* read system timer *)
tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* edge trigger rising and falling edge *)
IF in XOR edge THEN
	edge := in;
	(* rising edge starts measurement *)
	IF in THEN
		start := Tx;
		rise := TRUE;
		IF fall THEN tl := start - stop; END_IF;
		IF th > t#0ms AND tl > t#0ms THEN
			dc := TIME_TO_REAL(th) / TIME_TO_REAL(th+tl);
			f := 1000.0 / TIME_TO_REAL(th + tl);
		END_IF;
	(* falling edge starts second cycle measurement *)
	ELSE
		stop := Tx;
		fall := TRUE;
		IF rise THEN th := stop - start; END_IF;
		IF th > t#0ms AND tl > t#0ms THEN
			dc := TIME_TO_REAL(th) /  TIME_TO_REAL(th+tl);
			f := 1000.0 / TIME_TO_REAL(th + tl);
		END_IF;
	END_IF;
END_IF;
IF rise THEN et := tx - start; END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this measures the timing of a signal]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="METER" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="M1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="M2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="I1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="I2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_D">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0"/>
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="MX">
              <type>
                <REAL/>
              </type>
            </variable>
          </inOutVars>
          <localVars retain="true">
            <variable name="MR">
              <type>
                <derived name="REAL2"/>
              </type>
            </variable>
          </localVars>
          <localVars>
            <variable name="MX1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="MX2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="tc">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_R2_ADD">
              <type>
                <derived name="R2_ADD"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_MS(en:=true);
IF NOT init THEN
	init := TRUE;
	last := tx;
	mr.RX := mx;
	mr.R1 := 0.0;
ELSIF tx = last THEN
	RETURN;
ELSE
	tc := UDINT_TO_REAL(tx - last) * 0.001;
END_IF;
last := tx;

(* reset *)
IF rst THEN
	mr.R1 := 0.0;
	mr.RX := 0.0;
ELSE
	(* current consumption measurement *)
	MX1 := SEL(I1,0.0,M1);
	MX2 := SEL(I2,0.0,M2);
	(* add up the current values in a double real *)
	_R2_ADD(X:=MR,Y:=(SEL(I1,0.0,mx1) + SEL(I2, 0.0, mx2)) / _D * TC);
	MR:=_R2_ADD._R2_ADD;
	(* set the current output value *)
	MX := mr.RX;
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, R2_ADD required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[METER measures usage of power or similar values the output MX is the sum of the inputs over time.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="METER_STAT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="DI">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="LAST_DAY">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="CURRENT_DAY">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="LAST_WEEK">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="CURRENT_WEEK">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="LAST_MONTH">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="CURRENT_MONTH">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="LAST_YEAR">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="CURRENT_YEAR">
              <type>
                <REAL/>
              </type>
            </variable>
          </inOutVars>
          <localVars retain="true">
            <variable name="year_start">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="month_start">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="week_start">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="day_start">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="last_run">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF rst THEN
	Last_Day := 0.0;
	Current_Day := 0.0;
	Day_start := IN;
	Last_week := 0.0;
	Current_week := 0.0;
	Week_start := in;
	Last_month := 0.0;
	Current_month := 0.0;
	month_start := in;
	last_year := 0.0;
	current_year := 0.0;
	year_start := in;
ELSE
	Current_Day := IN - Day_Start;
	Current_Week := In - Week_Start;
	Current_Month := IN - Month_Start;
	Current_Year := IN - Year_Start;
END_IF;

IF YEAR_OF_DATE(DI) > YEAR_OF_DATE(last_run) THEN
	(* a new year has started *)
	last_year := current_year;
	current_year := 0.0;
	year_start := in;
	last_month := current_month;
	current_month := 0.0;
	month_start := in;
	last_day := current_day;
	current_day := 0.0;
	day_start := in;
ELSIF MONTH_OF_DATE(DI) > MONTH_OF_DATE(last_run) THEN
	(* a new month has started, january is alrerady done by year change *)
	last_month := current_month;
	current_month := 0.0;
	month_start := in;
	last_day := current_day;
	current_day := 0.0;
	day_start := in;
ELSIF DAY_OF_YEAR(di) > DAY_OF_YEAR(last_run) THEN
	(* day has chaged, first day of year and first day of month has already been taken care of *)
	last_day := current_day;
	current_day := 0.0;
	day_start := in;
END_IF;
IF DAY_OF_WEEK(DI) < DAY_OF_WEEK(last_run) THEN
	(* a new week has started *)
	last_week := current_week;
	current_week := 0.0;
	week_start := in;
END_IF;
last_run := di;

(* From OSCAT Library, www.oscat.de *)
(* several FB's  required :-) *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[METER_STAT runs statistics of a metered value]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ONTIME" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="SECONDS">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="CYCLES">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ms">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_MS(en:=true);

(* make sure the first cycle works correctly *)
IF NOT init THEN
	init := TRUE;
	last := tx;
	ms := UDINT#0;
END_IF;
IF RST THEN
	SECONDS := UDINT#0;
	CYCLES := UDINT#0;
	last := tx;
	ms := UDINT#0;
ELSIF IN THEN
	(* add the current milliseconds *)
	ms := (tx - last) + ms;
	IF ms >= UDINT#1000 THEN
		seconds := seconds + UDINT#1;
		ms := ms - UDINT#1000;
	END_IF;
	cycles := cycles + BOOL_TO_UDINT(NOT edge);
END_IF;
last := tx;
edge := in;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, R2_ADD required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[ONTIME measures the ontime of a signal in seconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TC_MS" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="TC">
              <type>
                <DWORD/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_MS(en:=true);

IF NOT init THEN
	init := TRUE;
	TC := DWORD#0;
ELSE
	tc := UDINT_TO_DWORD(tx - last);
END_IF;
last := tx;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, R2_ADD required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TC_MS delivers the time it was last called on the output TC in Milliseconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TC_S" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="TC">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_US(en:=true);

IF NOT init THEN
	init := TRUE;
	TC := 0.0;
ELSE
	tc := UDINT_TO_REAL(tx - last) * 1.0E-6;
END_IF;
last := tx;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, R2_ADD required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TC_S delivers the time it was last called on the output TC in seconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TC_US" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="TC">
              <type>
                <DWORD/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_US(en:=true);

IF NOT init THEN
	init := TRUE;
	TC := DWORD#0;
ELSE
	tc := UDINT_TO_DWORD(tx - last);
END_IF;
last := tx;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_US,  required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TC_US delivers the time it was last called on the output TC in Microseconds]]></xhtml:p>
        </documentation>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Config0">
        <resource name="Res0">
          <task name="task0" priority="0" interval="T#20ms">
            <pouInstance name="instance0" typeName="program0"/>
          </task>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
