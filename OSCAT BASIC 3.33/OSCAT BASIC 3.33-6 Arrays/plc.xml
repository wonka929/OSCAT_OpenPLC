<?xml version='1.0' encoding='utf-8'?>
<project xmlns:ns1="http://www.plcopen.org/xml/tc6_0201" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Unbekannt" productName="Unbenannt" productVersion="1" creationDateTime="2019-09-13T12:33:08"/>
  <contentHeader name="Unbenannt" modificationDateTime="2019-09-13T15:36:54">
    <coordinateInfo>
      <fbd>
        <scaling x="10" y="10"/>
      </fbd>
      <ld>
        <scaling x="10" y="10"/>
      </ld>
      <sfc>
        <scaling x="10" y="10"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="IS_SORTED" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_IS_SORTED">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="i2">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);
stop := stop -1;
FOR i := 1 TO stop DO
    i2 := i+1;
	IF pt[i] > pt[i2] THEN
		_IS_SORTED := FALSE;
		RETURN;
	END_IF;
END_FOR;

_IS_SORTED := TRUE;


(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will return true if the given array is sorted ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ARRAY_TREND" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_TREND">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop2">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="_d">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="x">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[x := 0.0;
stop :=LIMIT(1,UINT_TO_INT(size),1000);
stop2 := WORD_TO_INT(SHR(INT_TO_WORD(stop),1)); 
IF even(INT_TO_DINT(stop)) THEN _d:=0; ELSE _d:=1;END_IF;

FOR i := 1 TO stop2+_d DO
    x := x - pt[i];
END_FOR; 
FOR i := stop2+1 TO stop DO
    x := x + pt[i];
END_FOR; 
_array_trend := x / INT_TO_REAL(stop2+_d);

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the trend of a given array]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ARRAY_SUM" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_SUM">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);

_array_sum := pt[1];
FOR i := 2 TO stop DO
	_array_sum := _array_sum + pt[i];
END_FOR;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the sum of a given array.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ARRAY_SPR" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_SPR">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="arr_max">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="arr_min">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);

arr_min := pt[1];
arr_max := pt[1];
FOR i := 2 TO stop DO
	IF pt[i] > arr_max THEN arr_max := pt[i];
	ELSIF pt[i] < arr_min THEN arr_min := pt[i];
	END_IF;
END_FOR;
_array_spr := arr_max - arr_min;


(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the spread of a given array]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ARRAY_SDV" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_SDV">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="FB_array_var">
              <type>
                <derived name="ARRAY_VAR"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* at first we calualte the arithmetic average of the array *)

(* standard deviation is simply the square root of the variance *)

FB_array_var.pt   := pt;
FB_array_var.size := size;
FB_array_var();
pt := FB_array_var.pt;

_array_sdv := SQRT(FB_array_var._array_var);




(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the standard deviation of a given array]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ARRAY_VAR" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_VAR">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="avg">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* at first we calualte the arithmetic average of the array *)

stop :=LIMIT(1,UINT_TO_INT(size),1000);
avg := pt[1];
FOR i := 2 TO stop DO
	avg := avg + pt[i];
END_FOR;
avg := avg / INT_TO_REAL(stop);

(* in a second run we calculate the variance of the array *)

_array_var := EXPT(pt[1] - avg, 2.0);
FOR i := 2 TO stop DO
	_array_var := _array_var + EXPT(pt[i] - avg, 2.0);
END_FOR;
_array_var := _array_var / INT_TO_REAL(stop-1);



(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the variance of a given array]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ARRAY_MIN" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_MIN">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);

_array_min := pt[1];
FOR i := 2 TO stop DO
	IF pt[i] < _array_min THEN _array_min := pt[i]; END_IF;
END_FOR;


(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the max value of a given array.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ARRAY_MAX" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_MAX">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);

FOR i := 1 TO stop DO
	IF pt[i] > _array_max THEN _array_max := pt[i]; END_IF;
END_FOR;


(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the max value of a given array.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ARRAY_HAV" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_HAV">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);
_ARRAY_HAV := 0.0;
FOR i := 1 TO stop DO
	IF pt[i] <> 0.0 THEN
		_ARRAY_HAV := _ARRAY_HAV + 1.0/pt[i];
	ELSE
		_ARRAY_HAV := 0.0;
		RETURN;
	END_IF;
END_FOR;
_ARRAY_HAV := INT_TO_REAL(stop) / _ARRAY_HAV;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the harmonic average of a given array]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SQRTN" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF N > 0 THEN
	SQRTN := EXP(LN(x) / INT_TO_REAL(n));
ELSE
	SQRTN := 0.0;
END_IF;
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the nth root function of X according to the formula sqrtn = x^(1/n).]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ARRAY_GAV" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_GAV">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);
_ARRAY_GAV := 1.0;
FOR i := 1 TO stop DO
	IF pt[i] > 0.0 THEN
		_ARRAY_GAV := _ARRAY_GAV * pt[i];
	ELSE
		_ARRAY_GAV := 0.0;
		RETURN;
	END_IF;
END_FOR;
_ARRAY_GAV := SQRTN(_ARRAY_GAV,stop);


(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the geometric average of a given array]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="D_TRUNC" pouType="function">
        <interface>
          <returnType>
            <DINT/>
          </returnType>
          <inputVars>
            <variable name="x">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[D_TRUNC := REAL_TO_DINT(X);
IF X > 0.0 THEN
	IF DINT_TO_REAL(D_TRUNC) > X THEN D_TRUNC := D_TRUNC - DINT#1; END_IF;
ELSE
	IF DINT_TO_REAL(D_TRUNC) < X THEN D_TRUNC := D_TRUNC + DINT#1; END_IF;
END_IF;
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[d_trunc truncates a real to a dint 1.5 will be 1 and -1.5 will be -1 d_trunc is necessary because many systems do not offer a trunc to a dint also real_to_dint will not deliver the same result on different systems]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="FRACT" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF ABS(x) < 2.0E9 THEN
	FRACT := x - DINT_TO_REAL(D_TRUNC(x));
ELSE
	FRACT := 0.0;
END_IF;
(* from OSCAT library; www.oscat.de  *)
(* D_TRUNC required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function returns the fraction of a real number fract(3.14) = 0.14]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BIT_LOAD_DW" pouType="function">
        <interface>
          <returnType>
            <DWORD/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF val THEN
	BIT_LOAD_DW := in OR SHL(DWORD#1,pos);
ELSE
	BIT_LOAD_DW := in AND (NOT SHL(DWORD#1,pos));
END_IF;

(*From OSCAT Library, www.oscat.de*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function loads a bit into a DWord at position pos]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="T_PLC_MS" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <localVars>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
          <inputVars>
            <variable name="debug">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="N">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="offset">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="temp">
              <type>
                <DWORD/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := 0;

{extern unsigned long __tick;
extern unsigned long long common_ticktime__;
unsigned long long ticktime_ms = (common_ticktime__)/1000000;
UDINT plc_time = (UDINT)(ticktime_ms * (unsigned long long)__tick);
TX = plc_time}

T_PLC_MS := tx;
IF debug THEN
	T_PLC_MS := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_MS),N) OR SHL(temp,N))-1) + OFFSET;
END_IF;

(* Original Code:
tx := TIME();
T_PLC_MS := TIME_TO_DWORD(Tx);
IF debug THEN
	T_PLC_MS := (SHL(T_PLC_MS,N) OR SHL(DWORD#1,N)-1) + OFFSET;
END_IF;
*)

(* From OSCAT library, www.oscat.de

this is a temporary T_PLC_MS FB until OpenPLC gets it´s own time() functionality *)

(* PLC_TIME and Global variables PLC_SCAN_CYCL and PLC_CYCL_TIME required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Output current execution time in miliseconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BIT_COUNT" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="in_temp">
              <type>
                <DWORD/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[in_temp := IN;
WHILE in_temp > DWORD#0 DO
	IF (in_temp AND DWORD#16#00000001) > DWORD#0 THEN Bit_Count := Bit_Count +1; END_IF;
	in_temp := SHR(in_temp,1);
END_WHILE;

(*From OSCAT Library, www.oscat.de*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[BIT_COUNT counts the amount True of bits in a dword.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="RDM" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="LAST">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_RDM">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="tn">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="tc">
              <type>
                <INT/>
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tn := UDINT_TO_DWORD(T_PLC_MS(en:=true));
tc := Bit_Count(tn);

tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,2),31); (* tn.31 := tn.2; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,5),30); (* tn.30 := tn.5; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,4),29); (* tn.29 := tn.4; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,1),28); (* tn.28 := tn.1; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,0),27); (* tn.27 := tn.0; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,7),26); (* tn.26 := tn.7; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,6),25); (* tn.25 := tn.6; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,3),24); (* tn.24 := tn.3; *)

tn := ROL(tn,Bit_Count(tn)) OR DWORD#16#80000001;
tn := UDINT_TO_DWORD(DWORD_TO_UDINT(tn) MOD UDINT#71474513 + INT_TO_UDINT(tc) + UDINT#77);
_RDM := fract(DWORD_TO_REAL(tn) / 10000000.0 * (2.71828182845904523536028747135266249 - LIMIT(0.0,last,1.0)));

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates a pseudo random number]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="RDM2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="LAST">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="LOW">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="HIGH">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_RDM2">
              <type>
                <INT/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="_rdm">
              <type>
                <derived name="RDM"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[_rdm(last:=fract(INT_TO_REAL(last) * 3.14159265358979323846264338327950288));
_RDM2 := TRUNC(_rdm._RDM * INT_TO_REAL(high - low + 1)) + low;

(* From OSCAT Library, www.oscat.de *)
(* RDM required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates an integer pseudo random number]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BIT_OF_DWORD" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[BIT_OF_DWORD := (SHR(in,N) AND 16#00000001) > 0;

(* From Oscat Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function extracts a single bit from the nth position from right (right is lowest bit the lowest Bit (Bit0 from in) is selected with N=.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="EVEN" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[even := NOT BIT_OF_DWORD(DINT_TO_DWORD(in),0);
(* from OSCAT library; www.oscat.de  *)
(* BIT_OF_DWORD required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[checks an input for even  value the output is true if the input is even]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="program0" pouType="program">
        <interface>
          <localVars>
            <variable name="LocalVar0">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar2">
              <type>
                <DINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <FBD>
            <block localId="1" typeName="ADD" executionOrderId="0" height="60" width="70">
              <position x="500" y="110"/>
              <inputVariables>
                <variable formalParameter="IN1">
                  <connectionPointIn>
                    <relPosition x="0" y="30"/>
                    <connection refLocalId="2">
                      <position x="500" y="140"/>
                      <position x="485" y="140"/>
                      <position x="485" y="130"/>
                      <position x="470" y="130"/>
                    </connection>
                  </connectionPointIn>
                </variable>
                <variable formalParameter="IN2">
                  <connectionPointIn>
                    <relPosition x="0" y="50"/>
                    <connection refLocalId="3">
                      <position x="500" y="160"/>
                      <position x="470" y="160"/>
                    </connection>
                  </connectionPointIn>
                </variable>
              </inputVariables>
              <inOutVariables/>
              <outputVariables>
                <variable formalParameter="OUT">
                  <connectionPointOut>
                    <relPosition x="70" y="30"/>
                  </connectionPointOut>
                </variable>
              </outputVariables>
            </block>
            <inVariable localId="2" executionOrderId="0" height="30" width="90" negated="false">
              <position x="380" y="120"/>
              <connectionPointOut>
                <relPosition x="90" y="10"/>
              </connectionPointOut>
              <expression>LocalVar0</expression>
            </inVariable>
            <inVariable localId="3" executionOrderId="0" height="30" width="90" negated="false">
              <position x="380" y="150"/>
              <connectionPointOut>
                <relPosition x="90" y="10"/>
              </connectionPointOut>
              <expression>LocalVar1</expression>
            </inVariable>
            <outVariable localId="4" executionOrderId="0" height="30" width="90" negated="false">
              <position x="620" y="130"/>
              <connectionPointIn>
                <relPosition x="0" y="10"/>
                <connection refLocalId="1" formalParameter="OUT">
                  <position x="620" y="140"/>
                  <position x="570" y="140"/>
                </connection>
              </connectionPointIn>
              <expression>LocalVar2</expression>
            </outVariable>
          </FBD>
        </body>
      </pou>
      <pou name="_ARRAY_ABS" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_ABS_Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);
FOR i := 1 TO stop DO
	 pt[i] := ABS(pt[i]);
END_FOR;
_ARRAY_ABS_Q := TRUE;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the absolute value of each element of the array ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_ARRAY_ADD" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="_ARRAY_ADD_Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);
FOR i := 1 TO stop DO
	 pt[i] := pt[i] + X;
END_FOR;
_ARRAY_ADD_Q := TRUE;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will add an offset X to each element of the array ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_ARRAY_INIT" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="INIT">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_INIT_Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);

FOR i := 1 TO stop DO
	pt[i] := init;
END_FOR;
_array_init_Q := TRUE;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will initialize a given array with a value init]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_ARRAY_MEDIAN" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="_ARRAY_MEDIAN_Q">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="i2">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="_ARRAY_SORT_MED">
              <type>
                <derived name="_ARRAY_SORT"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* Array sortieren *)
_array_sort_med.pt   := pt;
_array_sort_med.size := size;
_array_sort_med();
pt := _array_sort_med.pt;

stop :=LIMIT(1,UINT_TO_INT(size),1000);
IF even(INT_TO_DINT(stop)) THEN
    i := WORD_TO_INT(SHR(INT_TO_WORD(stop),1));
    i2 := i+1;
	_array_median_Q := (pt[i] + pt[i2]) * 0.5;
ELSE
    i := WORD_TO_INT(SHR(INT_TO_WORD(stop),1))+1;
	_array_median_Q := pt[i];
END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the median of a given array]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_ARRAY_SORT" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_SORT_Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="stack_count">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stack">
              <type>
                <array>
                  <dimension lower="1" upper="32"/>
                  <baseType>
                    <INT/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="links">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="rechts">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="pivot">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="j">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="ende_innen">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ende_aussen">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="x">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* Startwerte zur Arraygröße *)
links := 1;	(* Anfangselement des Arrays *)
rechts := DWORD_TO_INT(SHR(UINT_TO_DWORD(size),2)); (* Endelement des Arrays *)
stack_count := 1; (* Laufvariable Stack *)

WHILE NOT ende_aussen DO (* äußere Schleife *)
	IF links < rechts THEN
		x := DWORD_TO_INT(SHR(UDINT_TO_DWORD(INT_TO_UDINT(rechts)+ INT_TO_UDINT(links)),1));
		pivot := PT[x]; (* Wert des mittleren Elements als Pivot-Wert *)
		i := links - 1;
		j := rechts + 1;

		(* innere Schleife, teile Feld *)
		ende_innen := FALSE;
		REPEAT

			(* steigende Reihenfolge *)
			REPEAT	i := i+1;	UNTIL (PT[i] >= pivot) OR NOT (i < rechts)	END_REPEAT;
			REPEAT	j := j-1;	UNTIL (PT[j] <= pivot) OR NOT (j > links)	END_REPEAT;

			(*sinkende Reihenfolge *)
			(*REPEAT	i := i+1;	UNTIL (PT^[i] <= pivot) OR NOT (i < rechts)	END_REPEAT	*)
			(*REPEAT	j := j-1;	UNTIL (PT^[j] >= pivot) OR NOT (j > links)	END_REPEAT	*)

			IF i >= j THEN
				ende_innen := TRUE;
			ELSE
			    tmp := PT[j];
				PT[j] := PT[i];
				PT[i] := tmp;
			END_IF;

		UNTIL ende_innen END_REPEAT;

		(* Push stack *)
		stack[stack_count] := rechts;		(* rechten Teil später sortieren *)
		IF Stack_count < 32 THEN
			stack_count := stack_count +1;
		ELSE
			ende_aussen := TRUE;
			_ARRAY_SORT_Q := FALSE;					(* Fehler: Stack zu klein *)
		END_IF;

		(* linken Teil sortiern *)
		rechts := MAX(links, i-1);

	ELSE
		IF stack_count = 1 THEN
			ende_aussen := TRUE;
		ELSE

			links := rechts+1;

			(* pop stack *)
			stack_count := stack_count - 1;		(* jetzt rechten Teil sortierne *)
			rechts:= stack[stack_count];
		END_IF;

	END_IF;

END_WHILE;

_ARRAY_SORT_Q := TRUE;				(* Sortierung beendet *)

(* From OSCAT Library, www.oscat.de *)
]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will sort a given array]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_ARRAY_MUL" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_MUL_Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);
FOR i := 1 TO stop DO
	 pt[i] := pt[i] * X;
END_FOR;
_ARRAY_MUL_Q := TRUE;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will multiply each element of the array ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_ARRAY_SHUFFLE" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_SHUFFLE_Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="_rdm2">
              <type>
                <derived name="RDM2"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);
FOR i := 1 TO stop DO
        _rdm2(last:=i+pos,low:=1,high:=stop);
        pos := _rdm2._rdm2;
        (* swap elements *)
        temp := pt[i];
        pt[i] := pt[pos];
        pt[pos] := temp;
END_FOR;

_ARRAY_SHUFFLE_Q := TRUE;
]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will randomly shuffle the elements of an array]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ARRAY_AVG" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="PT">
              <type>
                <array>
                  <dimension lower="1" upper="100"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="SIZE">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_ARRAY_AVG">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="stop">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[stop :=LIMIT(1,UINT_TO_INT(size),1000);

_array_avg := 0.0;
FOR i := 1 TO stop DO
	_array_avg := _array_avg + pt[i];
END_FOR;
_array_avg := _array_avg / INT_TO_REAL(stop);

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function will calculate the average of a given array]]></xhtml:p>
        </documentation>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Config0">
        <resource name="Res0">
          <task name="task0" priority="0" interval="T#20ms">
            <pouInstance name="instance0" typeName="program0"/>
          </task>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
