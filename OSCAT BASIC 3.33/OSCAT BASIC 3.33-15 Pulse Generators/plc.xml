<?xml version='1.0' encoding='utf-8'?>
<project xmlns:ns1="http://www.plcopen.org/xml/tc6_0201" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Unbekannt" productName="Unbenannt" productVersion="1" creationDateTime="2019-09-02T13:55:18"/>
  <contentHeader name="Unbenannt" modificationDateTime="2019-09-03T13:37:56">
    <coordinateInfo>
      <fbd>
        <scaling x="10" y="10"/>
      </fbd>
      <ld>
        <scaling x="10" y="10"/>
      </ld>
      <sfc>
        <scaling x="10" y="10"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="INC2" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="_D">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="L">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="U">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="tmp">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tmp := U - L + 1;
INC2 := (X + _D - L + tmp) MOD tmp + L;
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[This function increments the input X by the value D and compares the result with U. If the output exceeds U it will continue to count from L again.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SEQUENCE_8" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN0">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN1">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN2">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN3">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN4">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN5">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN6">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN7">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="START">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="WAIT0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT3">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY3">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT4">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY4">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT5">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY5">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT6">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY6">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT7">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY7">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="STOP_ON_ERROR">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="QX">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_STEP">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* initialize on startup *)
IF NOT init THEN
	last := tx;
	init := TRUE;
	status := BYTE#110;
END_IF;

(* asynchronous reset *)
IF rst THEN
	_step := -1;
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
	Q4 := FALSE;
	Q5 := FALSE;
	Q6 := FALSE;
	Q7 := FALSE;
	status := BYTE#110;
	run := FALSE;

(* edge on start input restarts the sequencer *)
ELSIF start AND NOT edge THEN
	_step := 0;
	last := tx;
	status := BYTE#111;
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
	Q4 := FALSE;
	Q5 := FALSE;
	Q6 := FALSE;
	Q7 := FALSE;
	run := TRUE;
END_IF;
edge := start;

(* check if stop on error is necessary *)
IF status > BYTE#0 AND status < BYTE#100 AND stop_on_error THEN RETURN; END_IF;

(* sequence is running *)
IF run AND _step = 0 THEN
	IF NOT q0 AND in0 AND tx - last <= wait0 THEN
		Q0 := TRUE;
		last := tx;
	ELSIF NOT q0 AND tx - last > wait0 THEN
		status := BYTE#1;
		run := FALSE;
	ELSIF q0 AND tx - last >= delay0 THEN
		_step := 1;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 1 THEN
	IF NOT q1 AND in1 AND tx - last <= wait1 THEN
		Q0 := FALSE;
		Q1 := TRUE;
		last := tx;
	ELSIF NOT q1 AND Tx - last > wait1 THEN
		status := BYTE#2;
		q0 := FALSE;
		run := FALSE;
	ELSIF q1 AND tx - last >= delay1 THEN
		_step := 2;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 2 THEN
	IF NOT q2 AND in2 AND tx - last <= wait2 THEN
		Q1 := FALSE;
		Q2 := TRUE;
		last := tx;
	ELSIF NOT q2 AND Tx - last > wait2 THEN
		status := BYTE#3;
		q1 := FALSE;
		run := FALSE;
	ELSIF q2 AND tx - last >= delay2 THEN
		_step := 3;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 3 THEN
	IF NOT q3 AND in3 AND tx - last <= wait3 THEN
		Q2 := FALSE;
		Q3 := TRUE;
		last := tx;
	ELSIF NOT q3 AND Tx - last > wait3 THEN
		status := BYTE#4;
		q2 := FALSE;
		run := FALSE;
	ELSIF q3 AND tx - last >= delay3 THEN
		_step := 4;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 4 THEN
	IF NOT q4 AND in4 AND tx - last <= wait4 THEN
		Q3 := FALSE;
		Q4 := TRUE;
		last := tx;
	ELSIF NOT q4 AND Tx - last > wait4 THEN
		status := BYTE#5;
		q3 := FALSE;
		run := FALSE;
	ELSIF q4 AND tx - last >= WAIT4 THEN
		_step := 5;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 5 THEN
	IF NOT q5 AND in5 AND tx - last <= DELAY4 THEN
		Q4 := FALSE;
		Q5 := TRUE;
		last := tx;
	ELSIF NOT q5 AND Tx - last > DELAY4 THEN
		status := BYTE#6;
		q4 := FALSE;
		run := FALSE;
	ELSIF q5 AND tx - last >= WAIT5 THEN
		_step := 6;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 6 THEN
	IF NOT q6 AND in6 AND tx - last <= DELAY5 THEN
		Q5 := FALSE;
		Q6 := TRUE;
		last := tx;
	ELSIF NOT q6 AND Tx - last > DELAY5 THEN
		status := BYTE#7;
		q5 := FALSE;
		run := FALSE;
	ELSIF q6 AND tx - last >= WAIT6 THEN
		_step := 7;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 7 THEN
	IF NOT q7 AND in7 AND tx - last <= DELAY6 THEN
		Q6 := FALSE;
		Q7 := TRUE;
		last := tx;
	ELSIF NOT q7 AND Tx - last > DELAY6 THEN
		status := BYTE#8;
		q6 := FALSE;
		run := FALSE;
	ELSIF q7 AND tx - last >= WAIT7 THEN
		_step := -1;
		Q7 := FALSE;
		Run := FALSE;
		status := BYTE#110;
	END_IF;
END_IF;
QX := q0 OR q1 OR q2 OR q3 OR q4 OR q5 OR q6 OR q7;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="T_PLC_MS" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <localVars>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
          <inputVars>
            <variable name="debug">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="N">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="offset">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="temp">
              <type>
                <DWORD/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := 0;

{extern unsigned long __tick;
extern unsigned long long common_ticktime__;
unsigned long long ticktime_ms = (common_ticktime__)/1000000;
UDINT plc_time = (UDINT)(ticktime_ms * (unsigned long long)__tick);
TX = plc_time}

T_PLC_MS := tx;
IF debug THEN
	T_PLC_MS := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_MS),N) OR SHL(temp,N))-1) + OFFSET;
END_IF;

(* Original Code:
tx := TIME();
T_PLC_MS := TIME_TO_DWORD(Tx);
IF debug THEN
	T_PLC_MS := (SHL(T_PLC_MS,N) OR SHL(DWORD#1,N)-1) + OFFSET;
END_IF;
*)

(* From OSCAT library, www.oscat.de

this is a temporary T_PLC_MS FB until OpenPLC gets it´s own time() functionality *)

(* PLC_TIME and Global variables PLC_SCAN_CYCL and PLC_CYCL_TIME required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Output current execution time in miliseconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BIT_OF_DWORD" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[BIT_OF_DWORD := (SHR(in,n) AND DWORD#1) > DWORD#0;

(* From Oscat Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function extracts a single bit from the nth position from right (right is lowest bit the lowest Bit (Bit0 from in) is selected with N=.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="program0" pouType="program">
        <interface>
          <localVars>
            <variable name="LocalVar0">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar3">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar2">
              <type>
                <DINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <FBD>
            <block localId="1" typeName="ADD" executionOrderId="0" height="60" width="70">
              <position x="550" y="100"/>
              <inputVariables>
                <variable formalParameter="IN1">
                  <connectionPointIn>
                    <relPosition x="0" y="30"/>
                    <connection refLocalId="2">
                      <position x="550" y="130"/>
                      <position x="510" y="130"/>
                    </connection>
                  </connectionPointIn>
                </variable>
                <variable formalParameter="IN2">
                  <connectionPointIn>
                    <relPosition x="0" y="50"/>
                    <connection refLocalId="3">
                      <position x="550" y="150"/>
                      <position x="530" y="150"/>
                      <position x="530" y="170"/>
                      <position x="510" y="170"/>
                    </connection>
                  </connectionPointIn>
                </variable>
              </inputVariables>
              <inOutVariables/>
              <outputVariables>
                <variable formalParameter="OUT">
                  <connectionPointOut>
                    <relPosition x="70" y="30"/>
                  </connectionPointOut>
                </variable>
              </outputVariables>
            </block>
            <inVariable localId="2" executionOrderId="0" height="30" width="90" negated="false">
              <position x="420" y="120"/>
              <connectionPointOut>
                <relPosition x="90" y="10"/>
              </connectionPointOut>
              <expression>LocalVar0</expression>
            </inVariable>
            <inVariable localId="3" executionOrderId="0" height="30" width="90" negated="false">
              <position x="420" y="150"/>
              <connectionPointOut>
                <relPosition x="90" y="20"/>
              </connectionPointOut>
              <expression>LocalVar1</expression>
            </inVariable>
            <outVariable localId="4" executionOrderId="0" height="30" width="90" negated="false">
              <position x="670" y="110"/>
              <connectionPointIn>
                <relPosition x="0" y="20"/>
                <connection refLocalId="1" formalParameter="OUT">
                  <position x="670" y="130"/>
                  <position x="620" y="130"/>
                </connection>
              </connectionPointIn>
              <expression>LocalVar2</expression>
            </outVariable>
          </FBD>
        </body>
      </pou>
      <pou name="A_TRIG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="RES">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_D">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_in">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[_D := IN - LAST_IN;
IF ABS(_D) >= res THEN
	Q := TRUE;
	last_in := IN;
ELSE
	Q := FALSE;
END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this block is similar to the IEC Standard R_trig and F_trig but it monitors a REAL for change.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="B_TRIG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="CLK">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[Q := clk XOR edge;
edge := CLK;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this block is similar to R_trig and F_trig but it generates a pulse on rising and falling edge.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ClICK_CNT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="TC">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <derived name="TP"/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* Q shall only be active for one cycle only *)
Q := FALSE;

IF in AND NOT edge AND NOT tx.q THEN
	(* a rising edge on in sets the counter to 0 *)
	cnt := 0;
ELSIF tx.Q AND NOT IN AND edge THEN
	(* count falling edges when tp.q is true *)
	cnt := cnt + 1;
ELSIF NOT tx.Q THEN
	Q := cnt=N;
	cnt := -1;
END_IF;

(* remember the status of IN *)
edge := IN;
tx(in := IN, pt := TC);

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this Module decodes a specified number of clicks.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CLICK_DEC" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TC">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <derived name="TP"/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* Q shall only be active for one cycle only *)
IF in = FALSE THEN
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
END_IF;

IF in AND NOT edge AND NOT tx.q THEN
	(* a rising edge on in sets the counter to 0 *)
	cnt := 0;
ELSIF tx.Q AND NOT IN AND edge THEN
	(* count falling edges when tp.q is true *)
	cnt := cnt + 1;
ELSIF NOT tx.Q THEN
	CASE cnt OF
		0 : Q0 := TRUE;
		1 : Q1 := TRUE;
		2 : Q2 := TRUE;
		3 : Q3 := TRUE;
	END_CASE;
	cnt := -1;
END_IF;

(* remember the status of IN *)
edge := IN;
tx(in := IN, pt := TC);

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this Module detects a rising edge on In and decodes the amount of falling edges (Pulses) within a specified time TC.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CLK_DIV" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="CLK">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST0">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="Q7">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="cnt">
              <type>
                <BYTE/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF rst THEN
	cnt:= BYTE#0;
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
	Q4 := FALSE;
	Q5 := FALSE;
	Q6 := FALSE;
	Q7 := FALSE;
ELSIF clk THEN
	cnt:= USINT_TO_BYTE(BYTE_TO_USINT(cnt) + USINT#1);

    Q0 := BIT_OF_DWORD(BYTE_TO_DWORD(cnt),0); (* Q0 := cnt.X0; *)
    Q1 := BIT_OF_DWORD(BYTE_TO_DWORD(cnt),1); (* Q1 := cnt.X1; *)
    Q2 := BIT_OF_DWORD(BYTE_TO_DWORD(cnt),2); (* Q2 := cnt.X2; *)
    Q3 := BIT_OF_DWORD(BYTE_TO_DWORD(cnt),3); (* Q3 := cnt.X3; *)
    Q4 := BIT_OF_DWORD(BYTE_TO_DWORD(cnt),4); (* Q4 := cnt.X4; *)
    Q5 := BIT_OF_DWORD(BYTE_TO_DWORD(cnt),5); (* Q5 := cnt.X5; *)
    Q6 := BIT_OF_DWORD(BYTE_TO_DWORD(cnt),6); (* Q6 := cnt.X6; *)
    Q7 := BIT_OF_DWORD(BYTE_TO_DWORD(cnt),7); (* Q7 := cnt.X7; *)

END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this is a clock divider each output divides the signal by 2 Q0 = clk / 2 , Q1 = Q0 / 2 and so on. the outputs have a 50% duty cycle each.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CLK_N" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="N">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="clk">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[clk := BIT_OF_DWORD(SHR(UDINT_TO_DWORD(T_PLC_MS(en:=true)),N),0);
Q := clk XOR edge;
edge := clk;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[clk_N uses the internal sps time to generate one pulse every N ms every pulse is only valid for one cycle so that a edge trigger is not necessary]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CLK_PRG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="T#10ms"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[
tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* initialize on startup *)
IF NOT init THEN
	init := TRUE;
	last := tx - pt;
END_IF;

(* generate output pulse when next_pulse is reached *)
Q := tx - last >= pt;
IF Q THEN last := tx; END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[clk_prg uses the internal sps time to generate a clock with programmable period time.the period time is defined for 10ms .. 65s]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CLK_PULSE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="CNT">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="tn">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_MS(en:=true);
Q := FALSE;				(* reset Q we generate pulses only for one cycle *)
RUN := CNT < N;

IF NOT init OR RST THEN
	init := TRUE;
	CNT := 0;
	tn := tx - TIME_TO_UDINT(PT);
	RUN := FALSE;
ELSIF (cnt < N OR N = 0) AND tx - tn >= TIME_TO_UDINT(PT) THEN		(* generate a pulse *)
	CNT := CNT + 1;
	Q := TRUE;
	tn := tn + TIME_TO_UDINT(PT);
END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[clk_pulse uses the internal sps time to generate a clock with programmable period time. the period time is defined for 10ms .. 65s.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CYCLE_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="T0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T3">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="S0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SX">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="SL">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="STATE">
              <type>
                <INT/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* init on first cycle *)
IF NOT init THEN
	init := TRUE;
	last := tx;
END_IF;

IF _E THEN
	IF SL THEN
		(* when sx > 0 then the state sx is forced to start *)
		state:= LIMIT(0,SX,3);
		last := tx;
		(* this is to avoid to reset sx from the calling programm it does work fine on codesys but i am not sure about other systems, because we are writing to an input *)
		SL := FALSE;
	ELSE
		CASE state OF
			0 :	(* wait for T0 and switch to next cycle *)
				IF tx - last >= T0 THEN
					state := 1;
					last := tx;
				END_IF;
			1 : (* wait for T1 over 1st cycle *)
				IF tx - last >= T1 THEN
					state := 2;
					last := tx;
				END_IF;
			2 : (* wait for T1 over 1st cycle *)
				IF tx - last >= T2 THEN
					state := 3;
					last := tx;
				END_IF;
			3 : (* wait for T2 over 2nd cycle *)
				IF tx - last >= T3 THEN
					IF S0 THEN State := 0; END_IF; (* if S0 is false, the sequence stops at state 3 *)
					last := tx;
				END_IF;
		END_CASE;
	END_IF;
ELSE
	state := 0;
	last := tx;
END_IF;
]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="D_TRIG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="X">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_in">
              <type>
                <DWORD/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[Q := in <> last_in;
X := UDINT_TO_DWORD(DWORD_TO_UDINT(in) - DWORD_TO_UDINT(last_in));
last_in := in;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this block is similar to the IEC Standard R_trig and F_trig but it monitors a DWORD, WORD or Byte Variable instead and generated an Output Pulse for one cycle only when the input has changed.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="GEN_BIT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN0">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="IN1">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="IN3">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="CLK">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STEPS">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="REP">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="CNT">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="r0">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="r1">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="r2">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="r3">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="rx">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* check if number of runs is finished or rep = 0 which means continuous *)

IF clk AND NOT rst THEN
	run := (rep = 0) OR (rx <= rep);
	IF run THEN
		(* check for step counter reached and reset to 0 if cnt = steps *)
		IF cnt = steps THEN
			cnt := 0;
		END_IF;

		(* when cnt = 0 then reload the inputs into the registers *)
		IF cnt = 0 THEN
			r0 := in0;
			r1 := in1;
			r2 := in2;
			r3 := in3;
		END_IF;

		(* when cnt < steps, shift the lowest bits to the outputs *)
		IF (cnt < steps) THEN
            Q0 := BIT_OF_DWORD(r0,0); (* Q0 := r0.X0; *)
            Q1 := BIT_OF_DWORD(r1,0); (* Q1 := r1.X0; *)
            Q2 := BIT_OF_DWORD(r2,0); (* Q2 := r2.X0; *)
            Q3 := BIT_OF_DWORD(r3,0); (* Q3 := r3.X0; *)
			r0 := SHR(r0,1);
			r1 := SHR(r1,1);
			r2 := SHR(r2,1);
			r3 := SHR(r3,1);
		END_IF;

		(* increment the step counter *)
		cnt := cnt +1;
		IF (cnt = steps) AND (rep <> 0) THEN rx := rx +1; END_IF;
		IF (rx > rep) AND (rep <> 0) THEN run := FALSE; END_IF;
	END_IF;
ELSE
	IF rst THEN
		run := FALSE;
		Q0 := FALSE;
		Q1 := FALSE;
		Q2 := FALSE;
		Q3 := FALSE;
		r0 := DWORD#0;
		r1 := DWORD#0;
		r2 := DWORD#0;
		r3 := DWORD#0;
		cnt := 0;
		rx := 1;
	END_IF;
END_IF;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[gen_bit is 4 bit sequencial pattern generator with 4 DWORD inputs and 4 serial outputs.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="GEN_SQ" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tn">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := UDINT_TO_TIME(T_PLC_MS(en:=true));

IF NOT init THEN
	init := TRUE;
	tn := tx;
	Q := TRUE;
ELSIF tx - tn >= DWORD_TO_TIME(SHR(TIME_TO_DWORD(PT),1)) THEN
	Q := NOT Q;
	tn := tn + DWORD_TO_TIME(SHR(TIME_TO_DWORD(pt),1));
END_IF;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[gen_sq generates square wave signal with programmable period time.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SCHEDULER" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="E0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="E1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="E2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="E3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T3">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="s0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="s1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="s2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="s3">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="c">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

IF NOT init THEN
	init := TRUE;
	s0 := tx - T0;
	s1 := tx - T1;
	s2 := tx - T2;
	s3 := tx - T3;
END_IF;

Q0 := FALSE;
Q1 := FALSE;
Q2 := FALSE;
Q3 := FALSE;

CASE c OF
	0: 	IF tx - s0 >= T0 THEN
			Q0 := E0;
			s0 := tx;
		END_IF;
		c := 1;
	1: 	IF tx - s1 >= T1 THEN
			Q1 := E1;
			s1 := tx;
		END_IF;
		c := 2;
	2: 	IF tx - s2 >= T2 THEN
			Q2 := E2;
			s2 := tx;
		END_IF;
		c := 3;
	3: 	IF tx - s3 >= T3 THEN
			Q3 := E3;
			s3 := tx;
		END_IF;
		c := 0;
END_CASE;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[SCHEDULER is used to call programs or function blocks at specific intervals.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SCHEDULER_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="E0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="E1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="E2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="E3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="C0">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="C1">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="C2">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="C3">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="O0">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="O1">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="O2">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="O3">
              <type>
                <UINT/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="sx">
              <type>
                <UINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[Q0 := E0 AND (sx MOD C0 - O0 = UINT#0);
Q1 := E1 AND (sx MOD C1 - O1 = UINT#0);
Q2 := E2 AND (sx MOD C2 - O2 = UINT#0);
Q3 := E3 AND (sx MOD C3 - O3 = UINT#0);

(* increment cycle counter every cycle *)
sx := sx + UINT#1;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[SCHEDULER_2 is used to call programs or function blocks at specific cycles.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SEQUENCE_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN0">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN1">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN2">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN3">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="START">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="WAIT0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT3">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY3">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="STOP_ON_ERROR">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="QX">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_STEP">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* initialize on startup *)
IF NOT init THEN
	last := tx;
	init := TRUE;
	status := BYTE#110;
END_IF;

(* asynchronous reset *)
IF rst THEN
	_step := -1;
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
	status := BYTE#110;
	run := FALSE;

(* edge on start input restarts the sequencer *)
ELSIF start AND NOT edge THEN
	_step := 0;
	last := tx;
	status := BYTE#111;
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
	run := TRUE;
END_IF;
edge := start;

(* check if stop on status is necessary *)
IF status > BYTE#0 AND status < BYTE#100 AND stop_on_error THEN RETURN; END_IF;

(* sequence is running *)
IF run AND _step = 0 THEN
	IF NOT q0 AND in0 AND tx - last <= wait0 THEN
		Q0 := TRUE;
		last := tx;
	ELSIF NOT q0 AND tx - last > wait0 THEN
		status := BYTE#1;
		run := FALSE;
	ELSIF q0 AND tx - last >= delay0 THEN
		_step := 1;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 1 THEN
	IF NOT q1 AND in1 AND tx - last <= DELAY0 THEN
		Q0 := FALSE;
		Q1 := TRUE;
		last := tx;
	ELSIF NOT q1 AND Tx - last > DELAY0 THEN
		status := BYTE#2;
		q0 := FALSE;
		run := FALSE;
	ELSIF q1 AND tx - last >= WAIT1 THEN
		_step := 2;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 2 THEN
	IF NOT q2 AND in2 AND tx - last <= DELAY1 THEN
		Q1 := FALSE;
		Q2 := TRUE;
		last := tx;
	ELSIF NOT q2 AND Tx - last > DELAY1 THEN
		status := BYTE#3;
		q1 := FALSE;
		run := FALSE;
	ELSIF q2 AND tx - last >= WAIT2 THEN
		_step := 3;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 3 THEN
	IF NOT q3 AND in3 AND tx - last <= DELAY2 THEN
		Q2 := FALSE;
		Q3 := TRUE;
		last := tx;
	ELSIF NOT q3 AND Tx - last > DELAY2 THEN
		status := BYTE#4;
		q2 := FALSE;
		run := FALSE;
	ELSIF q3 AND tx - last >= WAIT3 THEN
		_step := -1;
		q3 := FALSE;
		run := FALSE;
		status := BYTE#110;
	END_IF;
END_IF;
QX := q0 OR q1 OR q2 OR q3;

(*From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="SEQUENCE_64" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="START">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SMAX">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="STATE">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
            <variable name="TRIG">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="PROG">
              <type>
                <array>
                  <dimension lower="0" upper="63"/>
                  <baseType>
                    <TIME/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));
TRIG := FALSE;

IF RST THEN
	STATE := -1;

(* start sequence *)
ELSIF START AND NOT edge THEN
	STATE := 0;
	last := tx;
	TRIG := TRUE;

(* sequence generator *)
ELSIF (STATE >= 0) THEN
	IF (tx - last) >= PROG[STATE] THEN
		STATE := INC2(STATE, 1, -1, SMAX);
		last := tx;
		TRIG := TRUE;
	END_IF;
END_IF;

edge := START;

(*From OSCAT Library, www.oscat.de *)
(*T_PLC_MS, INC2 required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[sequence generates a sequence of states with a programmable length for each state.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TMAX" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Z">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last_in">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

Z := FALSE;

IF NOT in THEN
	Q := FALSE;
ELSIF IN AND NOT last_in THEN
	Q := TRUE;
	start := tx;
ELSIF (tx - start >= PT) AND Q THEN
	Q := FALSE;
	Z := TRUE;
END_IF;

last_in := IN;

(*From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Q of tmax will follow IN except that it forces a maximum ontime for the output Q.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TMIN" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="pm">
              <type>
                <derived name="TP"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[pm(in := IN, PT := PT);
Q := IN OR pm.Q;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Q of tMIN will follow IN except that it forces a minimum ontime for the output Q.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TOF_1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="start">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

IF RST THEN
	Q := FALSE;
ELSIF IN THEN
	Q := TRUE;
	start := tx;
ELSIF tx - start >= PT THEN
	Q := FALSE;
END_IF;


(*From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TOF_1 will extend a pulse on input in for PT seconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TONOF" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_ON">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T_OFF">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="X">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="old">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="mode">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF IN XOR old THEN
  X(IN := FALSE, PT := SEL(IN,T_OFF,T_ON));
  mode := IN;
  old := IN;
END_IF;
X(IN := TRUE);
IF X.Q THEN Q := mode;END_IF;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TONOF generated a TON and TOF Delay for the Input N TON (T1) and TOF (T2) can be configured separately]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TP_1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="ix">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := UDINT_TO_TIME(T_PLC_MS(en:=true));

IF RST THEN
	Q := FALSE;
ELSIF IN AND NOT ix THEN
	Q := TRUE;
	start := tx;
ELSIF tx - start >= PT THEN
	Q := FALSE;
END_IF;

ix:= IN;

(*From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TP_1 generates a pulse every time it is calles with in := TRUE]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TP_1D" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PT1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="PTD">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="W">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="ix">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := UDINT_TO_TIME(T_PLC_MS(en:=true));

IF RST THEN
	Q := FALSE;
	rst := FALSE;
	W := FALSE;
ELSIF W THEN
	IF tx - start >= PTD THEN
		W := FALSE;
	END_IF;
ELSIF IN AND NOT ix THEN
	Q := TRUE;
	start := tx;
	in := FALSE;
ELSIF tx - start >= PT1 THEN
	Q := FALSE;
	W := TRUE;
	start := tx;
END_IF;

ix := IN;

(*From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TP_2 generates a pulse every time it is calles with in := TRUE.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TP_X" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ET">
              <type>
                <TIME/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := UDINT_TO_TIME(T_PLC_MS(en:=true));

(* rising edge trigger *)
IF IN AND NOT edge THEN
	start := tx;
	Q := PT > t#0ms;
ELSIF Q THEN
	ET := tx - start;
	IF ET >= PT THEN
		Q := FALSE;
		ET := t#0ms;
	END_IF;
END_IF;
edge := IN;

(*From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[retriggerable edge triggered pulse similar to TP but with a retrigger nfunction]]></xhtml:p>
        </documentation>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Config0">
        <resource name="Res0">
          <task name="task0" priority="0" interval="T#20ms">
            <pouInstance name="instance0" typeName="program0"/>
          </task>
          <globalVars>
            <variable name="PLC_CYCLE_COUNT" address="%ML1025">
              <type>
                <ULINT/>
              </type>
            </variable>
            <variable name="TASK_TIME_MS">
              <type>
                <ULINT/>
              </type>
              <initialValue>
                <simpleValue value="20"/>
              </initialValue>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
