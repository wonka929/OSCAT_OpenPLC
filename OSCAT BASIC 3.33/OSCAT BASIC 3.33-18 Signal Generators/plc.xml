<?xml version='1.0' encoding='utf-8'?>
<project xmlns:ns1="http://www.plcopen.org/xml/tc6.xsd" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Unbekannt" productName="Unbenannt" productVersion="1" creationDateTime="2019-09-05T11:08:58"/>
  <contentHeader name="Unbenannt" modificationDateTime="2019-09-05T15:20:11">
    <coordinateInfo>
      <fbd>
        <scaling x="10" y="10"/>
      </fbd>
      <ld>
        <scaling x="10" y="10"/>
      </ld>
      <sfc>
        <scaling x="10" y="10"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="TP_X" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ET">
              <type>
                <TIME/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := UDINT_TO_TIME(T_PLC_MS(en:=true));

(* rising edge trigger *)
IF IN AND NOT edge THEN
	start := tx;
	Q := PT > t#0ms;
ELSIF Q THEN
	ET := tx - start;
	IF ET >= PT THEN
		Q := FALSE;
		ET := t#0ms;
	END_IF;
END_IF;
edge := IN;

(*From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[retriggerable edge triggered pulse similar to TP but with a retrigger nfunction]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CLK_PRG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="T#10ms"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[
tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* initialize on startup *)
IF NOT init THEN
	init := TRUE;
	last := tx - pt;
END_IF;

(* generate output pulse when next_pulse is reached *)
Q := tx - last >= pt;
IF Q THEN last := tx; END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[clk_prg uses the internal sps time to generate a clock with programmable period time.the period time is defined for 10ms .. 65s]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="GEN_SQR" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="AM">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0"/>
              </initialValue>
            </variable>
            <variable name="OS">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="DL">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="DC">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OUT">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF dc = 0.0 THEN
	out := -am * 0.5 + os;
	Q := FALSE;
	RETURN;
ELSIF dc = 1.0 THEN
	out := am * 0.5 + os;
	Q := TRUE;
	RETURN;
END_IF;

(* read system time and prepare input data *)
tx:= UDINT_TO_TIME(T_PLC_MS(en:=true)) - last;
DL := modR(dl,1.0);
IF dl < 0.0 THEN dl := 1.0 - dl; END_IF;
dc := modR(dc,1.0);
IF dc < 0.0 THEN dc := 1.0 - dc; END_IF;

(* init section *)
IF NOT init THEN
	init := TRUE;
	last := tx;
	tx := t#0s;
END_IF;

(* add last if one cycle is finished *)
IF tx >= pt THEN
	last := last + pt;
	tx := tx - pt;
END_IF;

(* check if falling or rising edge first *)
IF multime(pt, dl + dc) >= pt THEN
	(* generate falling edge *)
	IF tx >= multime(pt, dl + dc - 1.0) THEN
		out := -am * 0.5 + os;
		Q := FALSE;
	END_IF;
	(* generate rising edge *)
	IF tx >= multime(pt, dl) THEN
		out := am * 0.5 + os;
		Q := TRUE;
	END_IF;
ELSE
	(* generate rising edge first *)
	IF tx >= multime(pt, dl) THEN
		out := am * 0.5 + os;
		Q := TRUE;
	END_IF;
	(* generate falling edge *)
	IF tx >= multime(pt, dl + dc) THEN
		out := -am * 0.5 +os;
		Q := FALSE;
	END_IF;
END_IF;


(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this signal generator generates a square wave output]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SIGN_R" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[SIGN_R := in < 0.0;
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function return true if the real input is negative]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="FLOOR2" pouType="function">
        <interface>
          <returnType>
            <DINT/>
          </returnType>
          <inputVars>
            <variable name="x">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[FLOOR2 := REAL_TO_DINT(X);
IF DINT_TO_REAL(FLOOR2) > X THEN
	FLOOR2 := FLOOR2 - DINT#1;
END_IF;
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[This is a rounding function which returns the biggest possible integer which is less or equal to X. floor2(3.14) = 3 floor2(-3.14) = -4]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="MODR" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="DIVI">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF divi = 0.0 THEN
	MODR := 0.0;
ELSE
	MODR := in - DINT_TO_REAL(FLOOR2(in / divi)) * divi;
END_IF;
(* from OSCAT library; www.oscat.de  *)
(* FC FLOOR2 required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[modulo funtion for real numbers modr(5.5,2.5) = 0.5]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="D_TRUNC" pouType="function">
        <interface>
          <returnType>
            <DINT/>
          </returnType>
          <inputVars>
            <variable name="x">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[D_TRUNC := REAL_TO_DINT(X);
IF X > 0.0 THEN
	IF DINT_TO_REAL(D_TRUNC) > X THEN D_TRUNC := D_TRUNC - DINT#1; END_IF;
ELSE
	IF DINT_TO_REAL(D_TRUNC) < X THEN D_TRUNC := D_TRUNC + DINT#1; END_IF;
END_IF;
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[d_trunc truncates a real to a dint 1.5 will be 1 and -1.5 will be -1 d_trunc is necessary because many systems do not offer a trunc to a dint also real_to_dint will not deliver the same result on different systems]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="FRACT" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF ABS(x) < 2.0E9 THEN
	FRACT := x - DINT_TO_REAL(D_TRUNC(x));
ELSE
	FRACT := 0.0;
END_IF;
(* from OSCAT library; www.oscat.de  *)
(* D_TRUNC required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function returns the fraction of a real number fract(3.14) = 0.14]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BIT_OF_DWORD" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[BIT_OF_DWORD := (SHR(in,N) AND 16#00000001) > 0;

(* From Oscat Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function extracts a single bit from the nth position from right (right is lowest bit the lowest Bit (Bit0 from in) is selected with N=.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="RDM" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="LAST">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_RDM">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="tn">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="tc">
              <type>
                <INT/>
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tn := UDINT_TO_DWORD(T_PLC_MS(en:=true));
tc := Bit_Count(tn);

tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,2),31); (* tn.31 := tn.2; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,5),30); (* tn.30 := tn.5; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,4),29); (* tn.29 := tn.4; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,1),28); (* tn.28 := tn.1; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,0),27); (* tn.27 := tn.0; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,7),26); (* tn.26 := tn.7; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,6),25); (* tn.25 := tn.6; *)
tn:=BIT_LOAD_DW(tn,BIT_OF_DWORD(tn,3),24); (* tn.24 := tn.3; *)

tn := ROL(tn,Bit_Count(tn)) OR DWORD#16#80000001;
tn := UDINT_TO_DWORD(DWORD_TO_UDINT(tn) MOD UDINT#71474513 + INT_TO_UDINT(tc) + UDINT#77);
_RDM := fract(DWORD_TO_REAL(tn) / 10000000.0 * (2.71828182845904523536028747135266249 - LIMIT(0.0,last,1.0)));

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates a pseudo random number]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BIT_LOAD_DW" pouType="function">
        <interface>
          <returnType>
            <DWORD/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF val THEN
	BIT_LOAD_DW := in OR SHL(DWORD#1,pos);
ELSE
	BIT_LOAD_DW := in AND (NOT SHL(DWORD#1,pos));
END_IF;

(*From OSCAT Library, www.oscat.de*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function loads a bit into a DWord at position pos]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BIT_COUNT" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="in_temp">
              <type>
                <DWORD/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[in_temp := IN;
WHILE in_temp > DWORD#0 DO
	IF (in_temp AND DWORD#16#00000001) > DWORD#0 THEN Bit_Count := Bit_Count +1; END_IF;
	in_temp := SHR(in_temp,1);
END_WHILE;

(*From OSCAT Library, www.oscat.de*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[BIT_COUNT counts the amount True of bits in a dword.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TREND_DW" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <DWORD/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_D">
              <type>
                <DWORD/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_x">
              <type>
                <DWORD/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF X > last_X THEN
	TU := TRUE;
	TD := FALSE;
	_D := UDINT_TO_DWORD(DWORD_TO_UDINT(X) - DWORD_TO_UDINT(last_X));
	Q := TRUE;
ELSIF X < last_X THEN
	TD := TRUE;
	TU := FALSE;
	_D := UDINT_TO_DWORD(DWORD_TO_UDINT(last_X) - DWORD_TO_UDINT(X));
	Q := FALSE;
ELSE
	TU := FALSE;
	TD := FALSE;
	_D := DWORD#0;
END_IF;
last_X := X;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[trend_DW analyses the trend of a input signal.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="T_PLC_MS" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <localVars>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
          <inputVars>
            <variable name="debug">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="N">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="offset">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="temp">
              <type>
                <DWORD/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := 0;

{extern unsigned long __tick;
extern unsigned long long common_ticktime__;
unsigned long long ticktime_ms = (common_ticktime__)/1000000;
UDINT plc_time = (UDINT)(ticktime_ms * (unsigned long long)__tick);
TX = plc_time}

T_PLC_MS := tx;
IF debug THEN
	T_PLC_MS := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_MS),N) OR SHL(temp,N))-1) + OFFSET;
END_IF;

(* Original Code:
tx := TIME();
T_PLC_MS := TIME_TO_DWORD(Tx);
IF debug THEN
	T_PLC_MS := (SHL(T_PLC_MS,N) OR SHL(DWORD#1,N)-1) + OFFSET;
END_IF;
*)

(* From OSCAT library, www.oscat.de

this is a temporary T_PLC_MS FB until OpenPLC gets it´s own time() functionality *)

(* PLC_TIME and Global variables PLC_SCAN_CYCL and PLC_CYCL_TIME required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Output current execution time in miliseconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="program0" pouType="program">
        <interface>
          <localVars>
            <variable name="LocalVar0">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar2">
              <type>
                <DINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <FBD>
            <block localId="1" typeName="ADD" executionOrderId="0" height="60" width="70">
              <position x="570" y="110"/>
              <inputVariables>
                <variable formalParameter="IN1">
                  <connectionPointIn>
                    <relPosition x="0" y="30"/>
                    <connection refLocalId="2">
                      <position x="570" y="140"/>
                      <position x="540" y="140"/>
                    </connection>
                  </connectionPointIn>
                </variable>
                <variable formalParameter="IN2">
                  <connectionPointIn>
                    <relPosition x="0" y="50"/>
                    <connection refLocalId="3">
                      <position x="570" y="160"/>
                      <position x="555" y="160"/>
                      <position x="555" y="170"/>
                      <position x="540" y="170"/>
                    </connection>
                  </connectionPointIn>
                </variable>
              </inputVariables>
              <inOutVariables/>
              <outputVariables>
                <variable formalParameter="OUT">
                  <connectionPointOut>
                    <relPosition x="70" y="30"/>
                  </connectionPointOut>
                </variable>
              </outputVariables>
            </block>
            <inVariable localId="2" executionOrderId="0" height="30" width="90" negated="false">
              <position x="450" y="130"/>
              <connectionPointOut>
                <relPosition x="90" y="10"/>
              </connectionPointOut>
              <expression>LocalVar0</expression>
            </inVariable>
            <inVariable localId="3" executionOrderId="0" height="30" width="90" negated="false">
              <position x="450" y="160"/>
              <connectionPointOut>
                <relPosition x="90" y="10"/>
              </connectionPointOut>
              <expression>LocalVar1</expression>
            </inVariable>
            <outVariable localId="4" executionOrderId="0" height="30" width="90" negated="false">
              <position x="680" y="130"/>
              <connectionPointIn>
                <relPosition x="0" y="10"/>
                <connection refLocalId="1" formalParameter="OUT">
                  <position x="680" y="140"/>
                  <position x="640" y="140"/>
                </connection>
              </connectionPointIn>
              <expression>LocalVar2</expression>
            </outVariable>
          </FBD>
        </body>
      </pou>
      <pou name="RMP_B" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="BUSY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="HIGH">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="LOW">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rmp">
              <type>
                <derived name="_RMP_B"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[rmp(dir := UP, _E := _E, TR := PT, RMP := out);
out := rmp.RMP;

(* set or reset operation *)
IF RST THEN
	out := BYTE#0;
ELSIF SET THEN
	out := BYTE#255;
END_IF;

(* checks for outputs stable and reset or set busy flag *)
low := out = BYTE#0;
high := out = BYTE#255;
busy := NOT (low OR high) AND _E;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this ramp generator generates a byte wide ramp with 255 steps the generator has an asynchronous set and reset]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_RMP_B" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="DIR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="TR">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="RMP">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tl">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tn">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="last_dir">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <BYTE/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := UDINT_TO_TIME(T_PLC_MS(en:=true));

IF _E AND init AND (dir = last_dir) AND (RMP <> SEL(DIR, BYTE#0, BYTE#255)) AND TR = tn THEN
	RMP := FRMP_B(start, DIR, tx - tl, TR);
ELSE
	init := TRUE;
	tl := tx;
	tn := tr;
	start := RMP;
END_IF;
last_dir := dir;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS requires *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[_RMP_B generates a ramp on an external var of type byte]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="FRMP_B" pouType="function">
        <interface>
          <returnType>
            <BYTE/>
          </returnType>
          <inputVars>
            <variable name="START">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="DIR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TD">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TR">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF TD < TR THEN
	FRMP_B := MIN(UDINT_TO_BYTE(DWORD_TO_UDINT(SHL(TIME_TO_DWORD(TD), 8)) / TIME_TO_UDINT(TR)), SEL(DIR, START, USINT_TO_BYTE(USINT#255 - BYTE_TO_USINT(START))));
	IF DIR THEN
		FRMP_B := USINT_TO_BYTE(BYTE_TO_USINT(START) + BYTE_TO_USINT(FRMP_B));
	ELSE
		FRMP_B := USINT_TO_BYTE(BYTE_TO_USINT(START) - BYTE_TO_USINT(FRMP_B));
	END_IF;
ELSE
	FRMP_B := SEL(DIR, BYTE#0, BYTE#255);
END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates a ramp and limits the output to 0 .. 255 without overflow problems]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_RMP_NEXT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="TR">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TF">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TL">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="DIR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="OUT">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="rmx">
              <type>
                <derived name="_RMP_B"/>
              </type>
            </variable>
            <variable name="dirx">
              <type>
                <derived name="TREND_DW"/>
              </type>
            </variable>
            <variable name="t_lock">
              <type>
                <derived name="TP"/>
              </type>
            </variable>
            <variable name="xen">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="xdir">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[dirx(X := BYTE_TO_DWORD(in));

t_lock(in := FALSE, pt := TL);

IF dirx.TU AND (OUT < IN) THEN
	IF NOT xdir AND xen THEN t_lock(in := TRUE); END_IF;
	xen := TRUE;
	xdir := TRUE;
ELSIF dirx.TD AND (OUT > IN) THEN
	IF xdir AND xen THEN t_lock(in := TRUE); END_IF;
	xen := TRUE;
	xdir := FALSE;
ELSIF xen THEN
	IF (xdir AND (out >= in)) OR (NOT xdir AND (out <= in)) THEN
		xen := FALSE;
		IF tl > t#0s THEN t_lock(IN := TRUE); END_IF;
	END_IF;
END_IF;

IF NOT t_lock.Q AND xen THEN
	UP := XDIR;
	DIR := XDIR;
	DN := NOT XDIR;
ELSE
	UP := FALSE;
	DN := FALSE;
END_IF;

rmx(rmp := OUT, _E := _E AND (UP OR DN) , dir := DIR, tr := SEL(dir, TF, TR));
OUT := rmx.RMP;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[_RMP_NEXT  will generate a ramp output following the input IN.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_RMP_W" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="DIR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="TR">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="RMP">
              <type>
                <WORD/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="tl">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="_step">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="last_dir">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := T_PLC_MS(en:=true);
IF _E AND init THEN
	(* we need to set tl = tx when direction changes *)
	IF dir XOR last_dir THEN
	 tl := tx;
	 last_dir := dir;
	END_IF;
	(* check_elapsed time and calculate only if necessary *)
	IF tr > t#0s THEN
		_step := DWORD_TO_DINT(UDINT_TO_DWORD(DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(tx-tl), 16)) / TIME_TO_UDINT(TR)));
	ELSE
		_step := DINT#65535;
	END_IF;
	IF _step > DINT#0 THEN
		(* perform the step on the ramp *)
		tl := tx;
		(* calculate the step response *)
		IF NOT dir THEN _step := - _step; END_IF;
		rmp := DINT_TO_WORD(LIMIT(DINT#0, _WORD_TO_DINT(rmp) + _step, DINT#65535));
	END_IF;
ELSE
	tl := tx;
	init := TRUE;
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required, _WORD_TO_DINT required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[_RMP_B generates a ramp on an external var of type byte]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_WORD_TO_DINT" pouType="function">
        <interface>
          <returnType>
            <DINT/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <WORD/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[_WORD_TO_DINT := UINT_TO_DINT(WORD_TO_UINT(IN));

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="GEN_PULSE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ENQ">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="PTH">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="PTL">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tn">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF enq THEN
		tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));
	IF NOT init THEN init := TRUE; tn := tx; END_IF;
	IF tx - tn >= SEL(Q, PTL, PTH) THEN
		tn := tn + SEL(Q, PTL, PTH);
		Q := NOT Q;
	END_IF;
ELSE
	Q := FALSE;
	init := FALSE;
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[GEN_PULSE uses the internal sps timer to generate a continuous output waveform with programmable high and low time.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="GEN_PW2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ENQ">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TH1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TH2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TL1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TL2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TS">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TH">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TL">
              <type>
                <TIME/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="t_high">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="t_low">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="et">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* startup initialization *)
IF NOT init THEN
	start := tx;
	init := TRUE;
	TH := T#0s;
	TL := T#0s;
END_IF;

(* timing selection *)
IF TS THEN
	t_high := TH2;
	t_low := TL2;
ELSE
	t_high := TH1;
	t_low := TL1;
END_IF;

(* normal operation *)
IF ENQ THEN
	et := tx - start;
	IF NOT Q THEN
		IF et >= t_low THEN
			Q := TRUE;
			start := tx;
			TL := T#0s;
		ELSE
			TL := et;
		END_IF;
	ELSE
		IF et >= t_high THEN
			Q := FALSE;
			start := tx;
			TH := T#0s;
		ELSE
			TH := et;
		END_IF;
	END_IF;
ELSE
	Q := FALSE;
	TH := T#0s;
	TL := T#0s;
	start := tx;
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[GEN_PW2 generates a time TH? followed by a time TL?.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="GEN_RDM" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="AM">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0"/>
              </initialValue>
            </variable>
            <variable name="OS">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OUT">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="FB_rdm">
              <type>
                <derived name="RDM"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true)) - last;

(* init section *)
IF NOT init THEN
	init := TRUE;
	last := tx;
	tx := t#0s;
END_IF;

(* add last if one cycle is finished *)
IF tx >= pt THEN
	last := last + pt;
	tx := tx - pt;

	(* generate output signal *)
    FB_rdm(last:=0.0);
	out := am * (FB_rdm._RDM - 0.5) + os;
	q := TRUE;
ELSE
	q := FALSE;
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, BIT_COUNT, BIT_LOAD_DW, RDM, BIT_OF_DWORD, FRACT, D_TRUNC required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this signal generator generates a random output. The signal is defined by period time (PT), amplitude (AM), offset (OS]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="GEN_RDT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ENABLE">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="MIN_TIME_MS">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1s"/>
              </initialValue>
            </variable>
            <variable name="MAX_TIME_MS">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1.2s"/>
              </initialValue>
            </variable>
            <variable name="TP_Q">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#100ms"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="XQ">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tonRDMTimer">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="tof_xQ">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="tRDMTime">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="rRDMTime">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="rdm_1">
              <type>
                <derived name="RDM"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tonRDMTimer(IN:=Enable,PT:=tRDMTime);
tof_xQ(IN := tonRDMTimer.Q,PT:=TP_Q);
XQ := tof_xq.Q;
IF tonRDMTimer.Q THEN
	xQ := TRUE ;
    rdm_1(last:=rRDMTime);
    rRDMTime:= rdm_1._RDM;

	tRDMTime := REAL_TO_TIME(rRDMTime * TIME_TO_REAL(Max_Time_ms - Min_Time_ms) + TIME_TO_REAL(Min_Time_ms));
	tonRDMTimer (IN:=FALSE);
END_IF;


(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[RDMT generates a defined pulse with pulse width TP_Q at random times. ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="GEN_RMP" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1s"/>
              </initialValue>
            </variable>
            <variable name="AM">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0"/>
              </initialValue>
            </variable>
            <variable name="OS">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="DL">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OUT">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="temp">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="ltemp">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true)) - last;
DL := modR(dl,1.0);
IF dl < 0.0 THEN dl := 1.0 - dl; END_IF;

(* init section *)
IF NOT init THEN
	init := TRUE;
	last := tx;
	tx := t#0s;
END_IF;

(* add last if one cycle is finished *)
IF tx >= pt THEN
	last := last + pt;
	tx := tx - pt;
END_IF;

(* generate sine wave *)
ltemp := temp;
IF pt > t#0s THEN temp := fract(TIME_TO_REAL(tx + multime(pt, dl)) / TIME_TO_REAL(pt)); END_IF;
out := am * temp + os;

(* boolean output Q *)
Q := temp < ltemp;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, MODR, FRACT2 required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this signal generator generates a ramp wave output. The ramp wave signal is defined by period time (PT), ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="GEN_SIN" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="AM">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0"/>
              </initialValue>
            </variable>
            <variable name="OS">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="DL">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OUT">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="temp">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true)) - last;

DL := modR(dl,1.0);
IF dl < 0.0 THEN dl := 1.0 - dl; END_IF;

(* init section *)
IF NOT init THEN
	init := TRUE;
	last := tx;
	tx := t#0s;
END_IF;

(* add last if one cycle is finished *)
IF tx >= pt THEN
	last := last + pt;
	tx := tx - pt;
END_IF;

(* generate sine wave *)
IF pt > t#0s THEN temp := SIN(6.283185307179586476 * TIME_TO_REAL(tx + multime(pt, dl)) / TIME_TO_REAL(pt)); END_IF;
out := am * 0.5 *  temp + os;

(* boolean output Q *)
q := NOT sign_R(temp);

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, SIGN_R required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this signal generator generates a sine wave output]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="PWM_DC" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="F">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="DC">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="clk">
              <type>
                <derived name="CLK_PRG"/>
              </type>
            </variable>
            <variable name="pulse">
              <type>
                <derived name="TP_X"/>
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF F > 0.0 THEN
	tmp := 1000.0/F;
	CLK(PT := REAL_TO_TIME(tmp));
	Pulse(in := clk.Q, pt := REAL_TO_TIME(tmp*DC));
	Q := pulse.Q;
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, CLK_PRG, TP_X required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this signal generator generates a square wave signal which is specified by the frequency and the duty cycle]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="PWM_PW" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="F">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="PW">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="clk">
              <type>
                <derived name="CLK_PRG"/>
              </type>
            </variable>
            <variable name="pulse">
              <type>
                <derived name="TP_X"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF F > 0.0 THEN
	CLK(PT := REAL_TO_TIME(1000.0 / F));
	Pulse(in := clk.Q, pt := pw);
	Q := pulse.Q;
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS, CLK_PRG, TP_X required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this signal generator generates a square wave signal which is specified by the frequency and the pulse width]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="RMP_SOFT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PT_ON">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#100ms"/>
              </initialValue>
            </variable>
            <variable name="PT_OFF">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#100ms"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rmp">
              <type>
                <derived name="_RMP_B"/>
              </type>
            </variable>
            <variable name="tmp">
              <type>
                <BYTE/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tmp := SEL(in, BYTE#0, val);
IF tmp > out THEN
	(* we need to ramp down *)
	rmp(dir := TRUE, _E := TRUE, TR := PT_ON, RMP := out);
	out := rmp.RMP; 
	(* make sure out does not surpass tmp *)
	out := MIN(out, tmp);
ELSIF tmp < out THEN
	(* we need to ramp up *)
	rmp(dir := FALSE, _E := TRUE, TR := PT_OFF, RMP := out);
	out := rmp.RMP; 
	(* make sure out does not surpass tmp *)
	out := MAX(out, tmp);
ELSE
	(* no ramp necessary *)
	rmp(_E := FALSE, RMP := out);
	out := rmp.RMP; 
END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this soft on/off ramp generator generates a soft on and soft off ramp while the max on value is set by the input]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="RMP_W" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <WORD/>
              </type>
            </variable>
            <variable name="BUSY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="HIGH">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="LOW">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rmp">
              <type>
                <derived name="_RMP_W"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[rmp(dir := UP, _E := _E, TR := PT, rmp := out);
out := rmp.RMP;

(* set or reset operation *)
IF RST THEN
	out := WORD#0;
ELSIF SET THEN
	out := WORD#65535;
END_IF;

(* checks for outputs stable and reset or set busy flag *)
low := out = WORD#0;
high := out = WORD#65535;
busy := NOT (low OR high) AND _E;

(* From OSCAT Library, www.oscat.de *)
(* _RMP_W required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this ramp generator generates a Word wide ramp with 65535 steps]]></xhtml:p>
        </documentation>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Config0">
        <resource name="Res0">
          <task name="task0" priority="0" interval="T#20ms">
            <pouInstance name="instance0" typeName="program0"/>
          </task>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
