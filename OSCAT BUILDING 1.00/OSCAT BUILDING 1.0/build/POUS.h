#include "beremiz.h"
#ifndef __POUS_H
#define __POUS_H

#include "accessor.h"
#include "iec_std_lib.h"

__DECLARE_ENUMERATED_TYPE(LOGLEVEL,
  LOGLEVEL__CRITICAL,
  LOGLEVEL__WARNING,
  LOGLEVEL__INFO,
  LOGLEVEL__DEBUG
)
__DECLARE_ARRAY_TYPE(__ARRAY_OF_REAL_2,REAL,[2])
__DECLARE_STRUCT_TYPE(TIMER_EVENT,
  BYTE TYP;
    BYTE CHANNEL;
    BYTE DAY;
    UDINT START;
    TIME DURATION;
    BYTE LAND;
    BYTE LOR;
    UDINT LAST;
  )
__DECLARE_STRUCT_TYPE(REAL2,
  REAL R1;
    REAL RX;
  )
__DECLARE_STRUCT_TYPE(OSCAT_CALENDAR,
  UDINT UTC;
    UDINT LDT;
    UDINT LDATE;
    UDINT LTOD;
    INT YEAR;
    INT MONTH;
    INT DAY;
    INT WEEKDAY;
    INT OFFSET;
    BOOL DST_EN;
    BOOL DST_ON;
    STRING NAME;
    INT LANGUAGE;
    REAL LONGITUDE;
    REAL LATITUDE;
    UDINT SUN_RISE;
    UDINT SUN_SET;
    UDINT SUN_MIDDAY;
    REAL SUN_HEIGTH;
    REAL SUN_HOR;
    REAL SUN_VER;
    BOOL NIGHT;
    BOOL HOLIDAY;
    STRING HOLY_NAME;
    INT WORK_WEEK;
  )
// FUNCTION_BLOCK LOGGER
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,MSG)
  __DECLARE_VAR(LOGLEVEL,LEVEL)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,TRIG0)

} LOGGER;

void LOGGER_init__(LOGGER *data__, BOOL retain);
// Code part
void LOGGER_body__(LOGGER *data__);
// FUNCTION_BLOCK PYTHON_EVAL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,CODE)
  __DECLARE_VAR(BOOL,ACK)
  __DECLARE_VAR(STRING,RESULT)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(DWORD,STATE)
  __DECLARE_VAR(STRING,BUFFER)
  __DECLARE_VAR(STRING,PREBUFFER)
  __DECLARE_VAR(BOOL,TRIGM1)
  __DECLARE_VAR(BOOL,TRIGGED)

} PYTHON_EVAL;

void PYTHON_EVAL_init__(PYTHON_EVAL *data__, BOOL retain);
// Code part
void PYTHON_EVAL_body__(PYTHON_EVAL *data__);
// FUNCTION_BLOCK PYTHON_POLL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,CODE)
  __DECLARE_VAR(BOOL,ACK)
  __DECLARE_VAR(STRING,RESULT)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(DWORD,STATE)
  __DECLARE_VAR(STRING,BUFFER)
  __DECLARE_VAR(STRING,PREBUFFER)
  __DECLARE_VAR(BOOL,TRIGM1)
  __DECLARE_VAR(BOOL,TRIGGED)

} PYTHON_POLL;

void PYTHON_POLL_init__(PYTHON_POLL *data__, BOOL retain);
// Code part
void PYTHON_POLL_body__(PYTHON_POLL *data__);
// FUNCTION_BLOCK PYTHON_GEAR
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(UINT,N)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,CODE)
  __DECLARE_VAR(BOOL,ACK)
  __DECLARE_VAR(STRING,RESULT)

  // FB private variables - TEMP, private and located variables
  PYTHON_EVAL PY_EVAL;
  __DECLARE_VAR(UINT,COUNTER)
  __DECLARE_VAR(UINT,ADD10_OUT)
  __DECLARE_VAR(BOOL,EQ13_OUT)
  __DECLARE_VAR(UINT,SEL15_OUT)
  __DECLARE_VAR(BOOL,AND7_OUT)

} PYTHON_GEAR;

void PYTHON_GEAR_init__(PYTHON_GEAR *data__, BOOL retain);
// Code part
void PYTHON_GEAR_body__(PYTHON_GEAR *data__);
// FUNCTION
DINT FLOOR2(
  BOOL EN, 
  BOOL *__ENO, 
  REAL X);
// FUNCTION
REAL MODR(
  BOOL EN, 
  BOOL *__ENO, 
  REAL IN, 
  REAL DIVI);
// FUNCTION
REAL DEG(
  BOOL EN, 
  BOOL *__ENO, 
  REAL RAD_IN);
// FUNCTION
REAL RAD(
  BOOL EN, 
  BOOL *__ENO, 
  REAL _DEG);
// FUNCTION
UDINT _DT_TO_TOD(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IN);
// FUNCTION_BLOCK BLIND_SHADE
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,DN)
  __DECLARE_VAR(BYTE,PI)
  __DECLARE_VAR(BYTE,AI)
  __DECLARE_VAR(BYTE,S_IN)
  __DECLARE_VAR(BOOL,ENABLE)
  __DECLARE_VAR(BOOL,SUN)
  __DECLARE_VAR(TIME,SUNRISE_OFFSET)
  __DECLARE_VAR(TIME,SUNSET_PRESET)
  __DECLARE_VAR(TIME,SHADE_DELAY)
  __DECLARE_VAR(BYTE,SHADE_POS)
  __DECLARE_VAR(REAL,DIRECTION)
  __DECLARE_VAR(REAL,ANGLE_OFFSET)
  __DECLARE_VAR(REAL,SLAT_WIDTH)
  __DECLARE_VAR(REAL,SLAT_SPACING)
  __DECLARE_VAR(BOOL,QU)
  __DECLARE_VAR(BOOL,QD)
  __DECLARE_VAR(BYTE,STATUS)
  __DECLARE_VAR(BYTE,PO)
  __DECLARE_VAR(BYTE,AO)
  __DECLARE_VAR(OSCAT_CALENDAR,CX)

  // FB private variables - TEMP, private and located variables
  TOF SUN_DELAY;
  __DECLARE_VAR(REAL,ANGLE)

} BLIND_SHADE;

void BLIND_SHADE_init__(BLIND_SHADE *data__, BOOL retain);
// Code part
void BLIND_SHADE_body__(BLIND_SHADE *data__);
// FUNCTION
REAL WATER_DENSITY(
  BOOL EN, 
  BOOL *__ENO, 
  REAL _T, 
  BOOL SAT);
// FUNCTION
BOOL TIMECHECK(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT TD, 
  UDINT START, 
  UDINT STOP);
// FUNCTION_BLOCK BOILER
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,T_UPPER)
  __DECLARE_VAR(REAL,T_LOWER)
  __DECLARE_VAR(BOOL,PRESSURE)
  __DECLARE_VAR(BOOL,ENABLE)
  __DECLARE_VAR(BOOL,REQ_1)
  __DECLARE_VAR(BOOL,REQ_2)
  __DECLARE_VAR(BOOL,BOOST)
  __DECLARE_VAR(REAL,T_UPPER_MIN)
  __DECLARE_VAR(REAL,T_UPPER_MAX)
  __DECLARE_VAR(BOOL,T_LOWER_ENABLE)
  __DECLARE_VAR(REAL,T_LOWER_MAX)
  __DECLARE_VAR(REAL,T_REQUEST_1)
  __DECLARE_VAR(REAL,T_REQUEST_2)
  __DECLARE_VAR(REAL,T_REQUEST_HYS)
  __DECLARE_VAR(REAL,T_PROTECT_HIGH)
  __DECLARE_VAR(REAL,T_PROTECT_LOW)
  __DECLARE_VAR(BOOL,HEAT)
  __DECLARE_VAR(BOOL,ERROR)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,EDGE)
  __DECLARE_VAR(BOOL,BOOST_MODE)
  __DECLARE_VAR(BOOL,FLAG_0)
  __DECLARE_VAR(BOOL,FLAG_1)
  __DECLARE_VAR(BOOL,FLAG_2)

} BOILER;

void BOILER_init__(BOILER *data__, BOOL retain);
// Code part
void BOILER_body__(BOILER *data__);
// FUNCTION
UDINT T_PLC_MS(
  BOOL EN, 
  BOOL *__ENO, 
  BOOL DEBUG);
// FUNCTION_BLOCK INTEGRATE
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,_E)
  __DECLARE_VAR(REAL,X)
  __DECLARE_VAR(REAL,K)
  __DECLARE_VAR(REAL,Y)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(REAL,X_LAST)
  __DECLARE_VAR(BOOL,INIT)
  __DECLARE_VAR(UDINT,LAST)
  __DECLARE_VAR(UDINT,TX)

} INTEGRATE;

void INTEGRATE_init__(INTEGRATE *data__, BOOL retain);
// Code part
void INTEGRATE_body__(INTEGRATE *data__);
// FUNCTION_BLOCK R2_ADD
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL2,X)
  __DECLARE_VAR(REAL,Y)
  __DECLARE_VAR(REAL2,_R2_ADD)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(REAL,TEMP)

} R2_ADD;

void R2_ADD_init__(R2_ADD *data__, BOOL retain);
// Code part
void R2_ADD_body__(R2_ADD *data__);
// FUNCTION_BLOCK R2_SET
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,X)
  __DECLARE_VAR(REAL2,_R2_SET)

  // FB private variables - TEMP, private and located variables

} R2_SET;

void R2_SET_init__(R2_SET *data__, BOOL retain);
// Code part
void R2_SET_body__(R2_SET *data__);
// FUNCTION_BLOCK FT_INT2
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,IN)
  __DECLARE_VAR(REAL,K)
  __DECLARE_VAR(BOOL,RUN)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(REAL,OUT_MIN)
  __DECLARE_VAR(REAL,OUT_MAX)
  __DECLARE_VAR(REAL,OUT)
  __DECLARE_VAR(BOOL,LIM)

  // FB private variables - TEMP, private and located variables
  INTEGRATE INTEG;
  __DECLARE_VAR(REAL,IX)
  __DECLARE_VAR(REAL2,VAL)
  R2_ADD _R2_ADD;
  R2_SET _R2_SET;

} FT_INT2;

void FT_INT2_init__(FT_INT2 *data__, BOOL retain);
// Code part
void FT_INT2_body__(FT_INT2 *data__);
__DECLARE_ARRAY_TYPE(__ARRAY_OF_REAL_20_2,REAL,[20][2])
// FUNCTION
REAL LINEAR_INT(
  BOOL EN, 
  BOOL *__ENO, 
  REAL X, 
  __ARRAY_OF_REAL_20_2 *__XY, 
  INT PTS);
// FUNCTION
REAL WATER_ENTHALPY(
  BOOL EN, 
  BOOL *__ENO, 
  REAL _T);
// FUNCTION_BLOCK HEAT_METER
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,TF)
  __DECLARE_VAR(REAL,TR)
  __DECLARE_VAR(REAL,LPH)
  __DECLARE_VAR(BOOL,_E)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(REAL,CP)
  __DECLARE_VAR(REAL,DENSITY)
  __DECLARE_VAR(REAL,CONTENT)
  __DECLARE_VAR(BOOL,PULSE_MODE)
  __DECLARE_VAR(BOOL,RETURN_METER)
  __DECLARE_VAR(TIME,AVG_TIME)
  __DECLARE_VAR(REAL,C)
  __DECLARE_VAR(REAL,Y)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(DWORD,TX)
  __DECLARE_VAR(DWORD,LAST)
  FT_INT2 INT1;
  __DECLARE_VAR(BOOL,EDGE)
  __DECLARE_VAR(REAL,X)
  __DECLARE_VAR(BOOL,INIT)
  __DECLARE_VAR(REAL,Y_LAST)

} HEAT_METER;

void HEAT_METER_init__(HEAT_METER *data__, BOOL retain);
// Code part
void HEAT_METER_body__(HEAT_METER *data__);
// FUNCTION_BLOCK CYCLE_4
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,_E)
  __DECLARE_VAR(TIME,T0)
  __DECLARE_VAR(TIME,T1)
  __DECLARE_VAR(TIME,T2)
  __DECLARE_VAR(TIME,T3)
  __DECLARE_VAR(BOOL,S0)
  __DECLARE_VAR(INT,SX)
  __DECLARE_VAR(BOOL,SL)
  __DECLARE_VAR(INT,STATE)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,LAST)
  __DECLARE_VAR(BOOL,INIT)

} CYCLE_4;

void CYCLE_4_init__(CYCLE_4 *data__, BOOL retain);
// Code part
void CYCLE_4_body__(CYCLE_4 *data__);
// FUNCTION
BYTE BIT_LOAD_B(
  BOOL EN, 
  BOOL *__ENO, 
  BYTE IN, 
  BOOL VAL, 
  INT POS);
// FUNCTION
REAL SDD(
  BOOL EN, 
  BOOL *__ENO, 
  REAL _T, 
  BOOL ICE);
// FUNCTION
REAL DEW_CON(
  BOOL EN, 
  BOOL *__ENO, 
  REAL RH, 
  REAL _T);
// FUNCTION
REAL DEW_RH(
  BOOL EN, 
  BOOL *__ENO, 
  REAL VC, 
  REAL _T);
// FUNCTION
REAL C_TO_F(
  BOOL EN, 
  BOOL *__ENO, 
  REAL CELSIUS);
// FUNCTION
BOOL LEAP_OF_DATE(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IDATE);
// FUNCTION
INT DAY_OF_YEAR(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IDATE);
// FUNCTION
INT DAY_OF_MONTH(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IDATE);
// FUNCTION_BLOCK INTERLOCK
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,I1)
  __DECLARE_VAR(BOOL,I2)
  __DECLARE_VAR(TIME,TL)
  __DECLARE_VAR(BOOL,Q1)
  __DECLARE_VAR(BOOL,Q2)

  // FB private variables - TEMP, private and located variables
  TOF T1;
  TOF T2;

} INTERLOCK;

void INTERLOCK_init__(INTERLOCK *data__, BOOL retain);
// Code part
void INTERLOCK_body__(INTERLOCK *data__);
// FUNCTION_BLOCK DEBOUNCE
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(TIME,TD)
  __DECLARE_VAR(BOOL,PM)
  __DECLARE_VAR(BOOL,Q)

  // FB private variables - TEMP, private and located variables
  TOF DEB;

} DEBOUNCE;

void DEBOUNCE_init__(DEBOUNCE *data__, BOOL retain);
// Code part
void DEBOUNCE_body__(DEBOUNCE *data__);
// FUNCTION_BLOCK SW_RECONFIG
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(TIME,TD)
  __DECLARE_VAR(TIME,TR)
  __DECLARE_VAR(BOOL,Q)

  // FB private variables - TEMP, private and located variables
  TON T1;
  TON T2;
  __DECLARE_VAR(BOOL,INV)

} SW_RECONFIG;

void SW_RECONFIG_init__(SW_RECONFIG *data__, BOOL retain);
// Code part
void SW_RECONFIG_body__(SW_RECONFIG *data__);
// FUNCTION_BLOCK CLICK_MODE
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(TIME,T_LONG)
  __DECLARE_VAR(BOOL,SINGLE)
  __DECLARE_VAR(BOOL,DOUBLE)
  __DECLARE_VAR(BOOL,LONG)
  __DECLARE_VAR(BOOL,TP_LONG)

  // FB private variables - TEMP, private and located variables
  TP TIMER;
  __DECLARE_VAR(INT,CNT)
  __DECLARE_VAR(BOOL,LAST)

} CLICK_MODE;

void CLICK_MODE_init__(CLICK_MODE *data__, BOOL retain);
// Code part
void CLICK_MODE_body__(CLICK_MODE *data__);
// FUNCTION
BYTE FRMP_B(
  BOOL EN, 
  BOOL *__ENO, 
  BYTE START, 
  BOOL DIR, 
  TIME TD, 
  TIME TR);
// FUNCTION_BLOCK _RMP_B
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,DIR)
  __DECLARE_VAR(BOOL,_E)
  __DECLARE_VAR(TIME,TR)
  __DECLARE_VAR(BYTE,RMP)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,TL)
  __DECLARE_VAR(TIME,TN)
  __DECLARE_VAR(BOOL,INIT)
  __DECLARE_VAR(BOOL,LAST_DIR)
  __DECLARE_VAR(BYTE,START)

} _RMP_B;

void _RMP_B_init__(_RMP_B *data__, BOOL retain);
// Code part
void _RMP_B_body__(_RMP_B *data__);
// FUNCTION_BLOCK RMP_B
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,SET)
  __DECLARE_VAR(TIME,PT)
  __DECLARE_VAR(BOOL,_E)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(BYTE,OUT)
  __DECLARE_VAR(BOOL,BUSY)
  __DECLARE_VAR(BOOL,HIGH)
  __DECLARE_VAR(BOOL,LOW)

  // FB private variables - TEMP, private and located variables
  _RMP_B RMP;

} RMP_B;

void RMP_B_init__(RMP_B *data__, BOOL retain);
// Code part
void RMP_B_body__(RMP_B *data__);
// FUNCTION_BLOCK CLICK
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(TIME,T_DEBOUNCE)
  __DECLARE_VAR(TIME,T_SHORT)
  __DECLARE_VAR(TIME,T_PAUSE)
  __DECLARE_VAR(TIME,T_RECONFIG)
  __DECLARE_VAR(BOOL,Q)
  __DECLARE_VAR(BOOL,SINGLE)
  __DECLARE_VAR(BOOL,DOUBLE)
  __DECLARE_VAR(BOOL,TRIPLE)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  SW_RECONFIG S_IN;
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(INT,STATE)
  __DECLARE_VAR(TIME,LAST)

} CLICK;

void CLICK_init__(CLICK *data__, BOOL retain);
// Code part
void CLICK_body__(CLICK *data__);
// FUNCTION_BLOCK DIMM_I
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,SET)
  __DECLARE_VAR(BYTE,VAL)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(TIME,T_DEBOUNCE)
  __DECLARE_VAR(TIME,T_RECONFIG)
  __DECLARE_VAR(TIME,T_ON_MAX)
  __DECLARE_VAR(TIME,T_DIMM_START)
  __DECLARE_VAR(TIME,T_DIMM)
  __DECLARE_VAR(BYTE,MIN_ON)
  __DECLARE_VAR(BYTE,MAX_ON)
  __DECLARE_VAR(BOOL,RST_OUT)
  __DECLARE_VAR(BOOL,SOFT_DIMM)
  __DECLARE_VAR(BOOL,DBL_TOGGLE)
  __DECLARE_VAR(BOOL,Q)
  __DECLARE_VAR(BOOL,DBL)
  __DECLARE_VAR(BYTE,OUT)

  // FB private variables - TEMP, private and located variables
  TON T3;
  SW_RECONFIG CONFIG;
  CLICK_MODE DECODE;
  _RMP_B DIM;
  __DECLARE_VAR(BOOL,DIR)

} DIMM_I;

void DIMM_I_init__(DIMM_I *data__, BOOL retain);
// Code part
void DIMM_I_body__(DIMM_I *data__);
// FUNCTION
UDINT YEAR_END(
  BOOL EN, 
  BOOL *__ENO, 
  INT Y);
// FUNCTION
BOOL LEAP_DAY(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IDATE);
// FUNCTION
INT DAY_OF_WEEK(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IDATE);
// FUNCTION
UDINT _DT_TO_DATE(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IN);
// FUNCTION
INT YEAR_OF_DATE(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IDATE);
// FUNCTION
BOOL BIT_OF_DWORD(
  BOOL EN, 
  BOOL *__ENO, 
  DWORD IN, 
  INT N);
// FUNCTION
UDINT DATE_TO_DT(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IN);
// FUNCTION
INT MONTH_OF_DATE(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IDATE);
// FUNCTION
UDINT SET_DATE(
  BOOL EN, 
  BOOL *__ENO, 
  INT YEAR, 
  INT MONTH, 
  INT DAY);
// FUNCTION
UDINT MONTH_END(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IDATE);
__DECLARE_ARRAY_TYPE(__ARRAY_OF_TIMER_EVENT_64,TIMER_EVENT,[64])
__DECLARE_ARRAY_TYPE(__ARRAY_OF_BYTE_4,BYTE,[4])
__DECLARE_ARRAY_TYPE(__ARRAY_OF_BOOL_4,BOOL,[4])
// FUNCTION_BLOCK TIMER_P4
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(UDINT,DTIME)
  __DECLARE_VAR(UDINT,TREF_0)
  __DECLARE_VAR(UDINT,TREF_1)
  __DECLARE_VAR(BOOL,HOLY)
  __DECLARE_VAR(BOOL,L0)
  __DECLARE_VAR(BOOL,L1)
  __DECLARE_VAR(BOOL,L2)
  __DECLARE_VAR(BOOL,L3)
  __DECLARE_VAR(BYTE,OFS)
  __DECLARE_VAR(BOOL,ENQ)
  __DECLARE_VAR(BOOL,MAN)
  __DECLARE_VAR(BYTE,MI)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(__ARRAY_OF_TIMER_EVENT_64,PROG)
  __DECLARE_VAR(BOOL,Q0)
  __DECLARE_VAR(BOOL,Q1)
  __DECLARE_VAR(BOOL,Q2)
  __DECLARE_VAR(BOOL,Q3)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(UDINT,DAY_START)
  __DECLARE_VAR(UDINT,START)
  __DECLARE_VAR(TIMER_EVENT,EVENT)
  __DECLARE_VAR(INT,POS)
  __DECLARE_VAR(UDINT,LAST_EXECUTE)
  __DECLARE_VAR(DINT,CURRENT_DAY)
  __DECLARE_VAR(BYTE,MASK)
  __DECLARE_VAR(__ARRAY_OF_BYTE_4,MA)
  __DECLARE_VAR(__ARRAY_OF_BYTE_4,MO)
  __DECLARE_VAR(__ARRAY_OF_BOOL_4,QN)
  __DECLARE_VAR(__ARRAY_OF_BOOL_4,QS)
  __DECLARE_VAR(INT,CHANNEL)
  __DECLARE_VAR(UDINT,TX)
  __DECLARE_VAR(INT,ARRAY_MAX)
  __DECLARE_VAR(INT,CHANNEL_MAX)

} TIMER_P4;

void TIMER_P4_init__(TIMER_P4 *data__, BOOL retain);
// Code part
void TIMER_P4_body__(TIMER_P4 *data__);
// FUNCTION_BLOCK DIMM_2
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,SET)
  __DECLARE_VAR(BYTE,VAL)
  __DECLARE_VAR(BOOL,I1)
  __DECLARE_VAR(BOOL,I2)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(TIME,T_DEBOUNCE)
  __DECLARE_VAR(TIME,T_ON_MAX)
  __DECLARE_VAR(TIME,T_DIMM_START)
  __DECLARE_VAR(TIME,T_DIMM)
  __DECLARE_VAR(BYTE,MIN_ON)
  __DECLARE_VAR(BYTE,MAX_ON)
  __DECLARE_VAR(BOOL,RST_OUT)
  __DECLARE_VAR(BOOL,SOFT_DIMM)
  __DECLARE_VAR(BOOL,DBL1_TOG)
  __DECLARE_VAR(BOOL,DBL2_TOG)
  __DECLARE_VAR(BOOL,DBL1_SET)
  __DECLARE_VAR(BOOL,DBL2_SET)
  __DECLARE_VAR(BYTE,DBL1_POS)
  __DECLARE_VAR(BYTE,DBL2_POS)
  __DECLARE_VAR(BOOL,Q)
  __DECLARE_VAR(BOOL,D1)
  __DECLARE_VAR(BOOL,D2)
  __DECLARE_VAR(BYTE,OUT)

  // FB private variables - TEMP, private and located variables
  TOF T1;
  TOF T2;
  TON T3;
  CLICK_MODE DC1;
  CLICK_MODE DC2;
  _RMP_B DIM;

} DIMM_2;

void DIMM_2_init__(DIMM_2 *data__, BOOL retain);
// Code part
void DIMM_2_body__(DIMM_2 *data__);
// FUNCTION
UDINT DT_TO_DATE_2(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IN);
// FUNCTION_BLOCK ONTIME
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(UDINT,SECONDS)
  __DECLARE_VAR(UDINT,CYCLES)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(UDINT,TX)
  __DECLARE_VAR(UDINT,LAST)
  __DECLARE_VAR(BOOL,EDGE)
  __DECLARE_VAR(BOOL,INIT)
  __DECLARE_VAR(UDINT,MS)

} ONTIME;

void ONTIME_init__(ONTIME *data__, BOOL retain);
// Code part
void ONTIME_body__(ONTIME *data__);
// FUNCTION_BLOCK ACTUATOR_PUMP
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(BOOL,MANUAL)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(TIME,MIN_ONTIME)
  __DECLARE_VAR(TIME,MIN_OFFTIME)
  __DECLARE_VAR(TIME,RUN_EVERY)
  __DECLARE_VAR(BOOL,PUMP)
  __DECLARE_VAR(UDINT,RUNTIME)
  __DECLARE_VAR(UDINT,CYCLES)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,LAST_CHANGE)
  ONTIME METER;
  __DECLARE_VAR(BOOL,OLD_MAN)
  __DECLARE_VAR(BOOL,INIT)

} ACTUATOR_PUMP;

void ACTUATOR_PUMP_init__(ACTUATOR_PUMP *data__, BOOL retain);
// Code part
void ACTUATOR_PUMP_body__(ACTUATOR_PUMP *data__);
// FUNCTION
TIME TOD_TO_TIME(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IN);
// FUNCTION_BLOCK ACTUATOR_COIL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(TIME,SELF_ACT_CYCLE)
  __DECLARE_VAR(TIME,SELF_ACT_TIME)
  __DECLARE_VAR(BOOL,OUT)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(UDINT,LAST)
  __DECLARE_VAR(BOOL,INIT)
  __DECLARE_VAR(UDINT,TX)
  __DECLARE_VAR(UDINT,NOW)

} ACTUATOR_COIL;

void ACTUATOR_COIL_init__(ACTUATOR_COIL *data__, BOOL retain);
// Code part
void ACTUATOR_COIL_body__(ACTUATOR_COIL *data__);
// FUNCTION_BLOCK TONOF
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(TIME,T_ON)
  __DECLARE_VAR(TIME,T_OFF)
  __DECLARE_VAR(BOOL,Q)

  // FB private variables - TEMP, private and located variables
  TON X;
  __DECLARE_VAR(BOOL,OLD)
  __DECLARE_VAR(BOOL,MODE)

} TONOF;

void TONOF_init__(TONOF *data__, BOOL retain);
// Code part
void TONOF_body__(TONOF *data__);
// FUNCTION_BLOCK TANK_LEVEL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,LEVEL)
  __DECLARE_VAR(BOOL,LEAK)
  __DECLARE_VAR(BOOL,ACLR)
  __DECLARE_VAR(TIME,MAX_VALVE_TIME)
  __DECLARE_VAR(TIME,LEVEL_DELAY_TIME)
  __DECLARE_VAR(BOOL,VALVE)
  __DECLARE_VAR(BOOL,ALARM)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  ACTUATOR_COIL CX;
  TON TN;
  TONOF TL;
  __DECLARE_VAR(BOOL,OPEN)

} TANK_LEVEL;

void TANK_LEVEL_init__(TANK_LEVEL *data__, BOOL retain);
// Code part
void TANK_LEVEL_body__(TANK_LEVEL *data__);
// FUNCTION_BLOCK BLIND_ACTUATOR
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,DN)
  __DECLARE_VAR(BYTE,S_IN)
  __DECLARE_VAR(TIME,T_UD)
  __DECLARE_VAR(TIME,T_ANGLE)
  __DECLARE_VAR(TIME,T_LOCKOUT)
  __DECLARE_VAR(BYTE,POS)
  __DECLARE_VAR(BYTE,ANG)
  __DECLARE_VAR(BOOL,QU)
  __DECLARE_VAR(BOOL,QD)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  RMP_B POSITION;
  RMP_B ANGLE;
  INTERLOCK LOCK;

} BLIND_ACTUATOR;

void BLIND_ACTUATOR_init__(BLIND_ACTUATOR *data__, BOOL retain);
// Code part
void BLIND_ACTUATOR_body__(BLIND_ACTUATOR *data__);
// FUNCTION_BLOCK MANUAL_2
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(BOOL,ENA)
  __DECLARE_VAR(BOOL,_ON)
  __DECLARE_VAR(BOOL,OFF)
  __DECLARE_VAR(BOOL,MAN)
  __DECLARE_VAR(BOOL,Q)
  __DECLARE_VAR(BYTE,STATUS)
  __DECLARE_VAR(BYTE,STATUS0)

  // FB private variables - TEMP, private and located variables

} MANUAL_2;

void MANUAL_2_init__(MANUAL_2 *data__, BOOL retain);
// Code part
void MANUAL_2_body__(MANUAL_2 *data__);
// FUNCTION_BLOCK TIMER_EXT
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,ENA)
  __DECLARE_VAR(BOOL,_ON)
  __DECLARE_VAR(BOOL,OFF)
  __DECLARE_VAR(BOOL,MAN)
  __DECLARE_VAR(BOOL,SWITCH)
  __DECLARE_VAR(UDINT,DT_IN)
  __DECLARE_VAR(UDINT,SUN_SET)
  __DECLARE_VAR(UDINT,SUN_RISE)
  __DECLARE_VAR(BOOL,HOLIDAY)
  __DECLARE_VAR(TIME,T_DEBOUNCE)
  __DECLARE_VAR(TIME,T_RISE_START)
  __DECLARE_VAR(TIME,T_RISE_STOP)
  __DECLARE_VAR(TIME,T_SET_START)
  __DECLARE_VAR(TIME,T_SET_STOP)
  __DECLARE_VAR(UDINT,T_DAY_START)
  __DECLARE_VAR(UDINT,T_DAY_STOP)
  __DECLARE_VAR(BOOL,ENABLE_SATURDAY)
  __DECLARE_VAR(BOOL,ENABLE_SUNDAY)
  __DECLARE_VAR(BOOL,ENABLE_HOLIDAY)
  __DECLARE_VAR(BOOL,Q)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  MANUAL_2 MX;
  DEBOUNCE DEB;
  __DECLARE_VAR(UDINT,TDX)
  __DECLARE_VAR(INT,WDX)
  __DECLARE_VAR(TIME,TC)
  __DECLARE_VAR(UDINT,TX)
  __DECLARE_VAR(UDINT,TL)
  __DECLARE_VAR(BOOL,QX)
  __DECLARE_VAR(BOOL,INIT)

} TIMER_EXT;

void TIMER_EXT_init__(TIMER_EXT *data__, BOOL retain);
// Code part
void TIMER_EXT_body__(TIMER_EXT *data__);
// FUNCTION
REAL MID3(
  BOOL EN, 
  BOOL *__ENO, 
  REAL IN1, 
  REAL IN2, 
  REAL IN3);
// FUNCTION
REAL MULTI_IN(
  BOOL EN, 
  BOOL *__ENO, 
  REAL IN_1, 
  REAL IN_2, 
  REAL IN_3, 
  REAL DEFAULT, 
  REAL IN_MIN, 
  REAL IN_MAX, 
  BYTE MODE);
// FUNCTION_BLOCK BLIND_NIGHT
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,DN)
  __DECLARE_VAR(BYTE,S_IN)
  __DECLARE_VAR(BYTE,PI)
  __DECLARE_VAR(BYTE,AI)
  __DECLARE_VAR(BOOL,E_NIGHT)
  __DECLARE_VAR(BOOL,E_DAY)
  __DECLARE_VAR(UDINT,DTIN)
  __DECLARE_VAR(UDINT,SUNRISE)
  __DECLARE_VAR(UDINT,SUNSET)
  __DECLARE_VAR(TIME,SUNRISE_OFFSET)
  __DECLARE_VAR(TIME,SUNSET_OFFSET)
  __DECLARE_VAR(BYTE,NIGHT_POSITION)
  __DECLARE_VAR(BYTE,NIGHT_ANGLE)
  __DECLARE_VAR(BOOL,QU)
  __DECLARE_VAR(BOOL,QD)
  __DECLARE_VAR(BYTE,STATUS)
  __DECLARE_VAR(BYTE,PO)
  __DECLARE_VAR(BYTE,AO)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,NIGHT)
  __DECLARE_VAR(UDINT,LAST_NIGHT)
  __DECLARE_VAR(UDINT,LAST_DAY)

} BLIND_NIGHT;

void BLIND_NIGHT_init__(BLIND_NIGHT *data__, BOOL retain);
// Code part
void BLIND_NIGHT_body__(BLIND_NIGHT *data__);
// FUNCTION_BLOCK BLIND_SECURITY
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,DN)
  __DECLARE_VAR(BYTE,S_IN)
  __DECLARE_VAR(BYTE,PI)
  __DECLARE_VAR(BYTE,AI)
  __DECLARE_VAR(BOOL,FIRE)
  __DECLARE_VAR(BOOL,WIND)
  __DECLARE_VAR(BOOL,ALARM)
  __DECLARE_VAR(BOOL,DOOR)
  __DECLARE_VAR(BOOL,RAIN)
  __DECLARE_VAR(BOOL,ALARM_UP)
  __DECLARE_VAR(BOOL,WIND_UP)
  __DECLARE_VAR(BOOL,RAIN_UP)
  __DECLARE_VAR(BOOL,QU)
  __DECLARE_VAR(BOOL,QD)
  __DECLARE_VAR(BYTE,STATUS)
  __DECLARE_VAR(BYTE,PO)
  __DECLARE_VAR(BYTE,AO)

  // FB private variables - TEMP, private and located variables

} BLIND_SECURITY;

void BLIND_SECURITY_init__(BLIND_SECURITY *data__, BOOL retain);
// Code part
void BLIND_SECURITY_body__(BLIND_SECURITY *data__);
// FUNCTION
UDINT TIME_TO_TOD(
  BOOL EN, 
  BOOL *__ENO, 
  TIME IN);
// FUNCTION
REAL WATER_CP(
  BOOL EN, 
  BOOL *__ENO, 
  REAL _T);
// FUNCTION
REAL AIR_DENSITY(
  BOOL EN, 
  BOOL *__ENO, 
  REAL _T, 
  REAL P, 
  REAL RH);
// FUNCTION_BLOCK TREND_DW
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(DWORD,X)
  __DECLARE_VAR(BOOL,Q)
  __DECLARE_VAR(BOOL,TU)
  __DECLARE_VAR(BOOL,TD)
  __DECLARE_VAR(DWORD,_D)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(DWORD,LAST_X)

} TREND_DW;

void TREND_DW_init__(TREND_DW *data__, BOOL retain);
// Code part
void TREND_DW_body__(TREND_DW *data__);
// FUNCTION_BLOCK _RMP_NEXT
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,_E)
  __DECLARE_VAR(BYTE,IN)
  __DECLARE_VAR(TIME,TR)
  __DECLARE_VAR(TIME,TF)
  __DECLARE_VAR(TIME,TL)
  __DECLARE_VAR(BOOL,DIR)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,DN)
  __DECLARE_VAR(BYTE,OUT)

  // FB private variables - TEMP, private and located variables
  _RMP_B RMX;
  TREND_DW DIRX;
  TP T_LOCK;
  __DECLARE_VAR(BOOL,XEN)
  __DECLARE_VAR(BOOL,XDIR)

} _RMP_NEXT;

void _RMP_NEXT_init__(_RMP_NEXT *data__, BOOL retain);
// Code part
void _RMP_NEXT_body__(_RMP_NEXT *data__);
// FUNCTION_BLOCK BLIND_CONTROL_S
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,DN)
  __DECLARE_VAR(BYTE,S_IN)
  __DECLARE_VAR(BYTE,PI)
  __DECLARE_VAR(TIME,T_UP)
  __DECLARE_VAR(TIME,T_DN)
  __DECLARE_VAR(BOOL,RU)
  __DECLARE_VAR(BOOL,RD)
  __DECLARE_VAR(TIME,T_LOCKOUT)
  __DECLARE_VAR(TIME,T_EXT)
  __DECLARE_VAR(BYTE,EXT_TRIG)
  __DECLARE_VAR(BYTE,R_POS_TOP)
  __DECLARE_VAR(BYTE,R_POS_BOT)
  __DECLARE_VAR(BYTE,POS)
  __DECLARE_VAR(BOOL,MU)
  __DECLARE_VAR(BOOL,MD)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  _RMP_NEXT RMP;
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,LAST)
  __DECLARE_VAR(BYTE,PI_LAST)

} BLIND_CONTROL_S;

void BLIND_CONTROL_S_init__(BLIND_CONTROL_S *data__, BOOL retain);
// Code part
void BLIND_CONTROL_S_body__(BLIND_CONTROL_S *data__);
// FUNCTION_BLOCK HYST_1
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,IN)
  __DECLARE_VAR(REAL,HIGH)
  __DECLARE_VAR(REAL,LOW)
  __DECLARE_VAR(BOOL,Q)
  __DECLARE_VAR(BOOL,WIN)

  // FB private variables - TEMP, private and located variables

} HYST_1;

void HYST_1_init__(HYST_1 *data__, BOOL retain);
// Code part
void HYST_1_body__(HYST_1 *data__);
// FUNCTION_BLOCK TIMER_1
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,_E)
  __DECLARE_VAR(UDINT,DTI)
  __DECLARE_VAR(UDINT,START)
  __DECLARE_VAR(TIME,DURATION)
  __DECLARE_VAR(BYTE,DAY)
  __DECLARE_VAR(BOOL,Q)
  __DECLARE_VAR(TIME,STOP)

  // FB private variables - TEMP, private and located variables

} TIMER_1;

void TIMER_1_init__(TIMER_1 *data__, BOOL retain);
// Code part
void TIMER_1_body__(TIMER_1 *data__);
// FUNCTION_BLOCK TIMER_2
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(UDINT,DT_IN)
  __DECLARE_VAR(UDINT,START)
  __DECLARE_VAR(TIME,DURATION)
  __DECLARE_VAR(BYTE,MODE)
  __DECLARE_VAR(BOOL,HOLIDAY)
  __DECLARE_VAR(BOOL,Q)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,LAST_CHECK)
  __DECLARE_VAR(UDINT,DAT)
  __DECLARE_VAR(UDINT,DAYTIME)
  __DECLARE_VAR(TIME,ACTIVATION)
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(BOOL,ENABLED)
  __DECLARE_VAR(INT,WDAY)
  __DECLARE_VAR(BOOL,INIT)
  __DECLARE_VAR(UDINT,RUN_DATE)

} TIMER_2;

void TIMER_2_init__(TIMER_2 *data__, BOOL retain);
// Code part
void TIMER_2_body__(TIMER_2 *data__);
// FUNCTION
REAL CIRCLE_SEG(
  BOOL EN, 
  BOOL *__ENO, 
  REAL RX, 
  REAL HX);
// FUNCTION
BYTE BAND_B(
  BOOL EN, 
  BOOL *__ENO, 
  BYTE X, 
  BYTE B);
// FUNCTION_BLOCK BLIND_SET
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,DN)
  __DECLARE_VAR(BYTE,S_IN)
  __DECLARE_VAR(BYTE,PI)
  __DECLARE_VAR(BYTE,AI)
  __DECLARE_VAR(BYTE,PX)
  __DECLARE_VAR(BYTE,AX)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(BOOL,OVERRIDE_MANUAL)
  __DECLARE_VAR(BOOL,RESTORE_POSITION)
  __DECLARE_VAR(TIME,RESTORE_TIME)
  __DECLARE_VAR(BOOL,QU)
  __DECLARE_VAR(BOOL,QD)
  __DECLARE_VAR(BYTE,STATUS)
  __DECLARE_VAR(BYTE,PO)
  __DECLARE_VAR(BYTE,AO)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,LAST)
  __DECLARE_VAR(BYTE,PS)
  __DECLARE_VAR(BYTE,AS)

} BLIND_SET;

void BLIND_SET_init__(BLIND_SET *data__, BOOL retain);
// Code part
void BLIND_SET_body__(BLIND_SET *data__);
// FUNCTION
REAL EXP10(
  BOOL EN, 
  BOOL *__ENO, 
  REAL X);
// FUNCTION
REAL DEW_TEMP(
  BOOL EN, 
  BOOL *__ENO, 
  REAL RH, 
  REAL _T);
// FUNCTION
REAL SDT_NH3(
  BOOL EN, 
  BOOL *__ENO, 
  REAL P);
// FUNCTION
REAL F_TO_C(
  BOOL EN, 
  BOOL *__ENO, 
  REAL FAHRENHEIT);
// FUNCTION
REAL HEAT_INDEX(
  BOOL EN, 
  BOOL *__ENO, 
  REAL _T, 
  REAL RH);
// FUNCTION_BLOCK AUTORUN
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(BOOL,TEST)
  __DECLARE_VAR(BOOL,ARE)
  __DECLARE_VAR(TIME,TRUN)
  __DECLARE_VAR(TIME,TOFF)
  __DECLARE_VAR(BOOL,OUT)
  __DECLARE_VAR(BOOL,ARO)
  __DECLARE_VAR(BOOL,ARX)

  // FB private variables - TEMP, private and located variables
  _RMP_B TIMER;
  __DECLARE_VAR(BYTE,VAL)

} AUTORUN;

void AUTORUN_init__(AUTORUN *data__, BOOL retain);
// Code part
void AUTORUN_body__(AUTORUN *data__);
// FUNCTION_BLOCK BLIND_SHADE_S
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,DN)
  __DECLARE_VAR(BYTE,PI)
  __DECLARE_VAR(BYTE,S_IN)
  __DECLARE_VAR(BOOL,ENABLE)
  __DECLARE_VAR(BOOL,SUN)
  __DECLARE_VAR(REAL,HORZ1)
  __DECLARE_VAR(REAL,HORZ2)
  __DECLARE_VAR(REAL,VERT)
  __DECLARE_VAR(BOOL,ALERT)
  __DECLARE_VAR(TIME,SUNRISE_OFFSET)
  __DECLARE_VAR(TIME,SUNSET_PRESET)
  __DECLARE_VAR(TIME,SHADE_DELAY)
  __DECLARE_VAR(BYTE,SHADE_POS)
  __DECLARE_VAR(BOOL,QU)
  __DECLARE_VAR(BOOL,QD)
  __DECLARE_VAR(BYTE,STATUS)
  __DECLARE_VAR(BYTE,PO)
  __DECLARE_VAR(OSCAT_CALENDAR,CX)

  // FB private variables - TEMP, private and located variables
  TOF SUN_DELAY;

} BLIND_SHADE_S;

void BLIND_SHADE_S_init__(BLIND_SHADE_S *data__, BOOL retain);
// Code part
void BLIND_SHADE_S_body__(BLIND_SHADE_S *data__);
// FUNCTION_BLOCK SEQUENCE_8
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN0)
  __DECLARE_VAR(BOOL,IN1)
  __DECLARE_VAR(BOOL,IN2)
  __DECLARE_VAR(BOOL,IN3)
  __DECLARE_VAR(BOOL,IN4)
  __DECLARE_VAR(BOOL,IN5)
  __DECLARE_VAR(BOOL,IN6)
  __DECLARE_VAR(BOOL,IN7)
  __DECLARE_VAR(BOOL,START)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(TIME,WAIT0)
  __DECLARE_VAR(TIME,DELAY0)
  __DECLARE_VAR(TIME,WAIT1)
  __DECLARE_VAR(TIME,DELAY1)
  __DECLARE_VAR(TIME,WAIT2)
  __DECLARE_VAR(TIME,DELAY2)
  __DECLARE_VAR(TIME,WAIT3)
  __DECLARE_VAR(TIME,DELAY3)
  __DECLARE_VAR(TIME,WAIT4)
  __DECLARE_VAR(TIME,DELAY4)
  __DECLARE_VAR(TIME,WAIT5)
  __DECLARE_VAR(TIME,DELAY5)
  __DECLARE_VAR(TIME,WAIT6)
  __DECLARE_VAR(TIME,DELAY6)
  __DECLARE_VAR(TIME,WAIT7)
  __DECLARE_VAR(TIME,DELAY7)
  __DECLARE_VAR(BOOL,STOP_ON_ERROR)
  __DECLARE_VAR(BOOL,Q0)
  __DECLARE_VAR(BOOL,Q1)
  __DECLARE_VAR(BOOL,Q2)
  __DECLARE_VAR(BOOL,Q3)
  __DECLARE_VAR(BOOL,Q4)
  __DECLARE_VAR(BOOL,Q5)
  __DECLARE_VAR(BOOL,Q6)
  __DECLARE_VAR(BOOL,Q7)
  __DECLARE_VAR(BOOL,QX)
  __DECLARE_VAR(BOOL,RUN)
  __DECLARE_VAR(INT,_STEP)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,LAST)
  __DECLARE_VAR(BOOL,EDGE)
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(BOOL,INIT)

} SEQUENCE_8;

void SEQUENCE_8_init__(SEQUENCE_8 *data__, BOOL retain);
// Code part
void SEQUENCE_8_body__(SEQUENCE_8 *data__);
// FUNCTION_BLOCK LEGIONELLA
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,MANUAL)
  __DECLARE_VAR(REAL,TEMP_BOILER)
  __DECLARE_VAR(REAL,TEMP_RETURN)
  __DECLARE_VAR(UDINT,DT_IN)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(UDINT,T_START)
  __DECLARE_VAR(INT,DAY)
  __DECLARE_VAR(REAL,TEMP_SET)
  __DECLARE_VAR(REAL,TEMP_OFFSET)
  __DECLARE_VAR(REAL,TEMP_HYS)
  __DECLARE_VAR(TIME,T_MAX_HEAT)
  __DECLARE_VAR(TIME,T_MAX_RET)
  __DECLARE_VAR(TIME,TP_0)
  __DECLARE_VAR(TIME,TP_1)
  __DECLARE_VAR(TIME,TP_2)
  __DECLARE_VAR(TIME,TP_3)
  __DECLARE_VAR(TIME,TP_4)
  __DECLARE_VAR(TIME,TP_5)
  __DECLARE_VAR(TIME,TP_6)
  __DECLARE_VAR(TIME,TP_7)
  __DECLARE_VAR(BOOL,HEAT)
  __DECLARE_VAR(BOOL,PUMP)
  __DECLARE_VAR(BOOL,VALVE0)
  __DECLARE_VAR(BOOL,VALVE1)
  __DECLARE_VAR(BOOL,VALVE2)
  __DECLARE_VAR(BOOL,VALVE3)
  __DECLARE_VAR(BOOL,VALVE4)
  __DECLARE_VAR(BOOL,VALVE5)
  __DECLARE_VAR(BOOL,VALVE6)
  __DECLARE_VAR(BOOL,VALVE7)
  __DECLARE_VAR(BOOL,RUN)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  TIMER_1 X1;
  SEQUENCE_8 X2;
  HYST_1 X3;
  __DECLARE_VAR(BOOL,INIT)

} LEGIONELLA;

void LEGIONELLA_init__(LEGIONELLA *data__, BOOL retain);
// Code part
void LEGIONELLA_body__(LEGIONELLA *data__);
// FUNCTION_BLOCK BURNER
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(BOOL,STAGE2)
  __DECLARE_VAR(BOOL,OVER_TEMP)
  __DECLARE_VAR(BOOL,OIL_TEMP)
  __DECLARE_VAR(BOOL,FLAME)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(BOOL,RST_TIMER)
  __DECLARE_VAR(TIME,PRE_HEAT_TIME)
  __DECLARE_VAR(TIME,PRE_VENT_TIME)
  __DECLARE_VAR(TIME,PRE_IGNITE_TIME)
  __DECLARE_VAR(TIME,POST_IGNITE_TIME)
  __DECLARE_VAR(TIME,STAGE2_DELAY)
  __DECLARE_VAR(TIME,SAFETY_TIME)
  __DECLARE_VAR(TIME,LOCKOUT_TIME)
  __DECLARE_VAR(BOOL,MULTIPLE_IGNITION)
  __DECLARE_VAR(REAL,KW1)
  __DECLARE_VAR(REAL,KW2)
  __DECLARE_VAR(BOOL,MOTOR)
  __DECLARE_VAR(BOOL,COIL1)
  __DECLARE_VAR(BOOL,COIL2)
  __DECLARE_VAR(BOOL,PRE_HEAT)
  __DECLARE_VAR(BOOL,IGNITE)
  __DECLARE_VAR(BOOL,FAIL)
  __DECLARE_VAR(REAL,KWH)
  __DECLARE_VAR(BYTE,STATUS)
  __DECLARE_VAR(UDINT,RUNTIME1)
  __DECLARE_VAR(UDINT,RUNTIME2)
  __DECLARE_VAR(UDINT,CYCLES)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(INT,STATE)
  __DECLARE_VAR(TIME,LAST)
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,LAST_CHANGE)
  ONTIME TIMER1;
  ONTIME TIMER2;
  __DECLARE_VAR(BOOL,OIL_TEMP_LAST)
  __DECLARE_VAR(UDINT,CYCLES2)

} BURNER;

void BURNER_init__(BURNER *data__, BOOL retain);
// Code part
void BURNER_body__(BURNER *data__);
// FUNCTION_BLOCK ACTUATOR_A
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BYTE,I1)
  __DECLARE_VAR(BYTE,I2)
  __DECLARE_VAR(BOOL,IS)
  __DECLARE_VAR(BOOL,RV)
  __DECLARE_VAR(BOOL,DX)
  __DECLARE_VAR(TIME,RUNTIME)
  __DECLARE_VAR(TIME,SELF_ACT_TIME)
  __DECLARE_VAR(DWORD,OUT_MIN)
  __DECLARE_VAR(DWORD,OUT_MAX)
  __DECLARE_VAR(DWORD,Y)

  // FB private variables - TEMP, private and located variables
  CYCLE_4 TIMER;
  __DECLARE_VAR(BOOL,DX_EDGE)

} ACTUATOR_A;

void ACTUATOR_A_init__(ACTUATOR_A *data__, BOOL retain);
// Code part
void ACTUATOR_A_body__(ACTUATOR_A *data__);
// FUNCTION_BLOCK BLIND_CONTROL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,DN)
  __DECLARE_VAR(BYTE,S_IN)
  __DECLARE_VAR(BYTE,PI)
  __DECLARE_VAR(BYTE,AI)
  __DECLARE_VAR(TIME,T_UD)
  __DECLARE_VAR(TIME,T_ANGLE)
  __DECLARE_VAR(TIME,T_LOCKOUT)
  __DECLARE_VAR(BYTE,SENS)
  __DECLARE_VAR(BYTE,POS)
  __DECLARE_VAR(BYTE,ANG)
  __DECLARE_VAR(BOOL,MU)
  __DECLARE_VAR(BOOL,MD)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  BLIND_ACTUATOR ACT;
  __DECLARE_VAR(BYTE,DELTA)
  __DECLARE_VAR(BYTE,IPOS)
  __DECLARE_VAR(BYTE,IANGEL)
  __DECLARE_VAR(BOOL,BTIMETEST)

} BLIND_CONTROL;

void BLIND_CONTROL_init__(BLIND_CONTROL *data__, BOOL retain);
// Code part
void BLIND_CONTROL_body__(BLIND_CONTROL *data__);
// FUNCTION_BLOCK BLIND_INPUT
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BYTE,POS)
  __DECLARE_VAR(BYTE,ANG)
  __DECLARE_VAR(BOOL,S1)
  __DECLARE_VAR(BOOL,S2)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(BYTE,PI)
  __DECLARE_VAR(BYTE,AI)
  __DECLARE_VAR(BOOL,SINGLE_SWITCH)
  __DECLARE_VAR(BOOL,CLICK_EN)
  __DECLARE_VAR(TIME,CLICK_TIME)
  __DECLARE_VAR(TIME,MAX_RUNTIME)
  __DECLARE_VAR(TIME,MANUAL_TIMEOUT)
  __DECLARE_VAR(TIME,DEBOUNCE_TIME)
  __DECLARE_VAR(BOOL,DBL_CLK1)
  __DECLARE_VAR(BYTE,DBL_POS1)
  __DECLARE_VAR(BYTE,DBL_ANG1)
  __DECLARE_VAR(BOOL,DBL_CLK2)
  __DECLARE_VAR(BYTE,DBL_POS2)
  __DECLARE_VAR(BYTE,DBL_ANG2)
  __DECLARE_VAR(BOOL,D1_TOGGLE)
  __DECLARE_VAR(BOOL,D2_TOGGLE)
  __DECLARE_VAR(BOOL,MASTER_MODE)
  __DECLARE_VAR(BOOL,QU)
  __DECLARE_VAR(BOOL,QD)
  __DECLARE_VAR(BYTE,STATUS)
  __DECLARE_VAR(BYTE,PO)
  __DECLARE_VAR(BYTE,AO)
  __DECLARE_VAR(BOOL,D1)
  __DECLARE_VAR(BOOL,D2)

  // FB private variables - TEMP, private and located variables
  TOF S1E;
  TOF S2E;
  CLICK_MODE S1D;
  CLICK_MODE S2D;
  __DECLARE_VAR(BOOL,DIR)
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,LAST)

} BLIND_INPUT;

void BLIND_INPUT_init__(BLIND_INPUT *data__, BOOL retain);
// Code part
void BLIND_INPUT_body__(BLIND_INPUT *data__);
// FUNCTION_BLOCK SWITCH_I
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,SET)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(TIME,T_DEBOUNCE)
  __DECLARE_VAR(TIME,T_RECONFIG)
  __DECLARE_VAR(TIME,T_ON_MAX)
  __DECLARE_VAR(BOOL,Q)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BYTE,STATE)
  __DECLARE_VAR(BOOL,EDGE)
  __DECLARE_VAR(BOOL,_R_EDGE)
  __DECLARE_VAR(TIME,T_ON)
  __DECLARE_VAR(TIME,TX)

} SWITCH_I;

void SWITCH_I_init__(SWITCH_I *data__, BOOL retain);
// Code part
void SWITCH_I_body__(SWITCH_I *data__);
// FUNCTION_BLOCK PULSE_T
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(TIME,T1)
  __DECLARE_VAR(TIME,T2)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(BOOL,Q)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,INIT)
  __DECLARE_VAR(TIME,LAST)
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(BOOL,EDGE)

} PULSE_T;

void PULSE_T_init__(PULSE_T *data__, BOOL retain);
// Code part
void PULSE_T_body__(PULSE_T *data__);
// FUNCTION
REAL AIR_ENTHALPY(
  BOOL EN, 
  BOOL *__ENO, 
  REAL _T, 
  REAL RH);
// FUNCTION_BLOCK PULSE_LENGTH
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN)
  __DECLARE_VAR(TIME,T_SHORT)
  __DECLARE_VAR(TIME,T_LONG)
  __DECLARE_VAR(BOOL,SHORT)
  __DECLARE_VAR(BOOL,MIDDLE)
  __DECLARE_VAR(BOOL,LONG)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,TN)
  __DECLARE_VAR(BOOL,EDGE)

} PULSE_LENGTH;

void PULSE_LENGTH_init__(PULSE_LENGTH *data__, BOOL retain);
// Code part
void PULSE_LENGTH_body__(PULSE_LENGTH *data__);
// FUNCTION_BLOCK SWITCH_X
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,IN1)
  __DECLARE_VAR(BOOL,IN2)
  __DECLARE_VAR(BOOL,IN3)
  __DECLARE_VAR(BOOL,IN4)
  __DECLARE_VAR(BOOL,IN5)
  __DECLARE_VAR(BOOL,IN6)
  __DECLARE_VAR(TIME,T_DEBOUNCE)
  __DECLARE_VAR(BOOL,Q1)
  __DECLARE_VAR(BOOL,Q2)
  __DECLARE_VAR(BOOL,Q3)
  __DECLARE_VAR(BOOL,Q4)
  __DECLARE_VAR(BOOL,Q5)
  __DECLARE_VAR(BOOL,Q6)
  __DECLARE_VAR(BOOL,Q31)
  __DECLARE_VAR(BOOL,Q41)
  __DECLARE_VAR(BOOL,Q51)
  __DECLARE_VAR(BOOL,Q61)
  __DECLARE_VAR(BOOL,Q32)
  __DECLARE_VAR(BOOL,Q42)
  __DECLARE_VAR(BOOL,Q52)
  __DECLARE_VAR(BOOL,Q62)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,INIT)
  TOF T1;
  TOF T2;
  TOF T3;
  TOF T4;
  TOF T5;
  TOF T6;
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(BOOL,X1)
  __DECLARE_VAR(BOOL,X2)
  __DECLARE_VAR(BOOL,E1)
  __DECLARE_VAR(BOOL,E2)

} SWITCH_X;

void SWITCH_X_init__(SWITCH_X *data__, BOOL retain);
// Code part
void SWITCH_X_body__(SWITCH_X *data__);
// FUNCTION_BLOCK F_LAMP
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,SWITCH)
  __DECLARE_VAR(BYTE,DIMM)
  __DECLARE_VAR(BOOL,RST)
  __DECLARE_VAR(UINT,T_NO_DIMM)
  __DECLARE_VAR(UINT,T_MAINTENANCE)
  __DECLARE_VAR(BYTE,LAMP)
  __DECLARE_VAR(BYTE,STATUS)
  __DECLARE_VAR(UDINT,_ONTIME)
  __DECLARE_VAR(UDINT,CYCLES)

  // FB private variables - TEMP, private and located variables
  ONTIME RUNTIME;

} F_LAMP;

void F_LAMP_init__(F_LAMP *data__, BOOL retain);
// Code part
void F_LAMP_body__(F_LAMP *data__);
// FUNCTION
REAL TANK_VOL2(
  BOOL EN, 
  BOOL *__ENO, 
  REAL TR, 
  REAL H);
// FUNCTION
REAL TANK_VOL1(
  BOOL EN, 
  BOOL *__ENO, 
  REAL TR, 
  REAL TL, 
  REAL H);
// FUNCTION
UDINT DT_TO_TOD_2(
  BOOL EN, 
  BOOL *__ENO, 
  UDINT IN);
// FUNCTION_BLOCK ACTUATOR_UD
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,UD)
  __DECLARE_VAR(BOOL,_ON)
  __DECLARE_VAR(BOOL,MANUAL)
  __DECLARE_VAR(BOOL,UP)
  __DECLARE_VAR(BOOL,DN)
  __DECLARE_VAR(BOOL,OFF)
  __DECLARE_VAR(BOOL,YUP_IN)
  __DECLARE_VAR(BOOL,YDN_IN)
  __DECLARE_VAR(BOOL,OUT_RETURN)
  __DECLARE_VAR(TIME,_TON)
  __DECLARE_VAR(TIME,_TOFF)
  __DECLARE_VAR(BOOL,YUP)
  __DECLARE_VAR(BOOL,YDN)
  __DECLARE_VAR(BYTE,STATUS)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,LAST)
  __DECLARE_VAR(BOOL,INIT)

} ACTUATOR_UD;

void ACTUATOR_UD_init__(ACTUATOR_UD *data__, BOOL retain);
// Code part
void ACTUATOR_UD_body__(ACTUATOR_UD *data__);
// FUNCTION_BLOCK ACTUATOR_3P
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BYTE,IN)
  __DECLARE_VAR(BOOL,TEST)
  __DECLARE_VAR(BOOL,ARE)
  __DECLARE_VAR(BOOL,END_POS)
  __DECLARE_VAR(TIME,T_RUN)
  __DECLARE_VAR(TIME,T_EXT)
  __DECLARE_VAR(TIME,T_CAL)
  __DECLARE_VAR(TIME,T_DIAG)
  __DECLARE_VAR(BOOL,SWITCH_AVAIL)
  __DECLARE_VAR(BOOL,OUT1)
  __DECLARE_VAR(BOOL,OUT2)
  __DECLARE_VAR(BYTE,POS)
  __DECLARE_VAR(BOOL,ERROR)
  __DECLARE_VAR(BYTE,STATUS)
  __DECLARE_VAR(BOOL,ARX)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,TX)
  _RMP_NEXT _RAMP;
  __DECLARE_VAR(TIME,NEXT_CAL)
  __DECLARE_VAR(TIME,NEXT_DIAG)
  __DECLARE_VAR(TIME,LAST)
  __DECLARE_VAR(TIME,START)

} ACTUATOR_3P;

void ACTUATOR_3P_init__(ACTUATOR_3P *data__, BOOL retain);
// Code part
void ACTUATOR_3P_body__(ACTUATOR_3P *data__);
// PROGRAM PROGRAM0
// Data part
typedef struct {
  // PROGRAM Interface - IN, OUT, IN_OUT variables

  // PROGRAM private variables - TEMP, private and located variables
  __DECLARE_VAR(DINT,LOCALVAR0)
  __DECLARE_VAR(DINT,LOCALVAR1)
  __DECLARE_VAR(DINT,LOCALVAR2)
  __DECLARE_VAR(DINT,ADD1_OUT)

} PROGRAM0;

void PROGRAM0_init__(PROGRAM0 *data__, BOOL retain);
// Code part
void PROGRAM0_body__(PROGRAM0 *data__);
// FUNCTION_BLOCK FILTER_I
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(INT,X)
  __DECLARE_VAR(TIME,_T)
  __DECLARE_VAR(INT,Y)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(DINT,YI)
  __DECLARE_VAR(UDINT,LAST)
  __DECLARE_VAR(UDINT,TX)
  __DECLARE_VAR(BOOL,INIT)

} FILTER_I;

void FILTER_I_init__(FILTER_I *data__, BOOL retain);
// Code part
void FILTER_I_body__(FILTER_I *data__);
// FUNCTION
INT INC1(
  BOOL EN, 
  BOOL *__ENO, 
  INT X, 
  INT N);
// FUNCTION
REAL WCT(
  BOOL EN, 
  BOOL *__ENO, 
  REAL _T, 
  REAL V);
// FUNCTION_BLOCK HEAT_TEMP
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,T_EXT)
  __DECLARE_VAR(REAL,T_INT)
  __DECLARE_VAR(REAL,OFFSET)
  __DECLARE_VAR(REAL,T_REQ)
  __DECLARE_VAR(REAL,TY_MAX)
  __DECLARE_VAR(REAL,TY_MIN)
  __DECLARE_VAR(REAL,TY_CONFIG)
  __DECLARE_VAR(REAL,T_INT_CONFIG)
  __DECLARE_VAR(REAL,T_EXT_CONFIG)
  __DECLARE_VAR(REAL,T_DIFF)
  __DECLARE_VAR(REAL,C)
  __DECLARE_VAR(REAL,H)
  __DECLARE_VAR(REAL,TY)
  __DECLARE_VAR(BOOL,HEAT)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(REAL,TR)
  __DECLARE_VAR(REAL,TX)

} HEAT_TEMP;

void HEAT_TEMP_init__(HEAT_TEMP *data__, BOOL retain);
// Code part
void HEAT_TEMP_body__(HEAT_TEMP *data__);
// FUNCTION_BLOCK GEN_PULSE
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,ENQ)
  __DECLARE_VAR(TIME,PTH)
  __DECLARE_VAR(TIME,PTL)
  __DECLARE_VAR(BOOL,Q)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,TN)
  __DECLARE_VAR(BOOL,INIT)

} GEN_PULSE;

void GEN_PULSE_init__(GEN_PULSE *data__, BOOL retain);
// Code part
void GEN_PULSE_body__(GEN_PULSE *data__);
// FUNCTION_BLOCK ACTUATOR_2P
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BYTE,IN)
  __DECLARE_VAR(BOOL,TEST)
  __DECLARE_VAR(BOOL,ARE)
  __DECLARE_VAR(TIME,CYCLE_TIME)
  __DECLARE_VAR(BYTE,SENS)
  __DECLARE_VAR(TIME,SELF_ACT_TIME)
  __DECLARE_VAR(TIME,SELF_ACT_PULSE)
  __DECLARE_VAR(INT,SELF_ACT_CYCLES)
  __DECLARE_VAR(BOOL,OUT)
  __DECLARE_VAR(BOOL,ARO)
  __DECLARE_VAR(BOOL,ARX)

  // FB private variables - TEMP, private and located variables
  AUTORUN TIMER;
  GEN_PULSE PWGEN;

} ACTUATOR_2P;

void ACTUATOR_2P_init__(ACTUATOR_2P *data__, BOOL retain);
// Code part
void ACTUATOR_2P_body__(ACTUATOR_2P *data__);
// FUNCTION
REAL SDD_NH3(
  BOOL EN, 
  BOOL *__ENO, 
  REAL _T);
// FUNCTION_BLOCK TEMP_EXT
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(REAL,T_EXT1)
  __DECLARE_VAR(REAL,T_EXT2)
  __DECLARE_VAR(REAL,T_EXT3)
  __DECLARE_VAR(BYTE,T_EXT_CONFIG)
  __DECLARE_VAR(UDINT,DT_IN)
  __DECLARE_VAR(REAL,T_EXT_MIN)
  __DECLARE_VAR(REAL,T_EXT_MAX)
  __DECLARE_VAR(REAL,T_EXT_DEFAULT)
  __DECLARE_VAR(UDINT,HEAT_PERIOD_START)
  __DECLARE_VAR(UDINT,HEAT_PERIOD_STOP)
  __DECLARE_VAR(UDINT,COOL_PERIOD_START)
  __DECLARE_VAR(UDINT,COOL_PERIOD_STOP)
  __DECLARE_VAR(REAL,HEAT_START_TEMP_DAY)
  __DECLARE_VAR(REAL,HEAT_START_TEMP_NIGHT)
  __DECLARE_VAR(REAL,HEAT_STOP_TEMP)
  __DECLARE_VAR(REAL,COOL_START_TEMP_DAY)
  __DECLARE_VAR(REAL,COOL_START_TEMP_NIGHT)
  __DECLARE_VAR(REAL,COOL_STOP_TEMP)
  __DECLARE_VAR(UDINT,START_DAY)
  __DECLARE_VAR(UDINT,START_NIGHT)
  __DECLARE_VAR(TIME,CYCLE_TIME)
  __DECLARE_VAR(REAL,T_EXT)
  __DECLARE_VAR(BOOL,HEAT)
  __DECLARE_VAR(BOOL,COOL)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(TIME,TX)
  __DECLARE_VAR(TIME,LAST_RUN)
  __DECLARE_VAR(BOOL,INIT)
  __DECLARE_VAR(UDINT,COOL_START)
  __DECLARE_VAR(UDINT,COOL_STOP)
  __DECLARE_VAR(UDINT,HEAT_START)
  __DECLARE_VAR(UDINT,HEAT_STOP)
  __DECLARE_VAR(UDINT,XDATE)
  __DECLARE_VAR(BOOL,DAY)

} TEMP_EXT;

void TEMP_EXT_init__(TEMP_EXT *data__, BOOL retain);
// Code part
void TEMP_EXT_body__(TEMP_EXT *data__);
#endif //__POUS_H
