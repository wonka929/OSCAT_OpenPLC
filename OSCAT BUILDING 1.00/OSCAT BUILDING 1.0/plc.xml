<?xml version='1.0' encoding='utf-8'?>
<project xmlns:ns1="http://www.plcopen.org/xml/tc6_0201" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Unbekannt" productName="Unbenannt" productVersion="1" creationDateTime="2019-09-16T09:44:13"/>
  <contentHeader name="Unbenannt" modificationDateTime="2019-09-20T14:26:15">
    <coordinateInfo>
      <fbd>
        <scaling x="10" y="10"/>
      </fbd>
      <ld>
        <scaling x="10" y="10"/>
      </ld>
      <sfc>
        <scaling x="10" y="10"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="REAL2">
        <baseType>
          <struct>
            <variable name="R1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="RX">
              <type>
                <REAL/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="OSCAT_ARRAY_X">
        <baseType>
          <array>
            <dimension lower="0" upper="1"/>
            <baseType>
              <REAL/>
            </baseType>
          </array>
        </baseType>
      </dataType>
      <dataType name="TIMER_EVENT">
        <baseType>
          <struct>
            <variable name="TYP">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="CHANNEL">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="DAY">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="START">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="DURATION">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="LAND">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="LOR">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="LAST">
              <type>
                <UDINT/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="OSCAT_CALENDAR">
        <baseType>
          <struct>
            <variable name="UTC">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="LDT">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="LDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="LTOD">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="YEAR">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="MONTH">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="DAY">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="WEEKDAY">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="OFFSET">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="DST_EN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DST_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="NAME">
              <type>
                <string/>
              </type>
            </variable>
            <variable name="LANGUAGE">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="LONGITUDE">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="LATITUDE">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="SUN_RISE">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="SUN_SET">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="SUN_MIDDAY">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="SUN_HEIGTH">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="SUN_HOR">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="SUN_VER">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="NIGHT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="HOLIDAY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="HOLY_NAME">
              <type>
                <string/>
              </type>
            </variable>
            <variable name="WORK_WEEK">
              <type>
                <INT/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="FLOOR2" pouType="function">
        <interface>
          <returnType>
            <DINT/>
          </returnType>
          <inputVars>
            <variable name="x">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[FLOOR2 := REAL_TO_DINT(X);
IF DINT_TO_REAL(FLOOR2) > X THEN
	FLOOR2 := FLOOR2 - DINT#1;
END_IF;
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[This is a rounding function which returns the biggest possible integer which is less or equal to X. floor2(3.14) = 3 floor2(-3.14) = -4]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="MODR" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="DIVI">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF divi = 0.0 THEN
	MODR := 0.0;
ELSE
	MODR := in - DINT_TO_REAL(FLOOR2(in / divi)) * divi;
END_IF;
(* from OSCAT library; www.oscat.de  *)
(* FC FLOOR2 required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[modulo funtion for real numbers modr(5.5,2.5) = 0.5]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="RAD" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="_DEG">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[RAD := modR(0.0174532925199433 * _deg , 6.283185307179586476);
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function converts Radiant to degrees]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DEG" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="RAD_IN">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[DEG := MODR(57.29577951308232 * RAD_IN, 360.0);
(* from OSCAT library; www.oscat.de  *)
(* MODR and FLOOR2 required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function converts degrees into Radiant execution time ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BLIND_SHADE_S" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="S_IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="ENABLE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SUN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="HORZ1">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="100.0"/>
              </initialValue>
            </variable>
            <variable name="HORZ2">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="260.0"/>
              </initialValue>
            </variable>
            <variable name="VERT">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="90.0"/>
              </initialValue>
            </variable>
            <variable name="ALERT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SUNRISE_OFFSET">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1h"/>
              </initialValue>
            </variable>
            <variable name="SUNSET_PRESET">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1h"/>
              </initialValue>
            </variable>
            <variable name="SHADE_DELAY">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#60s"/>
              </initialValue>
            </variable>
            <variable name="SHADE_POS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="QU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="QD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PO">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="CX">
              <type>
                <derived name="OSCAT_CALENDAR"/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="sun_delay">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* status definition
   151 = shadow               move shutter down for shadowing
   152 = alert                  move shutter up by setting QU:=TRUE when door is open.
*)

(* the input sun is sent through tof which will delay the shade for the time shade_delay *)
sun_delay(IN := sun, PT := shade_delay);

IF ALERT THEN
   QU := TRUE;
   QD := FALSE;
   STATUS := BYTE#152;
ELSIF UP AND DN AND ENABLE AND sun_delay.Q
AND (CX.SUN_HOR > HORZ1) AND (CX.SUN_HOR < HORZ2)
AND (CX.SUN_VER < VERT)
AND (_DT_TO_TOD(CX.UTC) > CX.SUN_RISE + time_to_udint(sunrise_offset)) AND (_DT_TO_TOD(CX.UTC) < CX.SUN_SET - time_to_udint(sunset_preset)) THEN
   QU := UP;
   QD := DN;
   STATUS := BYTE#151;
   (* Calculate Position, must be shade_pos or less *)
   PO := MIN(PI, shade_pos);
ELSE
   QU := UP;
   QD := DN;
   PO := PI;
   STATUS := S_IN;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="INTERLOCK" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="I1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="I2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TL">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="T1">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="T2">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* the input signal have a run delay to lockout the other input *)
T1(IN := I1, PT := TL);
T2(IN := I2, PT := TL);

Q1 := I1 AND NOT t2.Q;
Q2 := I2 AND NOT t1.Q;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[INTERLOCK has two inputs I1 and I2 which drive the corresponding outputs Q1 and Q2]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="LEAP_DAY" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[LEAP_DAY := IDATE MOD UDINT#126230400 = UDINT#68169600;

(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="YEAR_END" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <inputVars>
            <variable name="Y">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[YEAR_END := DWORD_TO_UDINT(SHR(UDINT_TO_DWORD(INT_TO_UDINT(y) * UDINT#1461 - UDINT#2876712), 2)) * UDINT#86400;

(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="MONTH_END" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[MONTH_END := SET_DATE(YEAR_OF_DATE(idate),MONTH_OF_DATE(idate)+1,1) - UDINT#86400;

(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="DATE_TO_DT" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[DATE_TO_DT := IN;


(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="YEAR_OF_DATE" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[YEAR_OF_DATE := UDINT_TO_INT((IDATE+UDINT#43200) / UDINT#31557600 + UDINT#1970);

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[returs the year of a date the function works for dates from 1970 - 2099]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BIT_LOAD_B" pouType="function">
        <interface>
          <returnType>
            <BYTE/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="POS">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF VAL THEN
	BIT_LOAD_B := in OR SHL(BYTE#1,pos);
ELSE
	BIT_LOAD_B := in AND (NOT SHL(BYTE#1,pos));
END_IF;

(*From OSCAT Library, www.oscat.de*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function loads a bit into a byte at position pos.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BIT_OF_DWORD" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[BIT_OF_DWORD := (SHR(in,N) AND 16#00000001) > 0;

(* From Oscat Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function extracts a single bit from the nth position from right (right is lowest bit the lowest Bit (Bit0 from in) is selected with N=.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="MANUAL_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ENA">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OFF">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MAN">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="STATUS0">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF ena THEN
	IF NOT _ON AND NOT OFF THEN
		Q := IN;
		STATUS := BYTE#100;
	ELSIF _on AND NOT off THEN
		Q := TRUE;
		STATUS := BYTE#101;
	ELSIF NOT _on AND off THEN
		q := FALSE;
		STATUS := BYTE#102;
	ELSE
		Q := MAN;
		STATUS := BYTE#103;
	END_IF;
ELSE
	Q := FALSE;
	STATUS := BYTE#104;
END_IF;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[MANUAL_2 is a manual override for boolean signals]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DIMM_I" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="255"/>
              </initialValue>
            </variable>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_DEBOUNCE">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10ms"/>
              </initialValue>
            </variable>
            <variable name="T_RECONFIG">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10s"/>
              </initialValue>
            </variable>
            <variable name="T_ON_MAX">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#0h"/>
              </initialValue>
            </variable>
            <variable name="T_DIMM_START">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1s"/>
              </initialValue>
            </variable>
            <variable name="T_DIMM">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#3s"/>
              </initialValue>
            </variable>
            <variable name="MIN_ON">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="50"/>
              </initialValue>
            </variable>
            <variable name="MAX_ON">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="255"/>
              </initialValue>
            </variable>
            <variable name="RST_OUT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SOFT_DIMM">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="DBL_TOGGLE">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DBL">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="OUT">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="t3">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="config">
              <type>
                <derived name="SW_RECONFIG"/>
              </type>
            </variable>
            <variable name="decode">
              <type>
                <derived name="CLICK_MODE"/>
              </type>
            </variable>
            <variable name="dim">
              <type>
                <derived name="_RMP_B"/>
              </type>
            </variable>
            <variable name="dir">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* the input is first sent through auto reconfiguration and debouncing *)
config(IN := IN, TD := T_DEBOUNCE, TR := T_RECONFIG);
decode(in := config.Q, T_LONG := T_DIMM_START);

IF RST THEN
	IF rst_out THEN out := BYTE#0; END_IF;
	Q := FALSE;
	dir := out > BYTE#127;
ELSIF set THEN
	out := val;
	Q := TRUE;
	(* set direction to up when value < 127 otherwise set dir down dir is reversed because next action will reverse again *)
	dir := out > BYTE#127;
ELSIF decode.SINGLE THEN
	(* a single click reverses output Q *)
	Q := NOT Q;
	(* when dimmer is turned on we need to limit out to min and max limits *)
	IF Q THEN OUT := INT_TO_BYTE(LIMIT(MAX(BYTE_TO_INT(MIN_ON),1), BYTE_TO_INT(out), BYTE_TO_INT(MAX_ON)));	END_IF;
	(* set the appropriate direction of dimmer dir is reversed because next action will reverse again *)
	dir := OUT > BYTE#127;
ELSIF decode.TP_LONG THEN
	IF NOT Q THEN
		IF SOFT_DIMM THEN
			OUT := BYTE#1;
			dir := TRUE;
		ELSE
            out := INT_TO_BYTE(LIMIT(MAX(BYTE_TO_INT(MIN_ON),1), BYTE_TO_INT(out), BYTE_TO_INT(MAX_ON)));
			DIR := out < BYTE#127;
		END_IF;
		Q := TRUE;
	ELSE
		(* reverse direction with every long click *)
		dir := NOT dir;
	END_IF;
END_IF;

(* set the double click output *)
IF NOT dbl_toggle THEN dbl := FALSE; END_IF;
IF decode.DOUBLE THEN dbl := NOT dbl; END_IF;

(* while dimming is active ramp the output out up or down *)
dim(DIR := dir, _e := decode.LONG AND Q, TR := T_DIMM, rmp := out);
OUT := dim.RMP;
(* reverse direction when limits are reached *)
IF out = BYTE#0 THEN
	dir := TRUE;
ELSIF out = BYTE#255 THEN
	dir := FALSE;
END_IF;

(* limit the maximum runtime *)
IF t_ON_MAX > t#0s THEN
	t3(in := q, pt := T_ON_MAX);
	Q := Q XOR t3.Q;
END_IF;


(* From OSCAT LIBRARY, www.oscat.de *)
(* _RMP_B, CLICK_MODE, TOF required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this is an intelligent dimmer interface with an autoset feature for "in" it will automatically detect the type of switch:]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DAY_OF_YEAR" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[DAY_OF_YEAR := UDINT_TO_INT((idate / UDINT#86400) MOD UDINT#1461);
IF DAY_OF_YEAR > 729 THEN
	IF DAY_OF_YEAR > 1095 THEN DAY_OF_YEAR := DAY_OF_YEAR - 1095; ELSE DAY_OF_YEAR := DAY_OF_YEAR - 729; END_IF;
ELSIF DAY_OF_YEAR > 364 THEN
	DAY_OF_YEAR := DAY_OF_YEAR - 364;
ELSE
	DAY_OF_YEAR := DAY_OF_YEAR + 1;
END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[calculates the day of the year]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="LEAP_OF_DATE" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[LEAP_OF_DATE := SHL(UDINT_TO_DWORD((idate + UDINT#43200) / UDINT#31557600), 30) = DWORD#16#80000000;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[leap_of_date is true if current year is a leap year]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="MID3" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="IN1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="IN3">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="_IN1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="_IN2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="_IN3">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[_IN1 := IN1; (* VAR_INPUT auf Variablen umkopieren , da diese schreibgeschützt sind *)
_IN2 := IN2;
_IN3 := IN3;

IF _IN1 > _IN2 THEN MID3 := _IN1; _IN1 := _IN2; _IN2 := MID3; END_IF;
IF _IN2 > _IN3 THEN _IN2 := _IN3; END_IF;
MID3 := SEL(_IN1 > _IN2, _IN2, _IN1);
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[returns the mid value of 3 real inputs]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="MULTI_IN" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="IN_1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="IN_2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="IN_3">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="DEFAULT">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="IN_MIN">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="IN_MAX">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="MODE">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="count">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="F1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="F2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="F3">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[F1 :=  in_1 > in_min AND in_1 < in_max;
F2 :=  in_2 > in_min AND in_2 < in_max;
F3 :=  in_3 > in_min AND in_3 < in_max;

CASE BYTE_TO_INT(mode) OF
0:	count := 0;
	IF F1 THEN
		count := count + 1;
		MULTI_IN := in_1;
	ELSE
		MULTI_IN := 0.0;
	END_IF;
	IF F2 THEN
		count := count + 1;
		MULTI_IN := MULTI_IN + in_2;
	END_IF;
	IF F3 THEN
		count := count + 1;
		MULTI_IN := MULTI_IN + in_3;
	END_IF;
	MULTI_IN := SEL(count = 0, MULTI_IN / INT_TO_REAL(count), default);

1:	MULTI_IN := SEL(F1, default, IN_1);

2:	MULTI_IN := SEL(F2, default, IN_2);

3:	MULTI_IN := SEL(F3, default, IN_3);

4:	MULTI_IN := default;

5:	MULTI_IN := SEL(F1, in_max, IN_1);
	IF F2 AND in_2 < MULTI_IN THEN MULTI_IN := in_2; END_IF;
	IF F3 AND in_3 < MULTI_IN THEN MULTI_IN := in_3; END_IF;
	IF MULTI_IN = in_max THEN MULTI_IN := default; END_IF;

6:	MULTI_IN := SEL(F1, in_min, IN_1);
	IF F2 AND in_2 > MULTI_IN THEN MULTI_IN := in_2; END_IF;
	IF F3 AND in_3 > MULTI_IN THEN MULTI_IN := in_3; END_IF;
	IF MULTI_IN = in_min THEN MULTI_IN := default; END_IF;

7:	IF F1 AND F2 AND F3 THEN MULTI_IN := MID3(in_1, in_2, in_3);
	ELSIF F1 AND F2 THEN MULTI_IN := MIN(in_1, in_2);
	ELSIF F1 AND F3 THEN MULTI_IN := MIN(in_1, in_3);
	ELSIF F2 AND F3 THEN MULTI_IN := MIN(in_2, in_3);
	ELSIF F1 THEN MULTI_IN := in_1;
	ELSIF F2 THEN MULTI_IN := in_2;
	ELSIF F3 THEN MULTI_IN := in_3;
	ELSE MULTI_IN := default;
	END_IF;

END_CASE;

(* From OSCAT Library, www.oscat.de *)
(* MID3 required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[multi_in is a signal conditioning function which can be configured in 8 different ways.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DT_TO_TOD_2" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[DT_TO_TOD_2 := (IN MOD UDINT#86400) * UDINT#1000;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="DT_TO_DATE_2" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[DT_TO_DATE_2 := (IN / UDINT#86400) * UDINT#86400;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Zeitanteil aus Date-Time herausfiltern ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DAY_OF_MONTH" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[day_of_month := day_of_year(idate);

IF leap_of_Date(idate) THEN
	CASE day_of_month OF
		32..60	:	day_of_month := day_of_month - 31;
		61..91	:	day_of_month := day_of_month - 60;
		92..121 :	day_of_month := day_of_month - 91;
		122..152:	day_of_month := day_of_month - 121;
		153..182:	day_of_month := day_of_month - 152;
		183..213:	day_of_month := day_of_month - 182;
		214..244:	day_of_month := day_of_month - 213;
		245..274:	day_of_month := day_of_month - 244;
		275..305:	day_of_month := day_of_month - 274;
		306..335:	day_of_month := day_of_month - 305;
		336..366:	day_of_month := day_of_month - 335;
	END_CASE;
ELSE
	CASE day_of_month OF
		32..59	:	day_of_month := day_of_month - 31;
		60..90	:	day_of_month := day_of_month - 59;
		91..120 :	day_of_month := day_of_month - 90;
		121..151:	day_of_month := day_of_month - 120;
		152..181:	day_of_month := day_of_month - 151;
		182..212:	day_of_month := day_of_month - 181;
		213..243:	day_of_month := day_of_month - 212;
		244..273:	day_of_month := day_of_month - 243;
		274..304:	day_of_month := day_of_month - 273;
		305..334:	day_of_month := day_of_month - 304;
		335..365:	day_of_month := day_of_month - 334;
	END_CASE;
END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[returns the day OF month for any DATE]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="MONTH_OF_DATE" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[MONTH_OF_DATE := DAY_OF_YEAR(idate);
IF MONTH_OF_DATE < 32 THEN
	MONTH_OF_DATE := 1;
ELSIF LEAP_OF_DATE(IDATE) THEN
	MONTH_OF_DATE := (MONTH_OF_DATE * 53 + 1668) / 1623;
ELSE
	MONTH_OF_DATE := (MONTH_OF_DATE * 53 + 1700) / 1620;
END_IF;

(* From OSCAT Library, www.oscat.de *)
(* DAY_OF_YEAR, LEAP_OF_DATE required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[returns the current month of the year]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SET_DATE" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <inputVars>
            <variable name="YEAR">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="MONTH">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="DAY">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="count">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF month > 2 THEN
	count := (month - 1) * 30;
	IF month > 7 THEN
		count := count + DWORD_TO_INT(SHR(DINT_TO_DWORD(INT_TO_DINT(month) - INT_TO_DINT(3)),1));
	ELSE
		count := count + DWORD_TO_INT(SHR(DINT_TO_DWORD(INT_TO_DINT(month) - INT_TO_DINT(4)),1));
	END_IF;
	(* chech for leap year and add one day if true *)
	IF SHL(INT_TO_WORD(year),14) = WORD#0 THEN
		count := count + 1;
	END_IF;
ELSE
	count := (month - 1) * 31;
END_IF;
SET_DATE := (INT_TO_UDINT(count + day - 1) + DWORD_TO_UDINT(SHR(UDINT_TO_DWORD(INT_TO_UDINT(year) * UDINT#1461 - UDINT#2878169), 2))) * UDINT#86400;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[creates a date output from year, month and day of month]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CIRCLE_SEG" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="RX">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="HX">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF RX > 0.0 THEN
	CIRCLE_SEG := 2.0 * ACOS(1.0 - LIMIT(0.0, HX / RX, 2.0));
	CIRCLE_SEG := (CIRCLE_SEG - SIN(CIRCLE_SEG)) * RX * RX * 0.5;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[CIRCLE_SEG calculates the Area of a circle segement enclosed between a sectant line and the circumference]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TONOF" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_ON">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T_OFF">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="X">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="old">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="mode">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF IN XOR old THEN
  X(IN := FALSE, PT := SEL(IN,T_OFF,T_ON));
  mode := IN;
  old := IN;
END_IF;
X(IN := TRUE);
IF X.Q THEN Q := mode;END_IF;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TONOF generated a TON and TOF Delay for the Input N TON (T1) and TOF (T2) can be configured separately]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="INC1" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="N">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF X >= N - 1 THEN
	INC1 := 0;
ELSE
	INC1 := X + 1;
END_IF;
(* from OSCAT library; www.oscat.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[This is a increment function which increments the variable X by 1 and if N is reached, it begins with 0 instead of N again.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="FILTER_I" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="_T">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <INT/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="Yi">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_MS(en:=true);

(* startup initialisation *)
IF NOT init OR _T = t#0s THEN
	init := TRUE;
	Yi := INT_TO_DINT(X) * DINT#1000;
ELSE
	(* to increase accuracy of the filter we calculate internal Yi wich is Y * 1000 *)
	Yi := Yi + INT_TO_DINT(X - Y) * UDINT_TO_DINT(tx - last) * DINT#1000 / TIME_TO_DINT(_T);
END_IF;
last := tx;
Y := DINT_TO_INT(yi / DINT#1000);

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[FILTER_I is a low pass filter]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_DT_TO_DATE" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[_DT_TO_DATE := (IN / UDINT#86400) * UDINT#86400;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Zeitanteil aus Date-Time herausfiltern ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TIME_TO_TOD" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[TIME_TO_TOD := DWORD_TO_UDINT(TIME_TO_DWORD(IN));


(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="_DT_TO_TOD" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[_DT_TO_TOD := (IN MOD UDINT#86400) * UDINT#1000;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="TOD_TO_TIME" pouType="function">
        <interface>
          <returnType>
            <TIME/>
          </returnType>
          <inputVars>
            <variable name="IN">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[TOD_TO_TIME := DWORD_TO_TIME(UDINT_TO_DWORD(IN));

(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="SEQUENCE_8" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN0">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN1">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN2">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN3">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN4">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN5">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN6">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN7">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="START">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="WAIT0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT3">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY3">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT4">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY4">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT5">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY5">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT6">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY6">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="WAIT7">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DELAY7">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="STOP_ON_ERROR">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="QX">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_STEP">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="-1"/>
              </initialValue>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* initialize on startup *)
IF NOT init THEN
	last := tx;
	init := TRUE;
	status := BYTE#110;
END_IF;

(* asynchronous reset *)
IF rst THEN
	_step := -1;
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
	Q4 := FALSE;
	Q5 := FALSE;
	Q6 := FALSE;
	Q7 := FALSE;
	status := BYTE#110;
	run := FALSE;

(* edge on start input restarts the sequencer *)
ELSIF start AND NOT edge THEN
	_step := 0;
	last := tx;
	status := BYTE#111;
	Q0 := FALSE;
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
	Q4 := FALSE;
	Q5 := FALSE;
	Q6 := FALSE;
	Q7 := FALSE;
	run := TRUE;
END_IF;
edge := start;

(* check if stop on error is necessary *)
IF status > BYTE#0 AND status < BYTE#100 AND stop_on_error THEN RETURN; END_IF;

(* sequence is running *)
IF run AND _step = 0 THEN
	IF NOT q0 AND in0 AND tx - last <= wait0 THEN
		Q0 := TRUE;
		last := tx;
	ELSIF NOT q0 AND tx - last > wait0 THEN
		status := BYTE#1;
		run := FALSE;
	ELSIF q0 AND tx - last >= delay0 THEN
		_step := 1;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 1 THEN
	IF NOT q1 AND in1 AND tx - last <= wait1 THEN
		Q0 := FALSE;
		Q1 := TRUE;
		last := tx;
	ELSIF NOT q1 AND Tx - last > wait1 THEN
		status := BYTE#2;
		q0 := FALSE;
		run := FALSE;
	ELSIF q1 AND tx - last >= delay1 THEN
		_step := 2;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 2 THEN
	IF NOT q2 AND in2 AND tx - last <= wait2 THEN
		Q1 := FALSE;
		Q2 := TRUE;
		last := tx;
	ELSIF NOT q2 AND Tx - last > wait2 THEN
		status := BYTE#3;
		q1 := FALSE;
		run := FALSE;
	ELSIF q2 AND tx - last >= delay2 THEN
		_step := 3;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 3 THEN
	IF NOT q3 AND in3 AND tx - last <= wait3 THEN
		Q2 := FALSE;
		Q3 := TRUE;
		last := tx;
	ELSIF NOT q3 AND Tx - last > wait3 THEN
		status := BYTE#4;
		q2 := FALSE;
		run := FALSE;
	ELSIF q3 AND tx - last >= delay3 THEN
		_step := 4;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 4 THEN
	IF NOT q4 AND in4 AND tx - last <= wait4 THEN
		Q3 := FALSE;
		Q4 := TRUE;
		last := tx;
	ELSIF NOT q4 AND Tx - last > wait4 THEN
		status := BYTE#5;
		q3 := FALSE;
		run := FALSE;
	ELSIF q4 AND tx - last >= WAIT4 THEN
		_step := 5;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 5 THEN
	IF NOT q5 AND in5 AND tx - last <= DELAY4 THEN
		Q4 := FALSE;
		Q5 := TRUE;
		last := tx;
	ELSIF NOT q5 AND Tx - last > DELAY4 THEN
		status := BYTE#6;
		q4 := FALSE;
		run := FALSE;
	ELSIF q5 AND tx - last >= WAIT5 THEN
		_step := 6;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 6 THEN
	IF NOT q6 AND in6 AND tx - last <= DELAY5 THEN
		Q5 := FALSE;
		Q6 := TRUE;
		last := tx;
	ELSIF NOT q6 AND Tx - last > DELAY5 THEN
		status := BYTE#7;
		q5 := FALSE;
		run := FALSE;
	ELSIF q6 AND tx - last >= WAIT6 THEN
		_step := 7;
		last := tx;
	END_IF;
END_IF;
IF run AND _step = 7 THEN
	IF NOT q7 AND in7 AND tx - last <= DELAY6 THEN
		Q6 := FALSE;
		Q7 := TRUE;
		last := tx;
	ELSIF NOT q7 AND Tx - last > DELAY6 THEN
		status := BYTE#8;
		q6 := FALSE;
		run := FALSE;
	ELSIF q7 AND tx - last >= WAIT7 THEN
		_step := -1;
		Q7 := FALSE;
		Run := FALSE;
		status := BYTE#110;
	END_IF;
END_IF;
QX := q0 OR q1 OR q2 OR q3 OR q4 OR q5 OR q6 OR q7;

(*From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="HYST_1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="HIGH">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="LOW">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="WIN">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF in < low THEN
	Q := FALSE;
	win := FALSE;
ELSIF in > high THEN
	Q := TRUE;
	win := FALSE;
ELSE
	win := TRUE;
END_IF;

(* From OSCAT Library, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[hysteresis function switches the output high ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="INTEGRATE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0"/>
              </initialValue>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="Y">
              <type>
                <REAL/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="x_last">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_MS(en:=true);

IF NOT init THEN
	init := TRUE;
	X_last := X;
ELSIF _E THEN
	Y := (X + X_LAST) * 0.5E-3 * UDINT_TO_REAL(tx-last) * K + Y;
	X_last := X;
END_IF;
last := tx;

(* From OSCAT Library, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[integrate is a plain integrator with I/O for out]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="R2_SET" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="_R2_SET">
              <type>
                <derived name="REAL2"/>
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[_R2_SET.RX := X;
_R2_SET.R1 := 0.0;

(* From OSCAT Library, www.oscat.de *)
(* Datatype REAL2 required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[R2_set sets a double precision real to a single real value]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="R2_ADD" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <derived name="REAL2"/>
              </type>
            </variable>
            <variable name="Y">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="_R2_ADD">
              <type>
                <derived name="REAL2"/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="temp">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[temp := X.RX;
_R2_ADD.RX := Y + X.R1 + X.RX;
_R2_ADD.R1 := temp - _R2_ADD.RX + Y + X.R1;

(* From OSCAT Library, www.oscat.de *)
(* Datatype REAL2 required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[R2_add adds a real to a double real which extends the accuracy of a real to twice as many digits]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="FT_INT2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="K">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0"/>
              </initialValue>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OUT_MIN">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="-1.0E-37"/>
              </initialValue>
            </variable>
            <variable name="OUT_MAX">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.0E37"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="LIM">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="INTEG">
              <type>
                <derived name="INTEGRATE"/>
              </type>
            </variable>
            <variable name="ix">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="val">
              <type>
                <derived name="REAL2"/>
              </type>
            </variable>
            <variable name="_R2_ADD">
              <type>
                <derived name="R2_ADD"/>
              </type>
            </variable>
            <variable name="_R2_SET">
              <type>
                <derived name="R2_SET"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF RST THEN
	_R2_SET(X:=0.0);
	val:=_R2_SET._R2_SET;
	out := 0.0;
ELSE
	integ(X := IN, _E := RUN, K := K, Y := ix);
	ix := integ.Y;
	_R2_ADD(X:=val,Y:=ix);
	val:=_R2_ADD._R2_ADD;
	ix := 0.0;
	OUT := val.RX;
END_IF;

(* check output for limits *)
IF out > OUT_MIN AND out < OUT_MAX THEN
	LIM := FALSE;
ELSE
	OUT := LIMIT(OUT_MIN, OUT, OUT_MAX);
	_R2_SET(X:=OUT);
	val:=_R2_SET._R2_SET;
	LIM := TRUE;
END_IF;


(* From OSCAT Library, www.oscat.de *)
(* INTEGRATE required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[FT_int2 is an integrator with input IN and factor K.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="LINEAR_INT" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="XY">
              <type>
                <array>
                  <dimension lower="1" upper="20"/>
                  <dimension lower="0" upper="1"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="Pts">
              <type>
                <INT/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[pts := MIN(pts,20);
i := 2;
WHILE (i < pts) AND (XY[i,0] < X) DO
	i := i + 1;
END_WHILE;
LINEAR_INT := ((XY[i,1] - XY[i-1,1]) * X - XY[i,1] * XY[i-1,0] + XY[i-1,1] * XY[i,0]) / (XY[i,0] - XY[i-1,0]);

(* from OSCAT library www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[LINEAR_INT calculates an output based on a linear interpolation of up to 20 coordinates given in an array the input coordinates have to start at the lowest array position and must be sorted ba ascending X values.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="F_TO_C" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="FAHRENHEIT">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[F_TO_C := (fahrenheit - 32.0) * 0.5555555555555;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="C_TO_F" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="CELSIUS">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[C_TO_F := celsius * 1.8 + 32.0;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function converts celsius  to fahrenheit ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="EXP10" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="x">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[exp10 := EXP(X * 2.30258509299405);
(* from OSCAT library; www.OSCAT.de  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[calculates the exponent to the basis 10]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ONTIME" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="SECONDS">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="CYCLES">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ms">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= T_PLC_MS(en:=true);

(* make sure the first cycle works correctly *)
IF NOT init THEN
	init := TRUE;
	last := tx;
	ms := UDINT#0;
END_IF;
IF RST THEN
	SECONDS := UDINT#0;
	CYCLES := UDINT#0;
	last := tx;
	ms := UDINT#0;
ELSIF IN THEN
	(* add the current milliseconds *)
	ms := (tx - last) + ms;
	IF ms >= UDINT#1000 THEN
		seconds := seconds + UDINT#1;
		ms := ms - UDINT#1000;
	END_IF;
	cycles := cycles + BOOL_TO_UDINT(NOT edge);
END_IF;
last := tx;
edge := in;

(* From OSCAT Library, www.OSCAT.de *)
(* T_PLC_MS, R2_ADD required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[ONTIME measures the ontime of a signal in seconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CYCLE_4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="T0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T3">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="S0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SX">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="SL">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="STATE">
              <type>
                <INT/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* init on first cycle *)
IF NOT init THEN
	init := TRUE;
	last := tx;
END_IF;

IF _E THEN
	IF SL THEN
		(* when sx > 0 then the state sx is forced to start *)
		state:= LIMIT(0,SX,3);
		last := tx;
		(* this is to avoid to reset sx from the calling programm it does work fine on codesys but i am not sure about other systems, because we are writing to an input *)
		SL := FALSE;
	ELSE
		CASE state OF
			0 :	(* wait for T0 and switch to next cycle *)
				IF tx - last >= T0 THEN
					state := 1;
					last := tx;
				END_IF;
			1 : (* wait for T1 over 1st cycle *)
				IF tx - last >= T1 THEN
					state := 2;
					last := tx;
				END_IF;
			2 : (* wait for T1 over 1st cycle *)
				IF tx - last >= T2 THEN
					state := 3;
					last := tx;
				END_IF;
			3 : (* wait for T2 over 2nd cycle *)
				IF tx - last >= T3 THEN
					IF S0 THEN State := 0; END_IF; (* if S0 is false, the sequence stops at state 3 *)
					last := tx;
				END_IF;
		END_CASE;
	END_IF;
ELSE
	state := 0;
	last := tx;
END_IF;
]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="TREND_DW" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="X">
              <type>
                <DWORD/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_D">
              <type>
                <DWORD/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_x">
              <type>
                <DWORD/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF X > last_X THEN
	TU := TRUE;
	TD := FALSE;
	_D := UDINT_TO_DWORD(DWORD_TO_UDINT(X) - DWORD_TO_UDINT(last_X));
	Q := TRUE;
ELSIF X < last_X THEN
	TD := TRUE;
	TU := FALSE;
	_D := UDINT_TO_DWORD(DWORD_TO_UDINT(last_X) - DWORD_TO_UDINT(X));
	Q := FALSE;
ELSE
	TU := FALSE;
	TD := FALSE;
	_D := DWORD#0;
END_IF;
last_X := X;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[trend_DW analyses the trend of a input signal.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_RMP_NEXT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="TR">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TF">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TL">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="DIR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="OUT">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="rmx">
              <type>
                <derived name="_RMP_B"/>
              </type>
            </variable>
            <variable name="dirx">
              <type>
                <derived name="TREND_DW"/>
              </type>
            </variable>
            <variable name="t_lock">
              <type>
                <derived name="TP"/>
              </type>
            </variable>
            <variable name="xen">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="xdir">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[dirx(X := BYTE_TO_DWORD(in));

t_lock(in := FALSE, pt := TL);

IF dirx.TU AND (OUT < IN) THEN
	IF NOT xdir AND xen THEN t_lock(in := TRUE); END_IF;
	xen := TRUE;
	xdir := TRUE;
ELSIF dirx.TD AND (OUT > IN) THEN
	IF xdir AND xen THEN t_lock(in := TRUE); END_IF;
	xen := TRUE;
	xdir := FALSE;
ELSIF xen THEN
	IF (xdir AND (out >= in)) OR (NOT xdir AND (out <= in)) THEN
		xen := FALSE;
		IF tl > t#0s THEN t_lock(IN := TRUE); END_IF;
	END_IF;
END_IF;

IF NOT t_lock.Q AND xen THEN
	UP := XDIR;
	DIR := XDIR;
	DN := NOT XDIR;
ELSE
	UP := FALSE;
	DN := FALSE;
END_IF;

rmx(rmp := OUT, _E := _E AND (UP OR DN) , dir := DIR, tr := SEL(dir, TF, TR));
OUT := rmx.RMP;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[_RMP_NEXT  will generate a ramp output following the input IN.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BAND_B" pouType="function">
        <interface>
          <returnType>
            <BYTE/>
          </returnType>
          <inputVars>
            <variable name="X">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="B">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF X < B THEN
	BAND_B := BYTE#0;
ELSIF X > USINT_TO_BYTE(USINT#255 - BYTE_TO_USINT(B)) THEN
	BAND_B := BYTE#255;
ELSE
	BAND_B := X;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[BAND_B will limit X to B ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="FRMP_B" pouType="function">
        <interface>
          <returnType>
            <BYTE/>
          </returnType>
          <inputVars>
            <variable name="START">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="DIR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TD">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TR">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF TD < TR THEN
	FRMP_B := MIN(UDINT_TO_BYTE(DWORD_TO_UDINT(SHL(TIME_TO_DWORD(TD), 8)) / TIME_TO_UDINT(TR)), SEL(DIR, START, USINT_TO_BYTE(USINT#255 - BYTE_TO_USINT(START))));
	IF DIR THEN
		FRMP_B := USINT_TO_BYTE(BYTE_TO_USINT(START) + BYTE_TO_USINT(FRMP_B));
	ELSE
		FRMP_B := USINT_TO_BYTE(BYTE_TO_USINT(START) - BYTE_TO_USINT(FRMP_B));
	END_IF;
ELSE
	FRMP_B := SEL(DIR, BYTE#0, BYTE#255);
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates a ramp and limits the output to 0 .. 255 without overflow problems]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="RMP_B" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="BUSY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="HIGH">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="LOW">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rmp">
              <type>
                <derived name="_RMP_B"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[rmp(dir := UP, _E := _E, TR := PT, RMP := out);
out := rmp.RMP;

(* set or reset operation *)
IF RST THEN
	out := BYTE#0;
ELSIF SET THEN
	out := BYTE#255;
END_IF;

(* checks for outputs stable and reset or set busy flag *)
low := out = BYTE#0;
high := out = BYTE#255;
busy := NOT (low OR high) AND _E;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this ramp generator generates a byte wide ramp with 255 steps the generator has an asynchronous set and reset]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="_RMP_B" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="DIR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="TR">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="RMP">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tl">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tn">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="last_dir">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <BYTE/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := UDINT_TO_TIME(T_PLC_MS(en:=true));

IF _E AND init AND (dir = last_dir) AND (RMP <> SEL(DIR, BYTE#0, BYTE#255)) AND TR = tn THEN
	RMP := FRMP_B(start, DIR, tx - tl, TR);
ELSE
	init := TRUE;
	tl := tx;
	tn := tr;
	start := RMP;
END_IF;
last_dir := dir;

(* From OSCAT Library, www.OSCAT.de *)
(* T_PLC_MS requires *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[_RMP_B generates a ramp on an external var of type byte]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="GEN_PULSE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ENQ">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="PTH">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="PTL">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tn">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF enq THEN
		tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));
	IF NOT init THEN init := TRUE; tn := tx; END_IF;
	IF tx - tn >= SEL(Q, PTL, PTH) THEN
		tn := tn + SEL(Q, PTL, PTH);
		Q := NOT Q;
	END_IF;
ELSE
	Q := FALSE;
	init := FALSE;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)
(* T_PLC_MS required*)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[GEN_PULSE uses the internal sps timer to generate a continuous output waveform with programmable high and low time.]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="T_PLC_MS" pouType="function">
        <interface>
          <returnType>
            <UDINT/>
          </returnType>
          <localVars>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
          <inputVars>
            <variable name="debug">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="N">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="offset">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="temp">
              <type>
                <DWORD/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := 0;

{extern unsigned long __tick;
extern unsigned long long common_ticktime__;
unsigned long long ticktime_ms = (common_ticktime__)/1000000;
UDINT plc_time = (UDINT)(ticktime_ms * (unsigned long long)__tick);
TX = plc_time}

T_PLC_MS := tx;
IF debug THEN
	T_PLC_MS := (DWORD_TO_UDINT(SHL(UDINT_TO_DWORD(T_PLC_MS),N) OR SHL(temp,N))-1) + OFFSET;
END_IF;

(* Original Code:
tx := TIME();
T_PLC_MS := TIME_TO_DWORD(Tx);
IF debug THEN
	T_PLC_MS := (SHL(T_PLC_MS,N) OR SHL(DWORD#1,N)-1) + OFFSET;
END_IF;
*)

(* From OSCAT library, www.OSCAT.de

this is a temporary T_PLC_MS FB until OpenPLC gets it´s own time() functionality *)

(* PLC_TIME and Global variables PLC_SCAN_CYCL and PLC_CYCL_TIME required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Output current execution time in miliseconds]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="program0" pouType="program">
        <interface>
          <localVars>
            <variable name="LocalVar0">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="LocalVar2">
              <type>
                <DINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <FBD>
            <block localId="1" typeName="ADD" executionOrderId="0" height="60" width="70">
              <position x="600" y="140"/>
              <inputVariables>
                <variable formalParameter="IN1">
                  <connectionPointIn>
                    <relPosition x="0" y="30"/>
                    <connection refLocalId="2">
                      <position x="600" y="170"/>
                      <position x="550" y="170"/>
                    </connection>
                  </connectionPointIn>
                </variable>
                <variable formalParameter="IN2">
                  <connectionPointIn>
                    <relPosition x="0" y="50"/>
                    <connection refLocalId="3">
                      <position x="600" y="190"/>
                      <position x="575" y="190"/>
                      <position x="575" y="200"/>
                      <position x="550" y="200"/>
                    </connection>
                  </connectionPointIn>
                </variable>
              </inputVariables>
              <inOutVariables/>
              <outputVariables>
                <variable formalParameter="OUT">
                  <connectionPointOut>
                    <relPosition x="70" y="30"/>
                  </connectionPointOut>
                </variable>
              </outputVariables>
            </block>
            <inVariable localId="2" executionOrderId="0" height="30" width="90" negated="false">
              <position x="460" y="150"/>
              <connectionPointOut>
                <relPosition x="90" y="20"/>
              </connectionPointOut>
              <expression>LocalVar0</expression>
            </inVariable>
            <inVariable localId="3" executionOrderId="0" height="30" width="90" negated="false">
              <position x="460" y="180"/>
              <connectionPointOut>
                <relPosition x="90" y="20"/>
              </connectionPointOut>
              <expression>LocalVar1</expression>
            </inVariable>
            <outVariable localId="4" executionOrderId="0" height="30" width="90" negated="false">
              <position x="720" y="160"/>
              <connectionPointIn>
                <relPosition x="0" y="10"/>
                <connection refLocalId="1" formalParameter="OUT">
                  <position x="720" y="170"/>
                  <position x="670" y="170"/>
                </connection>
              </connectionPointIn>
              <expression>LocalVar2</expression>
            </outVariable>
          </FBD>
        </body>
      </pou>
      <pou name="ACTUATOR_2P" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="TEST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ARE">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="CYCLE_TIME">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="SENS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="SELF_ACT_TIME">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="SELF_ACT_PULSE">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="SELF_ACT_CYCLES">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ARO">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="ARX">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="timer">
              <type>
                <derived name="AUTORUN"/>
              </type>
            </variable>
            <variable name="pwgen">
              <type>
                <derived name="GEN_PULSE"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* run the autorun timer *)
timer(trun := SELF_ACT_PULSE * (2 * SELF_ACT_CYCLES), toff := SELF_ACT_TIME, Test := TEST, ARE := ARE, arx := ARX);
ARO := timer.ARO;

(* run the pulse width generator *)
IF aro THEN
	pwgen(PTL := SELF_ACT_PULSE, PTH := SELF_ACT_PULSE);
	out := pwgen.Q;
ELSIF in < sens THEN
	out := FALSE;
ELSIF BYTE_TO_USINT(in) > USINT#255 - BYTE_TO_USINT(sens) THEN
	out := TRUE;
ELSE
	pwgen.PTH := udint_to_time((time_to_udint(CYCLE_TIME) * BYTE_TO_udint(BAND_B(IN,SENS))  ) / BYTE_TO_udint(BYTE#255));
	pwgen.PTL := CYCLE_TIME - pwgen.PTH;
	pwgen();
	out := pwgen.Q;
END_IF;




(* From OSCAT Library, www.OSCAT.de *)
(* AUTORUN, GEN_PULE, BAND_B required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this is an intelligent actuator interface for any 2point actuator ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="AUTORUN" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TEST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ARE">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="TRUN">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TOFF">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ARO">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="ARX">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="timer">
              <type>
                <derived name="_RMP_B"/>
              </type>
            </variable>
            <variable name="val">
              <type>
                <BYTE/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* run the integrator when T_off > T#0s *)
IF TOFF > T#0s THEN
	timer(DIR:= OUT, TR := SEL(OUT, TOFF, TRUN), RMP := val);
	val := timer.RMP;
ELSE
	val := BYTE#255;
END_IF;


(* when timer = 0 or test then initiate autorun until timer reaches 255 *)
IF (NOT ARX AND ARE AND val = BYTE#0) OR TEST THEN
	val := BYTE#0;
	ARO := TRUE;
	ARX := TRUE;
ELSIF val = BYTE#255 AND ARO THEN
	ARO := FALSE;
	ARX := FALSE;
END_IF;

(* output is true when autorun ARO is true or in = TRUE *)
out := IN OR ARO;

(* From OSCAT Library, www.OSCAT.de *)
(* _RMP_B required *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="ACTUATOR_3P" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="TEST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ARE">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="END_POS">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_RUN">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#60s"/>
              </initialValue>
            </variable>
            <variable name="T_EXT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10s"/>
              </initialValue>
            </variable>
            <variable name="T_CAL">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#600s"/>
              </initialValue>
            </variable>
            <variable name="T_DIAG">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10d"/>
              </initialValue>
            </variable>
            <variable name="SWITCH_AVAIL">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OUT2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="POS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="ERROR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="ARX">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="_ramp">
              <type>
                <derived name="_RMP_NEXT"/>
              </type>
            </variable>
            <variable name="next_cal">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="next_diag">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx := UDINT_TO_TIME(T_PLC_MS(en:=true));

(* check test input *)
IF TEST THEN
	status := BYTE#103;
	start := tx;
	ARX := TRUE;
END_IF;

CASE BYTE_TO_INT(status) OF
	0:	(* power on setup *)
		IF ARE AND NOT ARX THEN
			status := BYTE#103;
			start := tx;
			ARX := TRUE;
		END_IF;

	100:	(* normal operation *)
		(* check for auto diagnostics *)
		IF T_DIAG > T#0s AND tx > next_diag AND ARE AND NOT ARX THEN
				status := BYTE#103;
				start := tx;
				ARX := TRUE;

		(* check for auto calibration *)
		ELSIF T_CAL > T#0s AND tx > next_cal AND ARE AND NOT ARX THEN
			IF pos > BYTE#127 THEN
				OUT1 := TRUE;
				OUT2 := FALSE;
				_ramp.IN := BYTE#255;
				ARX := TRUE;
			ELSE
				OUT1 := FALSE;
				OUT2 := TRUE;
				_ramp.IN := BYTE#0;
				ARX := TRUE;
			END_IF;
			status := BYTE#101;
			start := tx;
		ELSE
			(* increment next_cal if not active *)
			IF NOT(OUT1 OR OUT2) THEN next_cal := next_cal + (tx-last); END_IF;
			(* set ramp generator to IN *)
			_ramp.IN := IN;
		END_IF;

	101:	(* calibrate *)
		IF tx - start < T_EXT THEN
			next_cal := tx + T_CAL;
		ELSIF SWITCH_AVAIL AND END_POS THEN
			STATUS := BYTE#100;
			ARX := FALSE;
		ELSIF tx - start > T_EXT + T_RUN THEN
			ERROR := SWITCH_AVAIL;
			ARX := FALSE;
		END_IF;

	103:	(* diagnostics up*)
		(* run up for T_ext *)
		IF tx - start < T_EXT THEN
			ERROR := FALSE;
			_ramp.TR := T_RUN;
			_ramp.TF := T_RUN;
			OUT1 := TRUE;
			OUT2 := FALSE;
			_ramp.IN := BYTE#255;
		ELSIF SWITCH_AVAIL AND END_POS THEN
			_ramp.TR := tx - start;
			STATUS := BYTE#104;
		ELSIF tx - start > T_EXT + T_RUN THEN
			ERROR := SWITCH_AVAIL;
			STATUS := BYTE#104;
			start := tx;
		END_IF;

	104:	(* diagnostics dn*)
		IF tx - start < T_ext THEN
			OUT1 := FALSE;
			OUT2 := TRUE;
			_ramp.IN := BYTE#0;
			next_diag := tx + T_DIAG;
		ELSIF SWITCH_AVAIL AND END_POS THEN
			_ramp.TR := tx - start;
			(* check if runtimes differ by more than 10% *)
			IF DINT_TO_TIME(ABS(TIME_TO_DINT(_ramp.TR) - TIME_TO_DINT(_ramp.TF)) * DINT#10) > T_RUN THEN error := TRUE; END_IF;
			STATUS := BYTE#100;
			ARX := FALSE;
			next_cal := tx + T_CAL;
		ELSIF tx - start > T_EXT + T_RUN THEN
			IF SWITCH_AVAIL THEN ERROR := TRUE; END_IF;
			STATUS := BYTE#100;
			ARX := FALSE;
			next_CAL := tx + T_CAL;
		END_IF;
END_CASE;

(* internal flap simulation and output activation *)
_ramp(OUT := POS);
POS := _ramp.OUT;
IF STATUS = BYTE#100 THEN
	OUT1 := _ramp.UP;
	OUT2 := _ramp.DN;
END_IF;

(* adjust position if end switch is active *)
IF SWITCH_AVAIL AND END_POS THEN
	POS := SEL(POS > BYTE#127, BYTE#0, BYTE#255);
	next_cal := tx + T_CAL;
END_IF;

(* set last to tx for next cycle *)
last := tx;

(* From OSCAT Library, www.OSCAT.de *)
(* _RMP_NEXT required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[actuator_3P is an interface for a 3 point actuator]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ACTUATOR_A" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="I1">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="I2">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="IS">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RV">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DX">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RUNTIME">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="SELF_ACT_TIME">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="OUT_MIN">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="OUT_MAX">
              <type>
                <DWORD/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Y">
              <type>
                <DWORD/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="timer">
              <type>
                <derived name="CYCLE_4"/>
              </type>
            </variable>
            <variable name="dx_edge">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* run the system timer, if self_act_time = t#0s then state is set to 0 *)
timer(T0 := RUNTIME, T1 := RUNTIME, T3 := SELF_ACT_TIME, sl := DX AND NOT dx_edge, sx := 0, S0 := SELF_ACT_TIME > t#0s);
dx_edge := dx;

CASE timer.STATE OF
	0: 	(* self act min value *)
		Y := OUT_MIN;
	1:	(* self_act max value *)
		Y := OUT_MAX;
	3:	(* normal operation *)
		IF rv THEN
			Y := UDINT_TO_DWORD(DWORD_TO_UDINT(OUT_MAX) - (DWORD_TO_UDINT(OUT_MAX) - DWORD_TO_UDINT(OUT_MIN)) * BYTE_TO_UDINT(SEL(IS, I1, I2)) / UDINT#255);
		ELSE
			Y := UDINT_TO_DWORD((DWORD_TO_UDINT(OUT_MAX) - DWORD_TO_UDINT(OUT_MIN)) * BYTE_TO_UDINT(SEL(IS, I1, I2)) / UDINT#255 + DWORD_TO_UDINT(OUT_MIN));
		END_IF;
END_CASE;

(* From OSCAT Library, www.OSCAT.de *)
(* Cycle_4 required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[ACTUATOR_A drives any valve or similar with 0 - 100% analog control]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ACTUATOR_COIL" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SELF_ACT_CYCLE">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10d"/>
              </initialValue>
            </variable>
            <variable name="SELF_ACT_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1s"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="OUT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="now">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[now := T_PLC_MS(en:=true);

(* initialize for first cycle *)
IF NOT init THEN
	last := now;
	init := TRUE;
ELSIF IN THEN
	OUT := TRUE;
	STATUS := BYTE#101; (* activated by input *)
	LAST := now;
ELSE
	OUT := FALSE;
	STATUS := BYTE#100; (* disabled *)
	(* now we need to check for self activation *)
	tx := now - last;
	IF (self_act_cycle > T#0s) AND (tx >= TIME_TO_UDINT(self_act_cycle)) THEN
		OUT := TRUE;
		STATUS := BYTE#102; (* auto activation *)
		IF tx >= TIME_TO_UDINT(self_act_cycle + self_act_time) THEN
			last := now;
			OUT := FALSE;
			STATUS := BYTE#100; (* idle *)
		END_IF;
	END_IF;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this is an intelligent actuator interface for any coil actuator]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ACTUATOR_PUMP" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MANUAL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="MIN_ONTIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10s"/>
              </initialValue>
            </variable>
            <variable name="MIN_OFFTIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10s"/>
              </initialValue>
            </variable>
            <variable name="RUN_EVERY">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10000m"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="PUMP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RUNTIME">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="CYCLES">
              <type>
                <UDINT/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last_change">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="meter">
              <type>
                <derived name="ONTIME"/>
              </type>
            </variable>
            <variable name="old_man">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

IF NOT init THEN
	init := TRUE;
	last_change := tx;
ELSIF rst THEN
	rst := FALSE;
	runtime := UDINT#0;
	cycles := UDINT#0;
ELSIF manual AND NOT pump AND NOT old_man THEN
	last_change := tx;
	pump := TRUE;
ELSIF NOT manual AND old_man AND pump AND NOT in THEN
	last_change := tx;
	pump := FALSE;
ELSIF in AND NOT pump AND tx - last_change >= min_offtime THEN
	last_change := tx;
	pump := TRUE;
ELSIF pump AND NOT in AND NOT manual AND tx - last_change >= min_ontime THEN
	last_change := tx;
	pump := FALSE;
ELSIF NOT pump AND (tx - last_change >= run_every) AND (run_every > T#0s) THEN
	last_change := tx;
	pump := TRUE;
END_IF;

meter(in := pump, SECONDS := runtime, CYCLES := cycles);
cycles := meter.CYCLES;
runtime := meter.SECONDS;

old_man := manual;

(* From OSCAT Library, www.OSCAT.de *)
(* T_PLC_MS, ONTIME required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[actuator_pump is a pump interface which can be controlled by an input in and an input manual]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="ACTUATOR_UD" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MANUAL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OFF">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="YUP_IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="YDN_IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OUT_RETURN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_TON">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="_TOFF">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="YUP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="YDN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

IF NOT init THEN
	(* INITIALIZATION AT FIRST CALL *)
	last := tx;
	init := TRUE;
ELSIF off THEN
	(* emergency shut off detected *)
	Yup := FALSE;
	Ydn := FALSE;
	last := tx;
	status := BYTE#101;

(* WATH FOR MIN TON TIME *)
ELSIF ((Yup OR Ydn) AND tx - last < _Ton) THEN RETURN;
ELSIF NOT yup AND NOT ydn AND tx - last < _toff THEN	RETURN;

(* manual operation *)
ELSIF manual THEN
	status := BYTE#102;
	(* directional chage set both outs 0 first *)
	IF yup AND NOT up OR ydn AND NOT dn THEN
		ydn := FALSE;
		yup := FALSE;
		last := tx;
	(* manual up operation *)
	ELSIF UP AND NOT DN AND NOT OFF THEN
		Ydn := FALSE;
		Yup := TRUE;
		last := tx;
		status := BYTE#103;
	(* manual down operation *)
	ELSIF DN AND NOT UP AND NOT OFF THEN
		Yup := FALSE;
		Ydn := TRUE;
		last := tx;
		status := BYTE#104;
	(* maual mode but no up or down *)
	ELSE
		IF YUP OR YDN THEN LAST := tx; END_IF;
		Yup := FALSE;
		Ydn := FALSE;
	END_IF;

(* automatic operation *)
ELSE
	(* directional change set outputs low first *)
	IF yup AND NOT ud OR ydn AND UD THEN
		yup := FALSE;
		ydn := FALSE;
		last := tx;
	(* automatic up operation *)
	ELSIF Ud AND _on AND NOT OFF THEN
		Ydn := FALSE;
		Yup := TRUE;
		last := tx;
		status := BYTE#111;

	(* automatic down operation *)
	ELSIF NOT UD AND _on AND NOT OFF THEN
		Yup := FALSE;
		Ydn := TRUE;
		last := tx;
		status := BYTE#112;
	(* standby mode *)
	ELSE
		IF Yup OR Ydn THEN last := tx; END_IF;
		Yup := FALSE;
		Ydn := FALSE;
		status := BYTE#110;
	END_IF;
END_IF;

(* make sure Yup and Ydn are never on at the same time *)
IF Ydn AND Yup_in AND out_return THEN
	Ydn := FALSE;
	status := BYTE#1;
END_IF;
IF Yup AND Ydn_in AND out_return THEN
	Yup := FALSE;
	status := BYTE#2;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[out_ud is a up/dn or Right/left locked output driver]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="AIR_DENSITY" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="P">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="RH">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[AIR_DENSITY := 101325.0 * (1.0 - RH * SDD(_T, TRUE) * 3.773319E-3 / P) / (287.05 * ( _T - -273.15));

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the air density between 0 and 100 deg C]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SDD" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="ICE">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF ice THEN
	SDD := 611.153 * EXP(22.4433 * _T / (272.186 + _T));
ELSE
	SDD := 611.213 * EXP(17.5043 * _T / (241.2 + _T));
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the vapor saturation pressure ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="AIR_ENTHALPY" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="RH">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[Air_enthalpy := 1.00482 * _T + (1.86 * _T + 2500.78) * dew_con(RH,_T);

(* From OSCAT Library, www.OSCAT.de *)
(* DEW_CON required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the enthalpy for humid air ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DEW_CON" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="RH">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF RH > 0.0 AND _T > -50.0 THEN
	DEW_CON := 2.166824303E-2 * RH * SDD(_T,FALSE)  / (_T - -273.15);
ELSE
	DEW_CON := 0.0;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the water concentratin in air]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BOILER" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="T_UPPER">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T_LOWER">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="PRESSURE">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="ENABLE">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="REQ_1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="REQ_2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="BOOST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_UPPER_MIN">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="50.0"/>
              </initialValue>
            </variable>
            <variable name="T_UPPER_MAX">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="60.0"/>
              </initialValue>
            </variable>
            <variable name="T_LOWER_ENABLE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_LOWER_MAX">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="60.0"/>
              </initialValue>
            </variable>
            <variable name="T_REQUEST_1">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="70.0"/>
              </initialValue>
            </variable>
            <variable name="T_REQUEST_2">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="50.0"/>
              </initialValue>
            </variable>
            <variable name="T_REQUEST_HYS">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="5.0"/>
              </initialValue>
            </variable>
            <variable name="T_PROTECT_HIGH">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="80.0"/>
              </initialValue>
            </variable>
            <variable name="T_PROTECT_LOW">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="10.0"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="HEAT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ERROR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="boost_mode">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="flag_0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="flag_1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="flag_2">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* read sensors and check for valid data *)
IF t_upper > t_protect_high THEN
	status := BYTE#1;
	heat := FALSE;
	error := TRUE;
ELSIF t_upper < t_protect_low THEN
	status := BYTE#2;
	heat := TRUE;
	error := TRUE;
ELSIF t_lower > T_protect_high AND t_lower_enable THEN
	status := BYTE#3;
	heat := FALSE;
	error := TRUE;
ELSIF t_lower < t_protect_low AND t_lower_enable THEN
	status := BYTE#4;
	heat := TRUE;
	error := TRUE;
ELSIF NOT pressure THEN
	status := BYTE#5;
	heat := FALSE;
	error := TRUE;
ELSIF req_1 OR req_2 OR enable OR boost THEN
	error := FALSE;

	(* determine if heat needs to be turned on *)
	IF boost AND NOT edge AND t_upper < t_upper_max THEN
		status := BYTE#101;
		heat := TRUE;
		boost_mode := TRUE;
	ELSIF enable AND t_upper < T_upper_min THEN
		status := BYTE#102;
		heat := TRUE;
	ELSIF req_1 AND t_upper < T_request_1 THEN
		status := BYTE#103;
		heat := TRUE;
	ELSIF req_2 AND t_upper < t_request_2 THEN
		status := BYTE#104;
		heat := TRUE;
	END_IF;

	(* determine the shut off temperature *)
	IF heat THEN
		IF (enable OR boost_mode) THEN
			flag_0 := TRUE;
			IF T_lower_enable AND T_lower > T_lower_max THEN
				flag_0 := FALSE;
				boost_mode := FALSE;
			ELSIF NOT T_lower_enable AND T_upper > T_upper_max THEN
				flag_0 := FALSE;
				boost_mode := FALSE;
			END_IF;
		ELSE
			flag_0 := FALSE;
		END_IF;
		flag_1 := (req_1 AND T_upper > T_request_1 + T_request_hys) AND req_1;
		flag_2 := (req_2 AND T_upper > T_request_2 + T_request_hys) AND req_2;

		(* shut off heat if no longer needed *)
		heat := flag_0 OR flag_1 OR flag_2;
		IF heat = FALSE THEN status := BYTE#100; END_IF;
	END_IF;
ELSE
	status := BYTE#100;
	heat := FALSE;
	error := FALSE;
END_IF;
edge := boost;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function block controls a hot water boiler]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BURNER" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STAGE2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OVER_TEMP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OIL_TEMP">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="FLAME">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST_TIMER">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PRE_HEAT_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#5s"/>
              </initialValue>
            </variable>
            <variable name="PRE_VENT_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#15s"/>
              </initialValue>
            </variable>
            <variable name="PRE_IGNITE_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#15s"/>
              </initialValue>
            </variable>
            <variable name="POST_IGNITE_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#25s"/>
              </initialValue>
            </variable>
            <variable name="STAGE2_DELAY">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10s"/>
              </initialValue>
            </variable>
            <variable name="SAFETY_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#5s"/>
              </initialValue>
            </variable>
            <variable name="LOCKOUT_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10s"/>
              </initialValue>
            </variable>
            <variable name="MULTIPLE_IGNITION">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="KW1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="KW2">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="MOTOR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="COIL1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="COIL2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PRE_HEAT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="IGNITE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="FAIL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="KWH">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="RUNTIME1">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="RUNTIME2">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="CYCLES">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="state">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last_change">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="timer1">
              <type>
                <derived name="ONTIME"/>
              </type>
            </variable>
            <variable name="timer2">
              <type>
                <derived name="ONTIME"/>
              </type>
            </variable>
            <variable name="oil_temp_last">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="cycles2">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* check rst input and overtemp *)
IF rst OR over_temp OR state = 0 THEN
	IF status > BYTE#0 AND tx - last_change >= lockout_time AND rst THEN
		status := BYTE#110;
		fail := FALSE;
		state := 1;
	ELSE
		(* normaler reset *)
		motor := FALSE;
		coil1 := FALSE;
		coil2 := FALSE;
		ignite := FALSE;
		pre_heat := FALSE;
		IF over_temp THEN
			status := BYTE#9;
			fail := TRUE;
		END_IF;
		last_change := tx;
		last := tx;
		state := 1;
	END_IF;
END_IF;

(* check for timer rst and rst timer if true *)
IF rst_timer THEN
	runtime1 := UDINT#0;
	runtime2 := UDINT#0;
	cycles := UDINT#0;
	cycles2 := UDINT#0;
END_IF;

(* quit here if an error is present *)
IF (status > BYTE#0 AND status < BYTE#100) OR rst THEN RETURN; END_IF;

(* start sequence *)
CASE state OF

1:	(* in signal starts oil pre heating *)
	IF in AND flame THEN
		state := 7;
		pre_heat := FALSE;
		status := BYTE#2;
		last_change := tx;
	ELSIF in THEN
		pre_heat := TRUE;
		state := 2;
		last_change := tx;
	END_IF;

2:	(* after pre_heating time start motor *)
	IF (tx- last_change >= pre_heat_time AND oil_temp) OR (oil_temp AND NOT oil_temp_last) THEN
		motor := TRUE;
		state := 3;
		last_change := tx;
	(* pre_heat_time ist abgelaufen und oil_temp ist nicht aktiv *)
	ELSIF tx - last_change >= pre_heat_time AND NOT oil_temp THEN
		state := 7;
		pre_heat := FALSE;
		status := BYTE#1;
		last_change := tx;
	(* flame monitor cannot be active at this time *)
	ELSIF flame THEN
		state := 7;
		pre_heat := FALSE;
		status := BYTE#2;
		last_change := tx;
	END_IF;

3:	(* abwarten bis zündung eingeschaltet werden kann *)
	IF tx - last_change >= pre_vent_time - pre_ignite_time THEN
		ignite := TRUE;
		state := 4;
		last_change := tx;
	(* flame monitor cannot be active at this time *)
	ELSIF flame THEN
		state := 7;
		pre_heat := FALSE;
		motor := FALSE;
		status := BYTE#3;
		last_change := tx;
	END_IF;

4:	(* warten bis oelzufuhr geoeffnet werden darf *)
	IF tx - last_change >= pre_ignite_time THEN
		coil1 := TRUE;
		state := 5;
		last_change := tx;
	END_IF;

5:	(* warten auf flammwaechter und falls noetig abschalten *)
	IF tx - last_change >= safety_time OR flame THEN
		IF NOT flame THEN
			(* notabschaltung da flammwaechster nicht angesprochen hat *)
			state := 7;
			motor := FALSE;
			coil1 := FALSE;
			pre_heat := FALSE;
			ignite := FALSE;
			status := BYTE#4;
			last_change := tx;
		ELSE
			state := 6;
			last_change := tx;
		END_IF;
	END_IF;

6:	(* brenner läuft, flammueberwachung und nach ablauf der nachigniteszeit ignite abschalten *)
	IF NOT flame AND NOT multiple_ignition THEN
		(* notabschaltung da flammwaechster keine flamme meldet *)
		state := 7;
		motor := FALSE;
		coil1 := FALSE;
		coil2 := FALSE;
		pre_heat := FALSE;
		ignite := FALSE;
		status := BYTE#5;
		last_change := tx;
	ELSIF NOT flame AND multiple_ignition THEN
		ignite := TRUE;
		state := 5;
		coil2 := FALSE;
		last_change := tx;
	ELSE
		IF tx - last_change >= post_ignite_time THEN
			(* post_ignite_time abgelaufen, ignite abschalten *)
			ignite := FALSE;
		END_IF;
		IF tx - last_change >= stage2_delay AND stage2 THEN
			coil2 := TRUE;
		ELSE
			coil2 := FALSE;
		END_IF;
	END_IF;
END_CASE;

(* abschaltung wenn kein eingangssignal *)
IF NOT in THEN
	state := 1;
	motor := FALSE;
	coil1 := FALSE;
	coil2 := FALSE;
	ignite := FALSE;
	pre_heat := FALSE;
	last_change := tx;
END_IF;

(* runtimezähler *)
timer1(in := flame AND in AND motor AND coil1 AND NOT coil2, SECONDS := runtime1, CYCLES := cycles);
cycles := timer1.CYCLES;
runtime1 := timer1.SECONDS;

timer2(in := flame AND in AND motor AND coil1 AND coil2, SECONDS := runtime2, CYCLES := cycles2);
cycles2 := timer2.CYCLES;
runtime2 := timer2.SECONDS;

KWH := UDINT_TO_REAL(runtime1) * KW1 / 3600.0 + UDINT_TO_REAL(runtime2) * KW2 / 3600.0;

(* zeit fuer naechsten aufruf merken *)
last := tx;

(* set fail output IF ERROR and Status  if normal operation *)

IF status > BYTE#0 AND status < BYTE#100 THEN
	fail := TRUE;
ELSE
	fail := FALSE;
	IF NOT in THEN
		status := BYTE#110;
	ELSIF flame AND in AND motor AND coil2 AND coil1 THEN
		status := BYTE#113;
	ELSIF flame AND in AND motor AND coil1 THEN
		status := BYTE#112;
	ELSE
		status := BYTE#111;
	END_IF;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)
(* T_PLC_MS, ONTIME required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[burner ist eine Oel-Brenner_steuerung fuer nichtmodulierende Oelbrenner]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DEW_RH" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="VC">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[DEW_RH := LIMIT(0.0, VC / DEW_CON(1.0, _T), 100.0);

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the relative humidity ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DEW_TEMP" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="RH">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="V">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF rh > 0.0 THEN
	V := LOG(RH * 0.01 * EXP10((7.5*_T) / (237.3+_T)));
	DEW_TEMP := 237.3*V / (7.5-V);
ELSE
	DEW_TEMP:= -273.15;
END_IF;
]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the dew point ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="HEAT_INDEX" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="RH">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="RH2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="TX">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF RH < 20.0 OR _T < 20.0 THEN
	HEAT_INDEX := _t;
ELSE
	TX := _T;
	RH2 := RH * RH;
	TX := C_TO_F(TX);
	T2 := TX * TX;
	HEAT_INDEX := -42.379 + 2.04901523 * TX - 6.83783E-3 * T2
			+ RH * (10.1433127 - 0.22475541 * TX + 1.22874E-3 * T2)
			+ RH2 * (8.5282E-4 * TX - 5.481717E-2 - 1.99E-6 * T2);
	HEAT_INDEX := F_TO_C(HEAT_INDEX);
END_IF;

(* From OSCAT Library, www.OSCAT.de *)
(* C_TOF, F_TOC required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the heat index temperature ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="WATER_DENSITY" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="SAT">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="T2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T4">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[T2 := _T * _T;
T4 := T2 * T2;
WATER_DENSITY := (999.83952 + 16.952577*_T + -7.9905127E-3*T2 + -4.6241757E-5*T2*_T + 1.0584601E-7*T4 + -2.8103006E-10*T4*_T) / (1.0 + 0.0168872*_T);
IF sat THEN WATER_DENSITY := WATER_DENSITY - 0.004612 + 0.000106 * _T; END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the water density ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="WATER_ENTHALPY" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="Pts">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="11"/>
              </initialValue>
            </variable>
            <variable name="data">
              <type>
                <array>
                  <dimension lower="1" upper="20"/>
                  <dimension lower="0" upper="1"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="0.0"/>
                  </value>
                  <value>
                    <simpleValue value="0.06"/>
                  </value>
                  <value>
                    <simpleValue value="10.0"/>
                  </value>
                  <value>
                    <simpleValue value="42.1"/>
                  </value>
                  <value>
                    <simpleValue value="20.0"/>
                  </value>
                  <value>
                    <simpleValue value="83.9"/>
                  </value>
                  <value>
                    <simpleValue value="30.0"/>
                  </value>
                  <value>
                    <simpleValue value="125.8"/>
                  </value>
                  <value>
                    <simpleValue value="40.0"/>
                  </value>
                  <value>
                    <simpleValue value="167.58"/>
                  </value>
                  <value>
                    <simpleValue value="50.0"/>
                  </value>
                  <value>
                    <simpleValue value="209.4"/>
                  </value>
                  <value>
                    <simpleValue value="60.0"/>
                  </value>
                  <value>
                    <simpleValue value="251.2"/>
                  </value>
                  <value>
                    <simpleValue value="70.0"/>
                  </value>
                  <value>
                    <simpleValue value="293.1"/>
                  </value>
                  <value>
                    <simpleValue value="80.0"/>
                  </value>
                  <value>
                    <simpleValue value="335.0"/>
                  </value>
                  <value>
                    <simpleValue value="90.0"/>
                  </value>
                  <value>
                    <simpleValue value="377.0"/>
                  </value>
                  <value>
                    <simpleValue value="100.0"/>
                  </value>
                  <value>
                    <simpleValue value="419.1"/>
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[WATER_ENTHALPY := LINEAR_INT(_T, data, pts);

(* From OSCAT Library, www.OSCAT.de *)
(* LINEAR_INT required *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="HEAT_METER" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="TF">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="TR">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="LPH">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="CP">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="DENSITY">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="CONTENT">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="PULSE_MODE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RETURN_METER">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="AVG_TIME">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="C">
              <type>
                <REAL/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="Y">
              <type>
                <REAL/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="tx">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <DWORD/>
              </type>
            </variable>
            <variable name="int1">
              <type>
                <derived name="FT_INT2"/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="x">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="y_last">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF rst THEN
	int1(rst := TRUE);
	int1.rst := FALSE;
	C := 0.0;
	Y := 0.0;
ELSIF _e THEN
	X := (WATER_DENSITY(_T:=(SEL(G:=return_meter, IN0:=TF, IN1:=TR)), sat:=FALSE) * (WATER_ENTHALPY(_T:=TF) - WATER_ENTHALPY(_T:=TR)) * (1.0 - content) + CP * Density * content * (TF-TR));
END_IF;

(* integrate or add consumption *)
int1(run := NOT pulse_mode AND _e, in := X * LPH * 2.77777777777E-4);
IF pulse_mode THEN
	IF NOT edge AND _E THEN Y := Y + X * LPH; END_IF;
ELSE
	Y := int1.Out;
END_IF;

(* store the value of e *)
edge := _e;

(* read system_time *)
tx := udint_to_dword(T_PLC_MS(en:=true));

(* only init at startup necessary *)
IF NOT init THEN
	init := TRUE;
	last := tx;
END_IF;

(* calculate the current consumption *)
IF (dword_to_real(tx) - dword_to_real(last) >= TIME_TO_real(AVG_TIME)) AND (avg_time > T#0s) THEN
	last := tx;
	C := (Y - Y_last) * 3.6E6 / DWORD_TO_REAL(TIME_TO_DWORD(AVG_TIME));
	Y_last := Y;
END_IF;

(* from OSCAT library www.oscat.de *)
(* T_PLC_MS, FT_INT2, WATER_ENTHALPY, WATER_DENSITY required *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="HEAT_TEMP" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="T_EXT">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T_INT">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="OFFSET">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T_REQ">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="TY_MAX">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="70.0"/>
              </initialValue>
            </variable>
            <variable name="TY_MIN">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="25.0"/>
              </initialValue>
            </variable>
            <variable name="TY_CONFIG">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="70.0"/>
              </initialValue>
            </variable>
            <variable name="T_INT_CONFIG">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="20.0"/>
              </initialValue>
            </variable>
            <variable name="T_EXT_CONFIG">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="-15.0"/>
              </initialValue>
            </variable>
            <variable name="T_DIFF">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="10.0"/>
              </initialValue>
            </variable>
            <variable name="C">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="1.33"/>
              </initialValue>
            </variable>
            <variable name="H">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="3.0"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="TY">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="HEAT">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tr">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tr := T_INT + OFFSET;
tx := (tr - T_EXT) / (T_INT_CONFIG - T_EXT_CONFIG);

IF T_EXT + H > tr THEN
	TY := 0.0;
ELSE
	TY := LIMIT(TY_MIN, tr + T_DIFF * 0.5 * tx + (TY_CONFIG - T_DIFF * 0.5 - tr) * EXPT(tx, 1.0 / C), TY_MAX);
END_IF;

TY := MAX(TY, T_REQ);
HEAT := TY > 0.0;

(* from OSCAT library www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Heat_Temp calculates a heat characteristic based on the formula]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="LEGIONELLA" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="MANUAL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TEMP_BOILER">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="TEMP_RETURN">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="100.0"/>
              </initialValue>
            </variable>
            <variable name="DT_IN">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_START">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="10800000"/>
              </initialValue>
            </variable>
            <variable name="DAY">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="7"/>
              </initialValue>
            </variable>
            <variable name="TEMP_SET">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="70.0"/>
              </initialValue>
            </variable>
            <variable name="TEMP_OFFSET">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="10.0"/>
              </initialValue>
            </variable>
            <variable name="TEMP_HYS">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="5.0"/>
              </initialValue>
            </variable>
            <variable name="T_MAX_HEAT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10m"/>
              </initialValue>
            </variable>
            <variable name="T_MAX_RET">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10m"/>
              </initialValue>
            </variable>
            <variable name="TP_0">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#5m"/>
              </initialValue>
            </variable>
            <variable name="TP_1">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#5m"/>
              </initialValue>
            </variable>
            <variable name="TP_2">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#5m"/>
              </initialValue>
            </variable>
            <variable name="TP_3">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#5m"/>
              </initialValue>
            </variable>
            <variable name="TP_4">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#5m"/>
              </initialValue>
            </variable>
            <variable name="TP_5">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#5m"/>
              </initialValue>
            </variable>
            <variable name="TP_6">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#5m"/>
              </initialValue>
            </variable>
            <variable name="TP_7">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#5m"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="HEAT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PUMP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VALVE0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VALVE1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VALVE2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VALVE3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VALVE4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VALVE5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VALVE6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VALVE7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RUN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="X1">
              <type>
                <derived name="TIMER_1"/>
              </type>
            </variable>
            <variable name="X2">
              <type>
                <derived name="SEQUENCE_8"/>
              </type>
            </variable>
            <variable name="X3">
              <type>
                <derived name="HYST_1"/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* startup initialization *)
IF NOT init THEN
	init := TRUE;
	X1.day := SHR(BYTE#128,day);
	X1.start := T_start;
	X3.low := Temp_offset + temp_set;
	X3.high := Temp_hys + X3.low;
	X2.wait0 := T_max_heat;
	X2.delay0 := TP_0;
	X2.delay1 := TP_1;
	X2.delay2 := TP_2;
	X2.delay3 := TP_3;
	X2.delay4 := TP_4;
	X2.delay5 := TP_5;
	X2.delay6 := TP_6;
	X2.delay7 := TP_7;
	X2.wait1 := T_max_ret;
	X2.wait2 := T_max_ret;
	X2.wait3 := T_max_ret;
	X2.wait4 := T_max_ret;
	X2.wait5 := T_max_ret;
	X2.wait6 := T_max_ret;
	X2.wait7 := T_max_ret;
	X2();
END_IF;

(* oerational code *)
X1(DTi := DT_in);
IF X1.Q OR MANUAL OR x2.run THEN
	X3(in := temp_boiler);
	X2.in0 := X3.Q OR x3.win;
	X2.in1 := temp_return >= temp_set;
	X2.in2 := x2.in1;
	X2.in3 := x2.in1;
	X2.in4 := x2.in1;
	X2.in5 := x2.in1;
	X2.in6 := x2.in1;
	X2.in7 := x2.in1;
	X2.rst := rst;
	X2(start := X1.Q OR MANUAL);
	run := x2.run;
	pump := x2.QX;
	Heat := NOT X3.Q AND x2.run;
	valve0 := X2.Q0;
	valve1 := X2.Q1;
	valve2 := X2.Q2;
	valve3 := X2.Q3;
	valve4 := X2.Q4;
	valve5 := X2.Q5;
	valve6 := X2.Q6;
	valve7 := X2.Q7;
	pump := X2.QX;
	status := X2.status;
ELSE
	X2(start := false);
	status := x2.status;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)
(* TIMER_1, SEQUENCE_8, HYST_1 required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Legionella is a complete sequencer for up to 8 hot water lines that need to be sterilzed periodically]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TIMECHECK" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="TD">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="START">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="STOP">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF stop < start THEN
	TIMECHECK := start <= TD OR  TD < stop;
ELSE
	TIMECHECK := start <= TD AND TD < stop;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function retruns true if the daytime TD is between start and stop]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TIMER_1" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="_E">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="DTI">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="START">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="DURATION">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="DAY">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="2#0111_1111"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STOP">
              <type>
                <TIME/>
              </type>
            </variable>
          </outputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF _E THEN
	stop := TOD_TO_TIME(START) + DURATION;
	IF stop > T#24h THEN stop := stop - T#24h; END_IF;
	Q := TIMECHECK(_DT_TO_TOD(DTI), START, TIME_TO_TOD(stop)) AND (SHR(BYTE#128, DAY_OF_WEEK(_DT_TO_DATE(DTI))) AND DAY) > BYTE#0;
ELSE
	Q := FALSE; (* clear output when e is not true *)
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this is a simple timer that generates an output pulse on selected days]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DAY_OF_WEEK" pouType="function">
        <interface>
          <returnType>
            <INT/>
          </returnType>
          <inputVars>
            <variable name="IDATE">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[DAY_OF_WEEK := UDINT_TO_INT((idate / UDINT#86400 + UDINT#3) MOD UDINT#7) + INT#01;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="SDD_NH3" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF _T < -33.65 THEN
	SDD_NH3 := EXP(7.3396511649 - ( 1166.7498002 / ( _T + 192.37 )));
ELSE
	SDD_NH3 := EXP(11.210964456 - ( 2564.9140075 / ( _T + 262.741 )));
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the vapor saturation pressure for NH3 gas]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SDT_NH3" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="P">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF P < 1.0E-3 THEN
	SDT_NH3 := -110.0;
ELSIF P < 1.0 THEN
	SDT_NH3 := 506.713 / (3.18757 - LOG(P)) - 192.37 ;
ELSE
	SDT_NH3 := 1113.928 / (4.86886 - LOG(P)) - 262.71 ;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the vapor saturation temperature for NH3 gas]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TANK_LEVEL" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="LEVEL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="LEAK">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ACLR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MAX_VALVE_TIME">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="LEVEL_DELAY_TIME">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="VALVE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ALARM">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="cx">
              <type>
                <derived name="ACTUATOR_COIL"/>
              </type>
            </variable>
            <variable name="tn">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="tl">
              <type>
                <derived name="TONOF"/>
              </type>
            </variable>
            <variable name="open">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* preprocess the level information *)
tl(in := level, T_ON := level_delay_time, T_OFF := level_delay_time);
open := tl.Q;

(* start logic *)
IF ALARM THEN
	(* check for ACLR if ALARM is present *)
	IF ACLR THEN
		ALARM := FALSE;
		STATUS := BYTE#101; (* aclr pressed *)
		cx(in := FALSE);
	END_IF;
	RETURN;
ELSIF LEAK THEN
	(* leakeage detected *)
	cx(in := FALSE);
	ALARM := TRUE;
	STATUS := BYTE#1;	(* leakeage error *)
ELSIF open THEN
	(* valve needs to be opened because level is too low *)
	cx(in := TRUE);
	STATUS := BYTE#102; (* valve open by low level *)
ELSE
	(* valve needs to be closed *)
	cx(in := FALSE);
	STATUS := BYTE#100; (* valve idle *)
END_IF;

(* check if valve is open too long and generate alarm if necessary *)
tn(in := cx.out AND (MAX_VALVE_TIME > T#0s), PT := MAX_VALVE_TIME);
IF tn.Q THEN
	ALARM := TRUE;
	STATUS := BYTE#2; (* overtime error *)
	cx(in := FALSE);
END_IF;

(* set output signal *)
VALVE := cx.out;

(* From OSCAT Library, www.OSCAT.de *)
(* TON, TONOF, ACTUATOR_COIL required *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="TANK_VOL1" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="TR">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="TL">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="H">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[TANK_VOL1 := CIRCLE_SEG(TR, H) * TL;

(* From OSCAT Library, www.OSCAT.de *)
(* CIRCLE_SEG required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TANK_VOL1 calculates the volume of a tubular tank filled to level H]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TANK_VOL2" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="TR">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="H">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[TANK_VOL2 := 3.14159265358979323846264338327950288 * H * H * (TR - H / 3.0);

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TANK_VOL2 calculates the volume of a spherical tank filled to level H]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TEMP_EXT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="T_EXT1">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T_EXT2">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T_EXT3">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="T_EXT_CONFIG">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="DT_IN">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="T_EXT_MIN">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="-40.0"/>
              </initialValue>
            </variable>
            <variable name="T_EXT_MAX">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="60.0"/>
              </initialValue>
            </variable>
            <variable name="T_EXT_DEFAULT">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="-10.0"/>
              </initialValue>
            </variable>
            <variable name="HEAT_PERIOD_START">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="20995200"/>
              </initialValue>
            </variable>
            <variable name="HEAT_PERIOD_STOP">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="10281600"/>
              </initialValue>
            </variable>
            <variable name="COOL_PERIOD_START">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="07776000"/>
              </initialValue>
            </variable>
            <variable name="COOL_PERIOD_STOP">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="23500800"/>
              </initialValue>
            </variable>
            <variable name="HEAT_START_TEMP_DAY">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="15.0"/>
              </initialValue>
            </variable>
            <variable name="HEAT_START_TEMP_NIGHT">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="10.0"/>
              </initialValue>
            </variable>
            <variable name="HEAT_STOP_TEMP">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="18.0"/>
              </initialValue>
            </variable>
            <variable name="COOL_START_TEMP_DAY">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="26.0"/>
              </initialValue>
            </variable>
            <variable name="COOL_START_TEMP_NIGHT">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="26.0"/>
              </initialValue>
            </variable>
            <variable name="COOL_STOP_TEMP">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="24.0"/>
              </initialValue>
            </variable>
            <variable name="START_DAY">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="32400000"/>
              </initialValue>
            </variable>
            <variable name="START_NIGHT">
              <type>
                <UDINT/>
              </type>
              <initialValue>
                <simpleValue value="75600000"/>
              </initialValue>
            </variable>
            <variable name="CYCLE_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10m"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="T_EXT">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="HEAT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="COOL">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last_run">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="cool_start">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="cool_stop">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="heat_start">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="heat_stop">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="xdate">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="day">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF NOT init THEN
	init := TRUE;
	heat_start := SET_DATE(1972,MONTH_OF_DATE(heat_period_start),DAY_OF_MONTH(heat_period_start));
	heat_stop := SET_DATE(1972,MONTH_OF_DATE(heat_period_stop),DAY_OF_MONTH(heat_period_stop));
	cool_start := SET_DATE(1972,MONTH_OF_DATE(cool_period_start),DAY_OF_MONTH(cool_period_start));
	cool_stop := SET_DATE(1972,MONTH_OF_DATE(cool_period_stop),DAY_OF_MONTH(cool_period_stop));
END_IF;

(* read system time *)
tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* for efficiency exit isf this program has been executed less then 1min ago *)
IF tx - last_run < cycle_time THEN RETURN; END_IF;

(* calculate frequently used variables *)
xdate := SET_DATE(1972,MONTH_OF_DATE(DT_TO_DATE_2(dt_in)),DAY_OF_MONTH(DT_TO_DATE_2(dt_in)));
day := DT_TO_TOD_2(dt_in) >= start_day AND  DT_TO_TOD_2(dt_in) < start_night;

(* read the correct external temperature depending on the t_ext_config setting *)
t_ext := MULTI_IN(t_ext1, t_ext2, t_ext3, t_ext_default, t_ext_min, t_ext_max, t_ext_config);

(* dtermine heating *)
IF (heat_start <= heat_stop AND xdate >= heat_start AND xdate <= heat_stop) OR (heat_start > heat_stop AND (xdate >= heat_start OR xdate <= heat_stop)) THEN
	(* heating period id true check for temperature *)
	IF day AND t_ext <= heat_start_temp_day THEN
		heat := TRUE;
	ELSIF NOT day AND t_ext <= heat_start_temp_night THEN
		heat := TRUE;
	ELSIF t_ext >= heat_stop_temp THEN
		heat := FALSE;
	END_IF;
ELSE
	heat := FALSE;
END_IF;

(* dtermine cooling *)
IF (cool_start <= cool_stop AND xdate >= cool_start AND xdate <= cool_stop) OR (cool_start > cool_stop AND (xdate >= cool_start OR xdate <= cool_stop)) THEN
	(* cooling period is true check for temperature *)
	IF day AND t_ext >= cool_start_temp_day THEN
		cool := TRUE;
	ELSIF NOT day AND t_ext >= cool_start_temp_night THEN
		cool := TRUE;
	ELSIF t_ext <= cool_stop_temp THEN
		cool := FALSE;
	END_IF;
ELSE
	cool := FALSE;
END_IF;

last_run := tx;

(* From OSCAT LIBRARY, www.oscat.de *)
(* many FB's required :-)  *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[temp_ext measures and processes ext temperature ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="WATER_CP" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="Pts">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="10"/>
              </initialValue>
            </variable>
            <variable name="data">
              <type>
                <array>
                  <dimension lower="1" upper="20"/>
                  <dimension lower="0" upper="1"/>
                  <baseType>
                    <REAL/>
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="0"/>
                  </value>
                  <value>
                    <simpleValue value="4.228"/>
                  </value>
                  <value>
                    <simpleValue value="5.0"/>
                  </value>
                  <value>
                    <simpleValue value="4.20"/>
                  </value>
                  <value>
                    <simpleValue value="10.0"/>
                  </value>
                  <value>
                    <simpleValue value="4.188"/>
                  </value>
                  <value>
                    <simpleValue value="15.0"/>
                  </value>
                  <value>
                    <simpleValue value="4.184"/>
                  </value>
                  <value>
                    <simpleValue value="50.0"/>
                  </value>
                  <value>
                    <simpleValue value="4.181"/>
                  </value>
                  <value>
                    <simpleValue value="60.0"/>
                  </value>
                  <value>
                    <simpleValue value="4.183"/>
                  </value>
                  <value>
                    <simpleValue value="70.0"/>
                  </value>
                  <value>
                    <simpleValue value="4.187"/>
                  </value>
                  <value>
                    <simpleValue value="80.0"/>
                  </value>
                  <value>
                    <simpleValue value="4.194"/>
                  </value>
                  <value>
                    <simpleValue value="90.0"/>
                  </value>
                  <value>
                    <simpleValue value="4.204"/>
                  </value>
                  <value>
                    <simpleValue value="100.0"/>
                  </value>
                  <value>
                    <simpleValue value="4.22"/>
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[WATER_CP := LINEAR_INT(_T, Data, pts);

(* From OSCAT LIBRARY, www.oscat.de *)
(* LINEAR_INT required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[water_cp calculates the specific heat capacity of liquid water ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="WCT" pouType="function">
        <interface>
          <returnType>
            <REAL/>
          </returnType>
          <inputVars>
            <variable name="_T">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="V">
              <type>
                <REAL/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF V < 5.0 OR _T > 10.0 THEN
	WCT := _T;
ELSE
	WCT := 13.12 + 0.6215 * _T +(0.3965 * _T - 11.37) * EXP(LN(v) * 0.16);
END_IF;

(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this function calculates the wind chill temperature]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CLICK" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_DEBOUNCE">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10ms"/>
              </initialValue>
            </variable>
            <variable name="T_SHORT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#200ms"/>
              </initialValue>
            </variable>
            <variable name="T_PAUSE">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#500ms"/>
              </initialValue>
            </variable>
            <variable name="T_RECONFIG">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1m"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SINGLE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DOUBLE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TRIPLE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="s_in">
              <type>
                <derived name="SW_RECONFIG"/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="state">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* reconfiguration and debounce circuitry *)
s_in(in := in, TD := T_debounce, TR := T_reconfig);

(* read system time *)
tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* count the mumber of clicks *)
IF s_in.Q XOR Q THEN
	last := tx;
	IF s_in.Q THEN state := state + 1; END_IF;
END_IF;
Q := s_in.Q;

(* set outputs *)
IF state > 0 THEN
	IF (Q AND tx - last > t_short) OR (NOT Q AND tx - last > t_pause) THEN
		CASE state OF
			1:	single := TRUE;
				status := BYTE#111;
			2:	double := TRUE;
				status := BYTE#112;
			3:	triple := TRUE;
				status := BYTE#113;
		END_CASE;
		state := 0;
	END_IF;
ELSIF NOT q THEN
	single := FALSE;
	double := FALSE;
	triple := FALSE;
	status := BYTE#110;
	last := tx;
	state := 0;
END_IF;

(* From OSCAT LIBRARY, www.oscat.de *)
(* SW_RECONFIG required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[click checks an input for single, double or tripple click]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SW_RECONFIG" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TD">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="TR">
              <type>
                <TIME/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="T1">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="T2">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="INV">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* run debounce circuit *)
t1(in := IN, PT := TD);

IF tr > t#0s THEN
	(* generate output *)
	Q := t1.Q XOR inv;
	(* reconfiguration timer *)
	T2(in := Q, pt := TR);
	(* when T2.Q goes high then reverse INV *)
	IF T2.Q THEN INV := NOT INV; END_IF;
ELSE
	Q := t1.Q;
END_IF;

(* From OSCAT LIBRARY, www.oscat.de *)
(* TON required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[SW_reconfig detects if an input is high or low active and debounces the input]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="CLICK_MODE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_LONG">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#500ms"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="SINGLE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DOUBLE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="LONG">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TP_LONG">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="timer">
              <type>
                <derived name="TP"/>
              </type>
            </variable>
            <variable name="cnt">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* when input goes high start the timer to decode pulses *)
timer(in := IN, PT := T_LONG);
single := FALSE;
double := FALSE;

IF timer.Q THEN
	(* decode pulses while the timer is active *)
	IF NOT in AND last THEN	cnt := cnt + 1; END_IF;
ELSE
	CASE cnt OF
		1 : single := TRUE;
		2 : double := TRUE;
	END_CASE;
	cnt := 0;
END_IF;
last := in;
TP_LONG := NOT timer.Q AND (NOT LONG) AND IN;
LONG := NOT timer.Q AND in;

(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[click_mode decodes an input for single, double or long click]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DEBOUNCE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="TD">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="PM">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="deb">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF NOT deb.Q AND IN THEN
	(* rising edge on input detetced and debounce timer elapsed *)
	Q := TRUE;
ELSIF NOT PM THEN
	Q := deb.Q;
ELSE
	Q := FALSE;
END_IF;

(* run debounce timer *)
deb(IN := IN, PT := TD);

(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[DEBOUNCE is used to debounce switch inputs]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="DIMM_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="VAL">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="255"/>
              </initialValue>
            </variable>
            <variable name="I1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="I2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_DEBOUNCE">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10ms"/>
              </initialValue>
            </variable>
            <variable name="T_ON_MAX">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#0h"/>
              </initialValue>
            </variable>
            <variable name="T_DIMM_START">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1s"/>
              </initialValue>
            </variable>
            <variable name="T_DIMM">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#3s"/>
              </initialValue>
            </variable>
            <variable name="MIN_ON">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="50"/>
              </initialValue>
            </variable>
            <variable name="MAX_ON">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="255"/>
              </initialValue>
            </variable>
            <variable name="RST_OUT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SOFT_DIMM">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="DBL1_TOG">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DBL2_TOG">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DBL1_SET">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DBL2_SET">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DBL1_POS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="DBL2_POS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="D1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="D2">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="OUT">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="t1">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="t2">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="t3">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="dc1">
              <type>
                <derived name="CLICK_MODE"/>
              </type>
            </variable>
            <variable name="dc2">
              <type>
                <derived name="CLICK_MODE"/>
              </type>
            </variable>
            <variable name="dim">
              <type>
                <derived name="_RMP_B"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* debouncing for inputs i1 and i2 *)
t1(IN := I1, PT := T_DEBOUNCE);
t2(IN := I2, PT := T_DEBOUNCE);
dc1(in := t1.Q, T_LONG := T_DIMM_START);
dc2(in := t2.Q, T_LONG := T_DIMM_START);

IF RST THEN
	IF RST_OUT THEN out := BYTE#0; END_IF;
	Q := FALSE;
	D1 := FALSE;
	D2 := FALSE;
ELSIF set THEN
	OUT := VAL;
	Q := TRUE;
ELSIF dc1.SINGLE THEN
	(* single click on i1 turns the dimmer on *)
	out := LIMIT(MAX(MIN_ON,BYTE#1), out, MAX_ON);
	Q := TRUE;
ELSIF dc2.SINGLE THEN
	(* single click on i2 turns the dimmer off *)
	Q := FALSE;
ELSIF dc1.TP_LONG THEN
	(* continuous on at i1 dimms up *)
	IF NOT Q THEN
		out := SEL(SOFT_DIMM, LIMIT(MAX(MIN_ON,BYTE#1), out, MAX_ON), BYTE#1);
	END_IF;
	Q := TRUE;
	dim.DIR := TRUE;
ELSIF dc2.TP_LONG THEN
	(* continuous on at i2 dimms down *)
	dim.DIR := FALSE;
END_IF;

(* set the double click output *)
IF NOT DBL1_TOG THEN D1 := FALSE; END_IF;
IF dc1.DOUBLE THEN
	IF DBL1_SET THEN
		OUT := DBL1_POS;
		Q := TRUE;
	ELSE
		D1 := NOT D1;
	END_IF;
END_IF;
IF NOT DBL2_TOG THEN D2 := FALSE; END_IF;
IF dc2.DOUBLE THEN
	IF DBL2_SET THEN
		OUT := DBL2_POS;
		Q := TRUE;
	ELSE
		D2 := NOT D2;
	END_IF;
END_IF;


(* while dimming is active ramp the output out up or down *)
dim(dir := dc2.LONG, _e := dc1.LONG OR dc2.LONG , TR := T_DIMM, rmp := out);
out := dim.RMP;

(* turn off output if a value of 0 is reached *)
IF out = BYTE#0 THEN Q := FALSE; END_IF;

(* limit the maximum runtime *)
IF t_ON_MAX > t#0s THEN
	t3(in := q, pt := T_ON_MAX);
	Q := Q XOR t3.Q;
END_IF;

(* From OSCAT LIBRARY, www.oscat.de *)
(* _RMP_B, CLICK_MODE, TOF required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this is an intelligent dimmer interface with an autoset feature]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="F_LAMP" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SWITCH">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DIMM">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="255"/>
              </initialValue>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_NO_DIMM">
              <type>
                <UINT/>
              </type>
              <initialValue>
                <simpleValue value="100"/>
              </initialValue>
            </variable>
            <variable name="T_MAINTENANCE">
              <type>
                <UINT/>
              </type>
              <initialValue>
                <simpleValue value="15000"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="LAMP">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="_ONTIME">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="CYCLES">
              <type>
                <UDINT/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="runtime">
              <type>
                <derived name="ONTIME"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[runtime(in := switch, SECONDS := _ONTIME , CYCLES := CYCLES);
CYCLES := runtime.CYCLES;
_ONTIME := runtime.SECONDS;

IF RST THEN
	_ONTIME := UDINT#0;
	CYCLES := UDINT#0;
END_IF;
IF SWITCH THEN
	IF _ontime < UINT_TO_UDINT(T_NO_DIMM) * UDINT#3600 THEN
		LAMP := BYTE#255;
		STATUS := BYTE#111;
	ELSE
		LAMP := DIMM;
		STATUS := BYTE#112;
	END_IF;
ELSE
	LAMP := BYTE#0;
	STATUS := BYTE#110;
END_IF;

IF _ontime >= UINT_TO_UDINT(T_maintenance) * UDINT#3600 AND T_Maintenance > UINT#0 THEN
	STATUS := BYTE#120;
END_IF;

(* From OSCAT LIBRARY, www.oscat.de *)
(* ONTIME required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[F_Lamp is an interface to flourescent lamps]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="PULSE_LENGTH" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_SHORT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#100ms"/>
              </initialValue>
            </variable>
            <variable name="T_LONG">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1s"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="SHORT">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MIDDLE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="LONG">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tn">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* reset outputs, they should only be active 1 cycle *)
short := FALSE;
Middle := FALSE;
long := FALSE;

(* detect rising edge *)
IF in AND NOT edge THEN
	edge := TRUE;
	tn := tx;

(* detect for falling edge *)
ELSIF NOT in AND edge THEN
	edge := FALSE;
	tn := tx - tn;
	IF tn < t_short THEN
		short := TRUE;
	ELSIF tn > t_long THEN
		long := TRUE;
	ELSE
		Middle := TRUE;
	END_IF;

(* generate long pulse as soon as T_long is reached *)
ELSIF in AND tx - tn > t_long THEN
	long := TRUE;
END_IF;

(* From OSCAT LIBRARY, www.oscat.de *)
]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[Pulse_length indicates on 3 outputs ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="PULSE_T" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T1">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T2">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

IF NOT init THEN
	init := TRUE;
	last := tx;
ELSIF RST THEN
	(* asynchronous reset *)
	Q := FALSE;
ELSIF IN AND NOT edge AND NOT Q THEN
	(* a rising edge on in will reversre the output status, if new pulse is startet the start time is stored in last *)
	last := tx;
	Q := TRUE;
ELSIF NOT IN AND edge AND ((tx - last) > T1) THEN
	(* a falling edge on IN will clear the output if in was high for more then T1 *)
	Q := FALSE;
ELSIF (tx - last) >= T2 THEN
	(* timeout for long pulse if second click did not occur or in stays high *)
	Q := FALSE;
END_IF;

edge := IN;

(* From OSCAT LIBRARY, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[PULSE_T generates a pulse of length T2 if the input pulse is shorter than T1]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SWITCH_I" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="SET">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_DEBOUNCE">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10ms"/>
              </initialValue>
            </variable>
            <variable name="T_RECONFIG">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1s"/>
              </initialValue>
            </variable>
            <variable name="T_ON_MAX">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#0h"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
          </outputVars>
          <localVars>
            <variable name="state">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="edge">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="_r_edge">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="T_on">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* asynchronous set and reset first *)
IF set AND NOT rst THEN
	Q := TRUE;
	T_on := tx;
ELSIF rst THEN
	Q := FALSE;
(* check FOR input edge AND start debounce timer *)
ELSIF (in XOR edge) AND NOT (state = BYTE#1) THEN
	state := BYTE#1;
	T_on := Tx;
(* edge was detected and debounce time elapsed *)
ELSIF (state = BYTE#1) AND (Tx - t_debounce >= T_on) THEN
	state := BYTE#2;
	(* react on rising or falling edge depending on r_edge *)
	IF _r_edge XOR in THEN Q := NOT Q; END_IF;
(* wait for T_reconfig and adjust r_edge *)
ELSIF state = BYTE#2 AND Tx - t_reconfig >= T_on THEN
	_r_edge := in;
END_IF;
IF Q AND T_on_max > t#0ms AND Tx >= T_on + T_on_max THEN
	Q := FALSE;
END_IF;
edge := in;

(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this is an intelligent switch interface ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="SWITCH_X" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="IN1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="IN2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="IN3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="IN4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="IN5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="IN6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_DEBOUNCE">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#50ms"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q31">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q41">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q51">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q61">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q32">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q42">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q52">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q62">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T1">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="T2">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="T3">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="T4">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="T5">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="T6">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="x1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="x2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="E1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="E2">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* initialize on startup *)
IF NOT init THEN
	init := TRUE;
	IF t_debounce < t#50ms THEN tx := t#50ms; ELSE tx := t_debounce; END_IF;
	T1(PT := Tx);
	T2(PT := Tx);
	T3(PT := Tx);
	T4(PT := Tx);
	T5(PT := Tx);
	T6(PT := Tx);
ELSE
	Q1 := FALSE;
	Q2 := FALSE;
	Q3 := FALSE;
	Q4 := FALSE;
	Q5 := FALSE;
	Q6 := FALSE;
	Q31 := FALSE;
	Q41 := FALSE;
	Q51 := FALSE;
	Q61 := FALSE;
	Q32 := FALSE;
	Q42 := FALSE;
	Q52 := FALSE;
	Q62 := FALSE;
END_IF;

(* read inputs and debounce *)
	T1(IN := IN1);
	T2(IN := IN2);
	T3(IN := IN3);
	T4(IN := IN4);
	T5(IN := IN5);
	T6(IN := IN6);

(* detect edge of IN1 and IN2 *)
IF t1.Q AND NOT E1 THEN X1 := TRUE; END_IF;
IF t2.Q AND NOT E2 THEN X2 := TRUE; END_IF;

IF t1.Q THEN
	IF t3.q THEN
		q31 := TRUE;
		X1 := FALSE;
	ELSIF t4.q THEN
		q41 := TRUE;
		X1 := FALSE;
	ELSIF t5.q THEN
		q51 := TRUE;
		X1 := FALSE;
	ELSIF t6.q THEN
		q61 := TRUE;
		X1 := FALSE;
	END_IF;
ELSIF t2.Q THEN
	IF t3.q THEN
		q32 := TRUE;
		X2 := FALSE;
	ELSIF t4.q THEN
		q42 := TRUE;
		X2 := FALSE;
	ELSIF t5.q THEN
		q52 := TRUE;
		X2 := FALSE;
	ELSIF t6.q THEN
		q62 := TRUE;
		X2 := FALSE;
	END_IF;
(* in1 was active alone *)
ELSIF NOT T1.Q AND E1 AND X1 THEN
	Q1 := TRUE;
	X1 := FALSE;
ELSIF NOT T2.Q AND E2 AND X2 THEN
	Q2 := TRUE;
	X2 := FALSE;
ELSIF T3.Q THEN
	Q3 := TRUE;
ELSIF T4.Q THEN
	Q4 := TRUE;
ELSIF T5.Q THEN
	Q5 := TRUE;
ELSIF T6.Q THEN
	Q6 := TRUE;
END_IF;

(* save state of in1 and in2 *)
E1 := T1.Q;
E2 := T2.Q;

(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="TIMER_2" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="DT_IN">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="START">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="DURATION">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="MODE">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="HOLIDAY">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="last_check">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#0s"/>
              </initialValue>
            </variable>
            <variable name="dat">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="daytime">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="activation">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="enabled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="wday">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
          <localVars retain="true">
            <variable name="run_date">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

IF NOT init THEN
	init := TRUE;
	last_check := tx - t#100ms;
END_IF;

(* for performance resons exit if execution is not necessary *)
IF tx - last_check < T#100ms THEN RETURN; END_IF;

(* calculate temp variables *)
dat := _DT_TO_DATE(dt_in);
daytime := _DT_TO_TOD(dt_in);
wday := DAY_OF_WEEK(dat);

(* calculate if any action is necessary today *)
CASE BYTE_TO_INT(mode) OF
1..7:	(* mondays to fridays *)
	enabled := wday = BYTE_TO_INT(mode);
11:	(* every day *)
	enabled := TRUE;
12..16:	(* every nth day *)
	enabled := (dat / UDINT#86400) MOD (BYTE_TO_UDINT(mode) - UDINT#10) = UDINT#0;
20:	(* monday - friday *)
	enabled := wday <= 5;
21:	(* saturday and sunday *)
	enabled := wday > 5;
22: (* workdays only *)
	enabled := wday <= 5 AND NOT holiday;
23:	(* holidays and weekends *)
	enabled := wday > 5 OR holiday;
24:	(* holidays only *)
	enabled := holiday;
25:	(* 1st day of the month *)
	enabled := DAY_OF_MONTH(dat) = 1;
26:	(* last day of month *)
	enabled := day_of_month(dat + TIME_TO_UDINT(t#1d)) = 1;
27:	(* 31st of december *)
	enabled := DAY_OF_MONTH(dat) = 31 AND MONTH_OF_DATE(dat) = 12;
28:	(* 1st of january *)
	enabled := DAY_OF_YEAR(dat) = 1;
ELSE
	enabled := FALSE;
END_CASE;

(* set output if necessary *)
IF enabled AND NOT Q AND daytime >= start AND run_date <> dat THEN
	Q := TRUE;
	activation := tx;
	run_date := dat;
ELSIF Q AND tx - activation >= duration THEN
	Q := FALSE;
END_IF;
last_check := Tx;

(* From OSCAT LIBRARY, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[this timer generated programmabe output pulses per day, week, month ]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TIMER_EXT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ENA">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="_ON">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OFF">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MAN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SWITCH">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DT_IN">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="SUN_SET">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="SUN_RISE">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="HOLIDAY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_DEBOUNCE">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#100ms"/>
              </initialValue>
            </variable>
            <variable name="T_RISE_START">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T_RISE_STOP">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T_SET_START">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T_SET_STOP">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T_DAY_START">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="T_DAY_STOP">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="ENABLE_SATURDAY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ENABLE_SUNDAY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ENABLE_HOLIDAY">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="Q">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="mx">
              <type>
                <derived name="MANUAL_2"/>
              </type>
            </variable>
            <variable name="deb">
              <type>
                <derived name="DEBOUNCE"/>
              </type>
            </variable>
            <variable name="tdx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="wdx">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="tc">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="tl">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="qx">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* lösche die millisekunden bei sunrise und sunset *)
SUN_RISE := SUN_RISE / UDINT#1000 * UDINT#1000;
SUN_SET := SUN_SET / UDINT#1000 * UDINT#1000;

(* measure cycle time tc and make sure this circuitry is not called more then once in 200ms*)
tx:= T_PLC_MS(en:=true);
IF NOT init THEN
	init := TRUE;
	tl := tx;
END_IF;
tc := UDINT_TO_TIME(tx - tl);
IF tc < t#200ms THEN RETURN; END_IF;
tl := tx;

(* debounce *)
deb(in := SWITCH, TD := T_DEBOUNCE, PM := TRUE);

(* read time of day and strip off all milliseconds *)
tdx := _DT_TO_TOD(dt_in);
wdx := DAY_OF_WEEK(_DT_TO_DATE(dt_in));

(* automatic output control *)
IF deb.Q THEN
	qx := NOT qx;
	status := BYTE#110;
ELSIF holiday AND NOT enable_holiday THEN
	qx := FALSE;
ELSIF wdx = 6 AND NOT enable_saturday THEN
	qx := FALSE;
ELSIF wdx = 7 AND NOT enable_sunday THEN
	qx := FALSE;
ELSIF T_day_start > UDINT#00 (* TOD#00:00 *) AND tdx - T_DAY_START <= TIME_TO_UDINT(tc) THEN
	(* turn on at specified daytime *)
	qx := TRUE;
	status := BYTE#111;
ELSIF T_DAY_STOP > UDINT#00 (* TOD#00:00 *) AND tdx - T_DAY_STOP <= TIME_TO_UDINT(tc) THEN
	(* turn off at specific daytime *)
	qx := FALSE;
	status := BYTE#112;
ELSIF T_RISE_START > T#0s AND tdx - SUN_RISE + TIME_TO_UDINT(T_RISE_START) <= TIME_TO_UDINT(tc) THEN
	(* turn on before sunrise *)
	qx := TRUE;
	status := BYTE#113;
ELSIF T_RISE_STOP > T#0s AND tdx - SUN_RISE - TIME_TO_UDINT(T_RISE_STOP) <= TIME_TO_UDINT(tc) THEN
	(* turn off after sunrise *)
	qx := FALSE;
	status := BYTE#114;
ELSIF T_SET_start > T#0s AND tdx - SUN_SET + TIME_TO_UDINT(T_SET_START) <= TIME_TO_UDINT(tc) THEN
	(* turn on before sunset *)
	qx := TRUE;
	status := BYTE#115;
ELSIF T_SET_STOP > T#0s AND tdx - SUN_SET - TIME_TO_UDINT(T_SET_STOP) <= TIME_TO_UDINT(tc) THEN
	(* turn off after sunset *)
	qx := FALSE;
	status := BYTE#116;
END_IF;

(* manual and output control *)
mx(in := qx, ena := ENA, _on := _ON, off := OFF, man := MAN);
Q := mx.Q;

(* set the status output *)
IF mx.STATUS > BYTE#100 THEN status := mx.STATUS; END_IF;
  
(* From OSCAT LIBRARY, www.oscat.de *)
(* DEBOUNCE, T_PLC_MS, MANUAL_" required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TIMER_EXT is a twilight timer]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="TIMER_P4" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="DTIME">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="TREF_0">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="TREF_1">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="HOLY">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="L0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="L1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="L2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="L3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OFS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="ENQ">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MAN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="RST">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <inOutVars>
            <variable name="PROG">
              <type>
                <array>
                  <dimension lower="0" upper="63"/>
                  <baseType>
                    <derived name="TIMER_EVENT"/>
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml:p><![CDATA[Hier muss die obere Grenze = array_max manuell eingegeben werden]]></xhtml:p>
              </documentation>
            </variable>
          </inOutVars>
          <outputVars>
            <variable name="Q0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Q3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="day_start">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="start">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="event">
              <type>
                <derived name="TIMER_EVENT"/>
              </type>
            </variable>
            <variable name="pos">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="last_execute">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="current_day">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="mask">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="ma">
              <type>
                <array>
                  <dimension lower="0" upper="3"/>
                  <baseType>
                    <BYTE/>
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml:p><![CDATA[Hier muss die obere Grenze = channel_max manuell eingegeben werden]]></xhtml:p>
              </documentation>
            </variable>
            <variable name="mo">
              <type>
                <array>
                  <dimension lower="0" upper="3"/>
                  <baseType>
                    <BYTE/>
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml:p><![CDATA[Hier muss die obere Grenze = channel_max manuell eingegeben werden]]></xhtml:p>
              </documentation>
            </variable>
            <variable name="qn">
              <type>
                <array>
                  <dimension lower="0" upper="3"/>
                  <baseType>
                    <BOOL/>
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml:p><![CDATA[Hier muss die obere Grenze = channel_max manuell eingegeben werden]]></xhtml:p>
              </documentation>
            </variable>
            <variable name="qs">
              <type>
                <array>
                  <dimension lower="0" upper="3"/>
                  <baseType>
                    <BOOL/>
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml:p><![CDATA[Hier muss die obere Grenze = channel_max manuell eingegeben werden]]></xhtml:p>
              </documentation>
            </variable>
            <variable name="channel">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="array_max">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="63"/>
              </initialValue>
            </variable>
            <variable name="channel_max">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="3"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* for performance reasons we only execute the code at the beginning of a new second *)

IF RST THEN
	(* reset all events to last active on 1.1.1970 *)
	last_execute := UDINT#00; (* DT#1970-1-1-00:00 *)
	FOR pos := 0 TO ARRAY_MAX DO
		IF (PROG[pos].CHANNEL >= OFS) AND (BYTE_TO_INT(PROG[pos].CHANNEL) < (BYTE_TO_INT(OFS) + 4)) THEN PROG[pos].LAST := last_execute; END_IF;
	END_FOR;

	(* reset all set markers and logic masks *)
	FOR pos := 0 TO channel_max DO
		qs[pos] := FALSE;
	END_FOR;

(* normal operation *)
ELSIF dtime <> last_execute THEN
	(* save the actual second for next execution test *)
	last_execute := DTIME;

	(* calculate dt for the start of the day to be used in comparisons *)
	day_start := DATE_TO_DT(_DT_TO_DATE(DTIME));

	(* set all qn to FALSE *)
	FOR pos := 0 TO channel_max DO qn[pos] := FALSE; END_FOR;

	(* search the array PROG for timer events *)
	FOR pos := 0 TO ARRAY_MAX DO
		event := prog[pos];
		channel := BYTE_TO_INT(event.CHANNEL) - BYTE_TO_INT(OFS);
		IF (event.TYP > BYTE#0) AND (channel >= 0) AND (channel <= channel_max) THEN
			ma[channel] := event.LAND;
			mo[channel] := event.LOR;
			CASE BYTE_TO_INT(event.TYP) OF
				1:	(* daily event *)
					start := day_start + event.start;
					qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);

				2: 	(* event by selected weekdays *)
					IF (SHR(BYTE#128, DAY_OF_WEEK(_DT_TO_DATE(Dtime))) AND event.DAY) > BYTE#0 THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				3:	(* event every N days *)
					IF current_day MOD BYTE_TO_DINT(event.DAY) = DINT#0 THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				10:	(* weekly event exactly once a week the weekday is specified in day, 1= mo *)
					IF DAY_OF_WEEK(_DT_TO_DATE(DTIME)) = BYTE_TO_INT(event.DAY) THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				20:	(* monthly event *)
					IF DAY_OF_MONTH(_DT_TO_DATE(DTIME)) = BYTE_TO_INT(event.DAY) THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				21:	(* event on last day of month *)
					IF _DT_TO_DATE(DTIME) = MONTH_END(_DT_TO_DATE(dtime)) THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				30:	(* yearly event on a specific day specified in day *)
					IF DAY_OF_YEAR(_DT_TO_DATE(DTIME)) = BYTE_TO_INT(event.DAY) THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				31:	(* event on last day of year *)
					IF _DT_TO_DATE(DTIME) = YEAR_END(YEAR_OF_DATE(_DT_TO_DATE(dtime))) THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				40:	(* event on leap days *)
					IF LEAP_DAY(_DT_TO_DATE(dtime)) THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				41: (* event on holidays *)
					IF HOLY THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				42: (* event on holidays and weekends *)
					IF (Holy OR (DAY_OF_WEEK(_DT_TO_DATE(dtime)) = 6) OR (DAY_OF_WEEK(_DT_TO_DATE(dtime)) = 7)) THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				43:	(* event on workdays Mo-FR and no holiday *)
					IF DAY_OF_WEEK(_DT_TO_DATE(dtime)) < 6 THEN
						start := day_start + event.start;
						qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);
					END_IF;

				50: (* event after reference time *)
					CASE BYTE_TO_INT(prog[pos].DAY) OF
						0:	tx := tref_0;
						1:	tx := tref_1;
					ELSE
						tx := UDINT#0 (* TOD#00:00 *);
					END_CASE;
					start := day_start + tx + event.start;
					qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);

				51:	(* event before reference time *)
					CASE BYTE_TO_INT(prog[pos].DAY) OF
						0:	tx := tref_0;
						1:	tx := tref_1;
					ELSE
						tx := UDINT#0 (* TOD#00:00 *);
					END_CASE;
					start := day_start + tx - event.start;
					qn[channel] := dtime >= start AND dtime <= start + TIME_TO_UDINT(event.DURATION);

				52 : (* set output at specific time + offset  *)
					CASE BYTE_TO_INT(prog[pos].DAY) OF
						0:	tx := tref_0;
						1:	tx := tref_1;
					ELSE
						tx := UDINT#0 (* TOD#00:00 *);
					END_CASE;
					start := day_start + tx + event.start;
					IF dtime >= start AND day_start > event.LAST THEN
						qs[channel] := TRUE;
						prog[pos].LAST := day_start;
					END_IF;

				53 : (* reset output at specific time + offset *)
					CASE BYTE_TO_INT(prog[pos].DAY) OF
						0:	tx := tref_0;
						1:	tx := tref_1;
					ELSE
						tx := UDINT#0 (* TOD#00:00 *);
					END_CASE;
					start := day_start + tx + event.start;
					IF dtime >= start AND day_start > event.LAST THEN
						qs[channel] := FALSE;
						prog[pos].LAST := day_start;
					END_IF;

				54 : (* set output at specific time - offset  *)
					CASE BYTE_TO_INT(prog[pos].DAY) OF
						0:	tx := tref_0;
						1:	tx := tref_1;
					ELSE
						tx := UDINT#0 (* TOD#00:00 *);
					END_CASE;
					start := day_start + tx - event.start;
					IF dtime >= start AND day_start > event.LAST THEN
						qs[channel] := TRUE;
						prog[pos].LAST := day_start;
					END_IF;

				55 : (* reset output at specific time - offset *)
					CASE BYTE_TO_INT(prog[pos].DAY) OF
						0:	tx := tref_0;
						1:	tx := tref_1;
					ELSE
						tx := UDINT#0 (* TOD#00:00 *);
					END_CASE;
					start := day_start + tx - event.start;
					IF dtime >= start AND day_start > event.LAST THEN
						qs[channel] := FALSE;
						prog[pos].LAST := day_start;
					END_IF;
			END_CASE;
		END_IF;
	END_FOR;
END_IF;

(* prepare the logical input mask *)
mask := BYTE#255;
mask:=BIT_LOAD_B(mask,L0,0);
mask:=BIT_LOAD_B(mask,L1,1);
mask:=BIT_LOAD_B(mask,L2,2);
mask:=BIT_LOAD_B(mask,L3,3);

(* set the outputs *)
Q0 := ENQ AND ((qn[0] OR qs[0]) AND ((ma[0] AND mask) = ma[0]) OR ((mo[0] AND mask) > BYTE#0) OR (man AND BIT_OF_DWORD(BYTE_TO_DWORD(MI),0)));
Q1 := ENQ AND ((qn[1] OR qs[1]) AND ((ma[1] AND mask) = ma[1]) OR ((mo[1] AND mask) > BYTE#1) OR (man AND BIT_OF_DWORD(BYTE_TO_DWORD(MI),1)));
Q2 := ENQ AND ((qn[2] OR qs[2]) AND ((ma[2] AND mask) = ma[2]) OR ((mo[2] AND mask) > BYTE#2) OR (man AND BIT_OF_DWORD(BYTE_TO_DWORD(MI),2)));
Q3 := ENQ AND ((qn[3] OR qs[3]) AND ((ma[3] AND mask) = ma[3]) OR ((mo[3] AND mask) > BYTE#3) OR (man AND BIT_OF_DWORD(BYTE_TO_DWORD(MI),3)));

(* set status *)
IF NOT enq THEN
	status := BYTE#100;
ELSIF man THEN
	status := BYTE#101;
ELSE
	status := BYTE#102;
END_IF;

(* From OSCAT LIBRARY, www.oscat.de *)
(* several FB'S required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[TIMER_P4 is a programmable universal timer]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BLIND_ACTUATOR" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="S_IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="T_UD">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#10s"/>
              </initialValue>
            </variable>
            <variable name="T_ANGLE">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#3s"/>
              </initialValue>
            </variable>
            <variable name="T_LOCKOUT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#100ms"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="POS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="ANG">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="QU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="QD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="position">
              <type>
                <derived name="RMP_B"/>
              </type>
            </variable>
            <variable name="angle">
              <type>
                <derived name="RMP_B"/>
              </type>
            </variable>
            <variable name="lock">
              <type>
                <derived name="INTERLOCK"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* make sure only one motor is active at a given time *)
lock(i1 := UP, I2 := DN, TL := T_lockout);

(* ramp up or down to simulate the angle position of the blind slats *)
angle(_e := lock.Q1 OR lock.Q2, UP := lock.Q1, PT := T_Angle);
position(_e := lock.Q1 AND angle.high OR lock.Q2 AND angle.low, up := lock.Q1, PT := T_UD);

(* set the outputs *)
pos := position.Out;
ang := angle.Out;

(* set the outputs *)
QU := lock.Q1;
QD := lock.Q2;

(* set the status output *)
IF UP AND DN THEN
	 status := BYTE#1;			(* error up and down together are not allowed *)
ELSIF UP THEN
	status := BYTE#121;
ELSIF DN THEN
	status := BYTE#122;
ELSE
	status := S_IN;
END_IF;

(* From OSCAT LIBRARY, www.oscat.de *)
(* INTERLOCK, RMP_B required *)]]></xhtml:p>
          </ST>
        </body>
        <documentation>
          <xhtml:p><![CDATA[blind actuator drives the up and down motor of a blind]]></xhtml:p>
        </documentation>
      </pou>
      <pou name="BLIND_CONTROL" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="S_IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="T_UD">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T_ANGLE">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T_LOCKOUT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#100ms"/>
              </initialValue>
            </variable>
            <variable name="SENS">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="5"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="POS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="ANG">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="MU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="act">
              <type>
                <derived name="BLIND_ACTUATOR"/>
              </type>
            </variable>
            <variable name="delta">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="ipos">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="iangel">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="bTimeTest">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF bTimeTest THEN
	PI:=iPos;
	AI:=iAngel;
	UP:=TRUE;
	DN:=TRUE;
END_IF;

(* Check Position*)
act(T_UD:=T_UD, T_ANGLE:=T_ANGLE, T_lockout := T_Lockout);

IF UP AND DN THEN
	(* automatic modus detected *)
	(* first find correct position *)
	IF BYTE_TO_INT(act.pos) < BYTE_TO_INT(pi) - BYTE_TO_INT(delta) THEN
		act.UP := TRUE;
		act.DN := FALSE;
		delta := BYTE#0;
		STATUS := BYTE#121;
	ELSIF BYTE_TO_INT(act.pos) > BYTE_TO_INT(pi) + BYTE_TO_INT(delta) THEN
		act.UP := FALSE;
		act.DN := TRUE;
		delta := BYTE#0;
		STATUS := BYTE#122;
	(* regulate angle *)
	ELSIF BYTE_TO_INT(act.ang) < BYTE_TO_INT(ai) - BYTE_TO_INT(delta) AND T_angle > T#100ms THEN
		act.UP := TRUE;
		act.DN := FALSE;
		delta := SHR(sens,2);
		STATUS := BYTE#123;
	ELSIF BYTE_TO_INT(act.ang) > BYTE_TO_INT(ai) + BYTE_TO_INT(delta) AND T_angle > T#100ms THEN
		act.UP := FALSE;
		act.DN := TRUE;
		delta := SHR(sens,2);
		STATUS := BYTE#124;
	(* correct position reached *)
	ELSE
		act.UP := FALSE;
		act.DN := FALSE;
		delta := sens;
		STATUS := S_IN;
	END_IF;
ELSE
	act.UP := UP;
	act.DN := DN;
	STATUS := S_IN;
END_IF;

(* blind control calls blind_actuator *)
act(T_UD:=T_UD, T_ANGLE:=T_ANGLE, T_lockout := T_Lockout);
pos := act.pos;
ang := act.ang;
MU := act.QU;
md := act.QD;
status := act.status;

(* From OSCAT LIBRARY, www.oscat.de *)
(* BLIND_ACTUATOR required *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="BLIND_CONTROL_S" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="S_IN">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="125"/>
              </initialValue>
            </variable>
            <variable name="PI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="T_UP">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="T_DN">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="RU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="T_LOCKOUT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#100ms"/>
              </initialValue>
            </variable>
            <variable name="T_EXT">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="EXT_TRIG">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="5"/>
              </initialValue>
            </variable>
            <variable name="R_POS_TOP">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="255"/>
              </initialValue>
            </variable>
            <variable name="R_POS_BOT">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="POS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="MU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="MD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="rmp">
              <type>
                <derived name="_RMP_NEXT"/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="pi_last">
              <type>
                <BYTE/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* check inputs and start state machine *)
IF UP  AND NOT DN THEN
	(*  manual UP *)
	rmp.IN := BYTE#255;
	STATUS := BYTE#121;
ELSIF DN AND NOT UP THEN
	(* manual DN *)
	rmp.IN := BYTE#0;
	STATUS := BYTE#122;
ELSIF NOT (UP OR DN) THEN
	(* manual standby mode *)
	rmp.IN := PI;
	STATUS := S_IN;
END_IF;

(* simulate pos output *)
rmp(_E := UP OR DN, TR := T_UP, TF := T_DN, TL := T_LOCKOUT, OUT := POS);
pos := rmp.OUT;

(* state machine *)
CASE BYTE_TO_INT(STATUS) OF
	0:		(* power up init *)
		last := tx;
		PI_last := PI XOR BYTE#255;
		STATUS := BYTE#128;		(* calibrate *)

	121: 	(* manual up *)
		MU := TRUE;
		MD := FALSE;
		IF POS >= USINT_TO_BYTE(USINT#255 - BYTE_TO_USINT(EXT_TRIG)) THEN
			(* extend cycle if top is reached *)
			POS := BYTE#255;
			last := tx;
			STATUS := BYTE#129;	(* extend *)
		END_IF;

	122:	(* manual down *)
		MD := TRUE;
		MU := FALSE;
		IF POS <= EXT_TRIG THEN
			(* extend cycle if bottom is reached *)
			POS := BYTE#0;
			last := tx;
			STATUS := BYTE#129;	(* extend *)
		END_IF;

	123:	(* auto positioning *)
		MD := rmp.DN;
		MU := rmp.UP;
		IF NOT (rmp.DN OR rmp.UP) THEN
			(* automatic position is reached *)
			IF POS <= EXT_TRIG THEN
				(* extend at bottom *)
				MD := TRUE;
				last := tx;
				STATUS := BYTE#129;	(* extend *)
			ELSIF POS >= USINT_TO_BYTE(USINT#255 - BYTE_TO_USINT(EXT_TRIG)) THEN
				(* extend at top *)
				MU := TRUE;
				last := tx;
				STATUS := BYTE#129;	(* extend *)
			ELSE
				STATUS := S_IN;
			END_IF;
		END_IF;

	124:	(* revert from top or bottom *)
		MD := rmp.DN;
		MU := rmp.UP;
		IF NOT(rmp.DN OR rmp.UP) THEN
(*		IF POS = rmp.IN THEN  *)
			PI_last := PI;
			STATUS := S_IN;
		END_IF;

	127:	(* lockout time *)
		IF (tx - last) >= T_LOCKOUT THEN
				STATUS := S_IN;
		END_IF;

	128:	(* calibration *)
		MU := TRUE;
		MD := FALSE;
		rmp.IN := BYTE#255;
		IF (tx - last) >= (T_UP +  T_EXT) THEN
			MU := FALSE;
			last := tx;
			STATUS := BYTE#127;	(* lockout *)
		END_IF;

	129: (* extend mode *)
		IF (tx - last) >= T_EXT THEN
			MU := FALSE;
			MD := FALSE;
			last := tx;
			STATUS := BYTE#127;	(* lockout *)
		END_IF;

ELSE
	MU := FALSE;
	MD := FALSE;
	IF PI <> PI_last THEN
		PI_last := PI;
		rmp.IN := PI;
		STATUS := BYTE#123;	(* auto positioning *)
	ELSIF POS = BYTE#0 AND RU THEN
		rmp.IN := R_POS_BOT;
		STATUS := BYTE#124;	(* revert *)
	ELSIF pos = BYTE#255 AND RD THEN
		rmp.IN := R_POS_TOP;
		STATUS := BYTE#124;	(* revert *)
	ELSE
		STATUS := S_IN;
	END_IF;
END_CASE;

(* From OSCAT LIBRARY, www.oscat.de *)
(* T_PLC_MS, _RMP_NEXT required *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="BLIND_INPUT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="POS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="ANG">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="S1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="S2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="SINGLE_SWITCH">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="CLICK_EN">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="CLICK_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#500ms"/>
              </initialValue>
            </variable>
            <variable name="MAX_RUNTIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#60s"/>
              </initialValue>
            </variable>
            <variable name="MANUAL_TIMEOUT">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1h"/>
              </initialValue>
            </variable>
            <variable name="DEBOUNCE_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#20ms"/>
              </initialValue>
            </variable>
            <variable name="DBL_CLK1">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="DBL_POS1">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="DBL_ANG1">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="DBL_CLK2">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="DBL_POS2">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="255"/>
              </initialValue>
            </variable>
            <variable name="DBL_ANG2">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="255"/>
              </initialValue>
            </variable>
            <variable name="D1_TOGGLE">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="D2_TOGGLE">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="MASTER_MODE">
              <type>
                <BOOL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="QU">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="QD">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PO">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="255"/>
              </initialValue>
            </variable>
            <variable name="AO">
              <type>
                <BYTE/>
              </type>
              <initialValue>
                <simpleValue value="255"/>
              </initialValue>
            </variable>
            <variable name="D1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="D2">
              <type>
                <BOOL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="s1e">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="s2e">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="s1d">
              <type>
                <derived name="CLICK_MODE"/>
              </type>
            </variable>
            <variable name="s2d">
              <type>
                <derived name="CLICK_MODE"/>
              </type>
            </variable>
            <variable name="dir">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));

(* inputs S1 and S2 are debounced and then decoded for multiple clicks *)
s1e(in := S1, pt := DEBOUNCE_TIME);
s2e(in := S2, pt := DEBOUNCE_TIME);
s1d(in := (s1e.Q AND NOT SINGLE_SWITCH) OR (s1e.Q AND SINGLE_SWITCH AND dir), t_long := CLICK_TIME);
s2d(in := (s2e.Q AND NOT SINGLE_SWITCH) OR (s1e.Q AND SINGLE_SWITCH AND NOT dir), t_long := CLICK_TIME);

(* if d1 and d2 are not toggle clear them to make sure they are only active for oine cycle *)
IF NOT d1_toggle THEN d1 := FALSE; END_IF;
IF NOT d2_toggle THEN d2 := FALSE; END_IF;

(* decode actions *)
IF (s1d.LONG AND s2d.LONG) OR (status = BYTE#139) THEN
   status := BYTE#139;
   IF NOT (s1d.LONG OR s2d.LONG)  THEN status := BYTE#130; END_IF;
ELSIF s1d.tp_LONG THEN
	status := BYTE#132;
ELSIF s2d.tp_LONG THEN
	status := BYTE#133;
ELSIF  s1d.SINGLE THEN
	IF click_en THEN
		(* if running then we stop otherwise start new direction *)
		IF QU XOR QD THEN
			status := BYTE#131;
		ELSE
			status := BYTE#134;
			last := tx;
			dir := NOT dir;
		END_IF;
	END_IF;
ELSIF  s2d.SINGLE THEN
	IF click_en THEN
		(* if running then we stop otherwise start new direction *)
		IF QU XOR QD THEN
			status := BYTE#131;
		ELSE
			status := BYTE#135;
			last := tx;
			dir := NOT dir;
		END_IF;
	END_IF;
ELSIF in THEN
	status := BYTE#136;
	last := tx;
ELSIF s1d.DOUBLE THEN
	IF dbl_clk1 THEN
		(* a position need to be set for a double click on S1 *)
		status := BYTE#137;
		last := tx;
	ELSE
		(* toggle the output when dbl_clk1 is not active *)
		D1 := NOT D1;
	END_IF;
ELSIF s2d.DOUBLE THEN
	IF dbl_clk2 THEN
		(* a position need to be set for a double click on S2 *)
		status := BYTE#138;
		last := tx;
	ELSE
		(* toggle the output when dbl_clk2 is not active *)
		(* in single switch mode we need to toggle d1 instead of d2 *)
		IF single_switch THEN D1 := NOT D1; ELSE D2 := NOT D2; END_IF;
	END_IF;
END_IF;


(* state machine *)
CASE BYTE_TO_INT(status) OF
	0:		(* power up operation *)
			status := BYTE#130;

	130:	(* automatic operation standby *)
			IF NOT master_mode THEN
				PO := POS;
				AO := ANG;
			END_IF;
			QU := TRUE;
			QD := TRUE;

	131:	(* manual operation standby *)
			QU := FALSE;
			QD := FALSE;
			PO := POS;
			AO := ANG;
			(* manual mode will be ended when timeout is reached *)
			IF tx - last >= manual_timeout THEN
				status := BYTE#130;
			END_IF;

	132:	(* manual operation up *)
			QU := TRUE;
			QD := FALSE;
			PO := POS; AO := ANG;
			last := tx;
			IF NOT s1d.LONG THEN status := BYTE#131; dir := NOT dir; END_IF;

	133:	(* manual operation down *)
			QU := FALSE;
			QD := TRUE;
			PO := POS; AO := ANG;
			last := tx;
			IF NOT s2d.LONG THEN	status := BYTE#131; dir := NOT dir; END_IF;

	134:	(* manual operation single click up *)
			QU := TRUE;
			QD := FALSE;
			PO := POS; AO := ANG;
			IF tx - last >= max_runtime THEN status := BYTE#131; END_IF;

	135:	(* manual operation single click dn *)
			QU := FALSE;
			QD := TRUE;
			PO := POS; AO := ANG;
			IF tx - last >= max_runtime THEN status := BYTE#131;	END_IF;

	136:	(* forced input in = true *)
			QU := TRUE;
			QD := TRUE;
			PO := PI; AO := AI;
			IF tx-last >= max_runtime THEN status := BYTE#130; END_IF;

	137:	(* double click1 position *)
			QU := TRUE;
			QD := TRUE;
			PO := DBL_POS1;
			AO := DBL_ANG1;
			IF tx - last >= max_runtime THEN status := BYTE#131; END_IF;

	138:	(* double click2 position *)
			QU := TRUE;
			QD := TRUE;
			PO := DBL_POS2;
			AO := DBL_ANG2;
			IF tx - last >= max_runtime THEN status := BYTE#131; END_IF;

	   139:   (* manual operation standby *)
	         QU := FALSE;
	         QD := FALSE;
	         PO := POS;
	         AO := ANG;

END_CASE;

(* From OSCAT LIBRARY, www.oscat.de *)
(* T_PLC_MS required *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="BLIND_NIGHT" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="S_IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="E_NIGHT">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="E_DAY">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="DTIN">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="SUNRISE">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="SUNSET">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="SUNRISE_OFFSET">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="SUNSET_OFFSET">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="NIGHT_POSITION">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="NIGHT_ANGLE">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="QU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="QD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PO">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AO">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="night">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="last_night">
              <type>
                <UDINT/>
              </type>
            </variable>
            <variable name="last_day">
              <type>
                <UDINT/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF NOT (up AND dn) AND night THEN
	(* manual operation at night will cancel operation for one night *)
	night := FALSE;
ELSIF (_DT_TO_TOD(dtin) > sunset + TIME_TO_UDINT(sunset_offset)) AND (last_night < _DT_TO_DATE(dtin)) AND NOT night AND e_night THEN
	(* enable night *)
	night := TRUE;
	last_night := _DT_TO_DATE(dtin);
ELSIF (_DT_TO_TOD(dtin) > sunrise + TIME_TO_UDINT(sunrise_offset)) AND (last_day < _DT_TO_DATE(dtin)) AND night AND e_day AND (last_night < _DT_TO_DATE(dtin)) THEN
	(* disable night *)
	night := FALSE;
	last_day := _DT_TO_DATE(dtin);
END_IF;

(* shade at night only in auto mode and enable = true *)
IF UP AND DN AND night THEN
	status := BYTE#141;
	po := night_position;
	ao := night_angle;
ELSE
	QU := UP;
	QD := DN;
	po := pi;
	ao := ai;
	status := s_in;
END_IF;

(* From OSCAT LIBRARY, www.oscat.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="BLIND_SECURITY" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="S_IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="FIRE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="WIND">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ALARM">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DOOR">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RAIN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ALARM_UP">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="WIND_UP">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="RAIN_UP">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="QU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="QD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PO">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AO">
              <type>
                <BYTE/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[IF Fire THEN
	QU := TRUE;
	QD := FALSE;
	status := BYTE#111;
ELSIF Wind THEN
	QU := Wind_up;
	QD := NOT wind_up;
	status := BYTE#112;
ELSIF alarm THEN
	QU := Alarm_up;
	QD := NOT Alarm_up;
	status := BYTE#113;
ELSIF Door THEN
	QU := TRUE;
	QD := FALSE;
	status := BYTE#114;
ELSIF Rain AND NOT (up XOR dn) THEN
	QU := rain_up;
	QD := NOT rain_up;
	status := BYTE#115;
ELSE
	QU := UP;
	QD := DN;
	status := S_IN;
	po := pi;
	ao := ai;
END_IF;

(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="BLIND_SET" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="S_IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PX">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AX">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="IN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="OVERRIDE_MANUAL">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RESTORE_POSITION">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="RESTORE_TIME">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#60s"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="QU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="QD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PO">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AO">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="tx">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="last">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="ps">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="as">
              <type>
                <BYTE/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[tx:= UDINT_TO_TIME(T_PLC_MS(en:=true));
(* check inputs *)
IF IN THEN
	IF override_manual OR (UP AND DN) THEN
		status := 178;
	END_IF;
END_IF;

(* state machine *)
CASE byte_to_int(STATUS) OF
	0: (* power on state *)
		status := S_IN;

	178: (* force values from PX and AX *)
		PO := PX;
		AO := AX;
		QU := TRUE;
		QD := TRUE;
		(* check for end of forced position *)
		IF NOT in THEN
			STATUS := SEL(RESTORE_POSITION, S_IN, 179);
			last := tx;
		END_IF;

	179: (* restore previous position *)
		PO := ps;
		AO := as;
		IF ((PO = PI) AND (AO = AI))  OR tx - last >= RESTORE_TIME THEN
			status := S_IN;
		END_IF;

ELSE
	(* no operation transfer inputs to outputs *)
	PO := PI;
	ps := PI;
	AO := AI;
	as := AI;
	STATUS := S_IN;
	QU := UP;
	QD := DN;
END_CASE;


(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
      <pou name="BLIND_SHADE" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="UP">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="DN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AI">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="S_IN">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="ENABLE">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SUN">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="SUNRISE_OFFSET">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1h"/>
              </initialValue>
            </variable>
            <variable name="SUNSET_PRESET">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#1h"/>
              </initialValue>
            </variable>
            <variable name="SHADE_DELAY">
              <type>
                <TIME/>
              </type>
              <initialValue>
                <simpleValue value="t#60s"/>
              </initialValue>
            </variable>
            <variable name="SHADE_POS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="DIRECTION">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="180.0"/>
              </initialValue>
            </variable>
            <variable name="ANGLE_OFFSET">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="80.0"/>
              </initialValue>
            </variable>
            <variable name="SLAT_WIDTH">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="80.0"/>
              </initialValue>
            </variable>
            <variable name="SLAT_SPACING">
              <type>
                <REAL/>
              </type>
              <initialValue>
                <simpleValue value="60.0"/>
              </initialValue>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="QU">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="QD">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="STATUS">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="PO">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="AO">
              <type>
                <BYTE/>
              </type>
            </variable>
          </outputVars>
          <inOutVars>
            <variable name="CX">
              <type>
                <derived name="OSCAT_CALENDAR"/>
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="sun_delay">
              <type>
                <derived name="TOF"/>
              </type>
            </variable>
            <variable name="angle">
              <type>
                <REAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* the input sun is sent through tof which will delay the shade for the time shade_delay *)
sun_delay(IN := sun, PT := shade_delay);

IF UP AND DN AND enable AND sun_delay.Q AND cx.SUN_HOR > direction - angle_offset AND cx.SUN_HOR < direction + angle_offset AND
	_DT_TO_TOD(cx.UTC) > cx.SUN_RISE + TIME_TO_UDINT(sunrise_offset) AND _DT_TO_TOD(cx.UTC) < cx.SUN_SET - TIME_TO_UDINT(sunset_preset) THEN
	status := BYTE#151;
	QU := UP;
	QD := DN;
	(* position is predefined *)
	po := shade_pos;
	(* shading is active now calculate the slat angle *)
	(* calculate the max angle for the blind *)
	angle := DEG(ATAN(slat_spacing / slat_width));
	(* check if sun angle is between 0 and max angle *)
	IF cx.SUN_VER > 0.0 AND cx.SUN_VER < angle THEN
		angle := cx.SUN_VER + DEG(ACOS(COS(RAD(cx.SUN_VER))*slat_spacing / Slat_width));
		ao := INT_TO_BYTE(LIMIT(0,UDINT_TO_INT(TRUNC(angle * 2.833333333)), 255));
	ELSE
		ao := BYTE#255;
	END_IF;
ELSE
	QU := UP;
	QD := DN;
	po := pi;
	ao := ai;
	status := S_IN;
END_IF;


(* From OSCAT Library, www.OSCAT.de *)]]></xhtml:p>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Config0">
        <resource name="Res0">
          <task name="task0" priority="0" interval="T#20ms">
            <pouInstance name="instance0" typeName="program0"/>
          </task>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
